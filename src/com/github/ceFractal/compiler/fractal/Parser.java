
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Jun 25 18:39:27 CST 2014
//----------------------------------------------------

package com.github.ceFractal.compiler.fractal;

import com.github.gg.Dict;
import com.github.gg.TOperation;
import com.github.gg.Node;
import com.github.gg.Err;
import com.github.gg.TErr;
import com.github.gg.TType;
import com.github.gg.TModifier;
import java.util.ArrayList;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Jun 25 18:39:27 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\324\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\104\003\000\002\104\002\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\003\004\000" +
    "\002\003\004\000\002\111\004\000\002\111\003\000\002" +
    "\112\007\000\002\007\011\000\002\007\013\000\002\011" +
    "\003\000\002\011\002\000\002\012\004\000\002\012\003" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\047\004\000\002\041\013\000\002\041\014\000\002" +
    "\015\003\000\002\015\002\000\002\043\005\000\002\043" +
    "\003\000\002\013\005\000\002\013\010\000\002\164\003" +
    "\000\002\164\002\000\002\153\006\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\002\000\002" +
    "\055\005\000\002\017\004\000\002\017\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\060\003\000\002\060\003\000\002\074\012\000\002" +
    "\074\013\000\002\075\012\000\002\101\012\000\002\101" +
    "\013\000\002\061\003\000\002\061\003\000\002\073\012" +
    "\000\002\064\003\000\002\064\004\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\065\002\000\002" +
    "\077\006\000\002\066\004\000\002\066\003\000\002\067" +
    "\003\000\002\100\007\000\002\062\005\000\002\062\003" +
    "\000\002\076\012\000\002\063\007\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\105\003\000\002\105\004\000\002\070" +
    "\007\000\002\050\003\000\002\050\004\000\002\050\004" +
    "\000\002\057\005\000\002\057\003\000\002\057\003\000" +
    "\002\057\011\000\002\057\010\000\002\056\003\000\002" +
    "\056\004\000\002\056\006\000\002\056\007\000\002\051" +
    "\003\000\002\051\002\000\002\052\005\000\002\052\003" +
    "\000\002\053\003\000\002\046\003\000\002\020\004\000" +
    "\002\020\006\000\002\020\007\000\002\020\011\000\002" +
    "\102\005\000\002\102\002\000\002\021\003\000\002\021" +
    "\002\000\002\103\004\000\002\103\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\022\003\000" +
    "\002\022\003\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\126\003\000\002\126\003\000\002\126\003" +
    "\000\002\126\003\000\002\126\003\000\002\150\003\000" +
    "\002\150\003\000\002\151\003\000\002\151\004\000\002" +
    "\151\003\000\002\151\003\000\002\152\005\000\002\160" +
    "\003\000\002\160\003\000\002\156\006\000\002\156\007" +
    "\000\002\157\005\000\002\163\003\000\002\163\003\000" +
    "\002\162\003\000\002\162\003\000\002\161\005\000\002" +
    "\030\003\000\002\030\003\000\002\131\005\000\002\130" +
    "\003\000\002\130\007\000\002\135\005\000\002\135\003" +
    "\000\002\136\005\000\002\136\003\000\002\142\005\000" +
    "\002\142\005\000\002\142\003\000\002\143\005\000\002" +
    "\143\005\000\002\143\005\000\002\143\005\000\002\143" +
    "\003\000\002\137\005\000\002\137\005\000\002\137\003" +
    "\000\002\140\005\000\002\140\005\000\002\140\003\000" +
    "\002\141\005\000\002\141\003\000\002\144\004\000\002" +
    "\144\004\000\002\144\004\000\002\144\004\000\002\144" +
    "\003\000\002\155\004\000\002\155\006\000\002\155\006" +
    "\000\002\155\003\000\002\146\003\000\002\146\004\000" +
    "\002\146\004\000\002\127\003\000\002\127\005\000\002" +
    "\127\007\000\002\127\007\000\002\127\003\000\002\127" +
    "\006\000\002\127\007\000\002\147\003\000\002\147\003" +
    "\000\002\147\003\000\002\147\003\000\002\147\003\000" +
    "\002\147\003\000\002\042\005\000\002\042\003\000\002" +
    "\045\004\000\002\045\003\000\002\072\004\000\002\072" +
    "\003\000\002\044\005\000\002\006\003\000\002\023\003" +
    "\000\002\024\003\000\002\025\003\000\002\026\003\000" +
    "\002\027\003\000\002\165\003\000\002\166\003\000\002" +
    "\167\003\000\002\106\003\000\002\107\003\000\002\110" +
    "\003\000\002\110\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\024\002\ufffd\003\022\024\uff97\025\023\026" +
    "\020\030\015\101\024\102\021\103\011\001\002\000\032" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\024\uff95\025" +
    "\uff95\026\uff95\072\uff95\076\uff95\101\uff95\104\uff95\001\002" +
    "\000\032\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\024" +
    "\uff98\025\023\026\020\072\uff98\076\uff98\101\024\104\uff98" +
    "\001\002\000\004\024\045\001\002\000\024\002\ufffd\003" +
    "\022\024\uff97\025\023\026\020\030\015\101\024\102\040" +
    "\103\011\001\002\000\004\102\021\001\002\000\004\102" +
    "\uff31\001\002\000\004\102\uff2e\001\002\000\004\002\042" +
    "\001\002\000\004\102\021\001\002\000\004\041\033\001" +
    "\002\000\020\002\ufffe\003\022\024\uff97\025\023\026\020" +
    "\101\024\103\011\001\002\000\004\002\001\001\002\000" +
    "\032\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\024\uff94" +
    "\025\uff94\026\uff94\072\uff94\076\uff94\101\uff94\104\uff94\001" +
    "\002\000\130\002\uff3c\003\uff3c\004\uff3c\005\uff3c\006\uff3c" +
    "\007\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015" +
    "\uff3c\016\uff3c\017\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c" +
    "\025\uff3c\026\uff3c\030\uff3c\046\uff3c\047\uff3c\050\uff3c\051" +
    "\uff3c\052\uff3c\060\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c" +
    "\072\uff3c\073\uff3c\075\uff3c\076\uff3c\077\uff3c\101\uff3c\102" +
    "\uff3c\103\uff3c\104\uff3c\105\uff3c\106\uff3c\107\uff3c\001\002" +
    "\000\004\102\uff30\001\002\000\032\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\024\uff93\025\uff93\026\uff93\072\uff93" +
    "\076\uff93\101\uff93\104\uff93\001\002\000\032\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\024\uff92\025\uff92\026\uff92" +
    "\072\uff92\076\uff92\101\uff92\104\uff92\001\002\000\022\002" +
    "\ufff6\003\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\101\ufff6" +
    "\103\ufff6\001\002\000\004\102\uff2f\001\002\000\020\002" +
    "\ufffb\003\ufffb\024\ufffb\025\ufffb\026\ufffb\101\ufffb\103\ufffb" +
    "\001\002\000\022\002\ufffa\003\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\030\015\101\ufffa\103\ufffa\001\002\000\022\002\ufff7" +
    "\003\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\101\ufff7\103" +
    "\ufff7\001\002\000\020\002\ufffc\003\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\101\ufffc\103\ufffc\001\002\000\004\073\034\001" +
    "\002\000\054\036\uff36\037\uff36\040\uff36\041\uff36\042\uff36" +
    "\043\uff36\044\uff36\045\uff36\047\uff36\050\uff36\051\uff36\052" +
    "\uff36\053\uff36\054\uff36\055\uff36\057\uff36\061\uff36\062\uff36" +
    "\063\uff36\100\uff36\102\uff36\001\002\000\004\037\036\001" +
    "\002\000\004\102\021\001\002\000\024\002\ufff5\003\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\030\ufff5\101\ufff5\102\040\103" +
    "\ufff5\001\002\000\130\002\uff3d\003\uff3d\004\uff3d\005\uff3d" +
    "\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014" +
    "\uff3d\015\uff3d\016\uff3d\017\uff3d\021\uff3d\022\uff3d\023\uff3d" +
    "\024\uff3d\025\uff3d\026\uff3d\030\uff3d\046\uff3d\047\uff3d\050" +
    "\uff3d\051\uff3d\052\uff3d\060\uff3d\066\uff3d\067\uff3d\070\uff3d" +
    "\071\uff3d\072\uff3d\073\uff3d\075\uff3d\076\uff3d\077\uff3d\101" +
    "\uff3d\102\uff3d\103\uff3d\104\uff3d\105\uff3d\106\uff3d\107\uff3d" +
    "\001\002\000\022\002\ufff9\003\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\101\ufff9\102\040\103\ufff9\001\002\000\004\002\000" +
    "\001\002\000\022\002\ufff8\003\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\101\ufff8\102\040\103\ufff8\001\002\000\004\002\uffff" +
    "\001\002\000\004\072\046\001\002\000\102\027\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a\047" +
    "\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a" +
    "\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064" +
    "\uff3a\072\uff3a\074\uff3a\100\uff3a\102\uff3a\001\002\000\006" +
    "\027\050\074\051\001\002\000\004\072\046\001\002\000" +
    "\004\102\021\001\002\000\040\003\022\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\025\023\026\020\072\uff97\075" +
    "\ufff1\076\uff97\101\024\102\040\103\011\104\uff97\001\002" +
    "\000\004\102\021\001\002\000\004\075\u014d\001\002\000" +
    "\004\102\021\001\002\000\004\102\021\001\002\000\036" +
    "\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\025" +
    "\uffef\026\uffef\072\uffef\075\uffef\076\uffef\101\uffef\103\uffef" +
    "\104\uffef\001\002\000\022\004\074\005\075\006\064\007" +
    "\072\010\067\072\046\076\071\104\066\001\002\000\036" +
    "\003\022\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\025" +
    "\023\026\020\072\uff97\075\ufff2\076\uff97\101\024\103\011" +
    "\104\uff97\001\002\000\036\003\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\025\ufff0\026\ufff0\072\ufff0\075\ufff0" +
    "\076\ufff0\101\ufff0\103\ufff0\104\ufff0\001\002\000\006\060" +
    "\u0144\072\uff90\001\002\000\010\037\uff8d\061\uff8d\072\uff8d" +
    "\001\002\000\006\037\uff91\072\uff91\001\002\000\004\041" +
    "\u013d\001\002\000\010\037\uff8b\061\uff8b\072\uff8b\001\002" +
    "\000\004\102\uffeb\001\002\000\010\037\uff8a\061\uff8a\072" +
    "\uff8a\001\002\000\010\037\uff8c\061\uff8c\072\uff8c\001\002" +
    "\000\004\072\046\001\002\000\010\037\uff8f\061\uff8f\072" +
    "\uff8f\001\002\000\010\037\uff8e\061\uff8e\072\uff8e\001\002" +
    "\000\006\062\u013b\102\uff9e\001\002\000\012\031\100\060" +
    "\101\062\uff40\102\uff40\001\002\000\042\011\161\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\105\200\106\164" +
    "\107\160\001\002\000\026\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\061\uffe7\065\105\072\uffe1\076\uffe1\104\uffe1" +
    "\001\002\000\006\061\uffe8\062\u0138\001\002\000\022\004" +
    "\074\005\075\006\064\007\072\010\067\072\046\076\071" +
    "\104\u0131\001\002\000\004\061\107\001\002\000\022\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\072\uffe2\076\uffe2" +
    "\104\uffe2\001\002\000\006\061\uffe5\062\uffe5\001\002\000" +
    "\004\074\110\001\002\000\004\102\021\001\002\000\110" +
    "\003\022\004\074\005\075\006\064\007\072\010\067\011" +
    "\161\012\172\013\165\014\131\015\207\016\177\017\204" +
    "\021\145\046\130\047\162\050\150\051\142\052\167\060" +
    "\157\066\156\067\133\070\152\071\114\072\046\073\034" +
    "\075\uffdc\076\071\077\147\102\040\103\011\104\066\105" +
    "\200\106\164\107\160\001\002\000\050\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\050" +
    "\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\057\uff5b\061\uff5b" +
    "\062\uff5b\063\uff5b\100\uff5b\102\uff5b\001\002\000\006\020" +
    "\uffbb\102\uffbb\001\002\000\054\036\uff35\037\uff35\040\uff35" +
    "\041\uff35\042\uff35\043\uff35\044\uff35\045\uff35\047\uff35\050" +
    "\uff35\051\uff35\052\uff35\053\uff35\054\uff35\055\uff35\057\uff35" +
    "\061\uff35\062\uff35\063\uff35\100\uff35\102\uff35\001\002\000" +
    "\004\102\uffc9\001\002\000\004\102\021\001\002\000\054" +
    "\036\uff42\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044" +
    "\uff42\045\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42" +
    "\054\uff42\055\uff42\057\uff42\061\uff42\062\uff42\063\uff42\100" +
    "\uff42\102\uff42\001\002\000\072\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\057\uff80\060\uff80\061" +
    "\uff80\062\uff80\063\uff80\064\uff80\100\uff80\102\uff80\001\002" +
    "\000\004\102\uff9f\001\002\000\072\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\055\uff83\057\uff83\060\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\100\uff83\102\uff83\001" +
    "\002\000\046\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60" +
    "\043\uff60\044\uff60\045\uff60\050\uff60\052\uff60\053\340\054" +
    "\341\057\uff60\061\uff60\062\uff60\063\uff60\100\uff60\102\uff60" +
    "\001\002\000\022\044\u010b\045\uff6d\057\uff6d\061\uff6d\062" +
    "\uff6d\063\uff6d\100\uff6d\102\uff6d\001\002\000\054\036\uff47" +
    "\037\uff47\040\uff47\041\uff47\042\uff47\043\uff47\044\uff47\045" +
    "\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47" +
    "\055\uff47\057\uff47\061\uff47\062\uff47\063\uff47\100\uff47\102" +
    "\uff47\001\002\000\112\003\022\004\074\005\075\006\064" +
    "\007\072\010\067\011\161\012\172\013\165\014\131\015" +
    "\207\016\177\017\204\021\145\022\uffde\023\uffde\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\075\uffde\076\071" +
    "\077\147\103\011\104\066\105\200\106\164\107\160\001" +
    "\002\000\004\102\021\001\002\000\042\011\161\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\105\200\106\164" +
    "\107\160\001\002\000\004\060\u0113\001\002\000\112\003" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\060\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072" +
    "\uffd9\073\uffd9\075\uffd9\076\uffd9\077\uffd9\103\uffd9\104\uffd9" +
    "\105\uffd9\106\uffd9\107\uffd9\001\002\000\054\036\uff38\037" +
    "\uff38\040\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045\uff38" +
    "\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055" +
    "\uff38\057\uff38\061\uff38\062\uff38\063\uff38\100\uff38\102\uff38" +
    "\001\002\000\050\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042" +
    "\uff5d\043\uff5d\044\uff5d\045\uff5d\050\uff5d\052\uff5d\053\uff5d" +
    "\054\uff5d\055\343\057\uff5d\061\uff5d\062\uff5d\063\uff5d\100" +
    "\uff5d\102\uff5d\001\002\000\004\075\u0112\001\002\000\042" +
    "\036\uff63\037\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044" +
    "\uff63\045\uff63\050\335\052\336\057\uff63\061\uff63\062\uff63" +
    "\063\uff63\100\uff63\102\uff63\001\002\000\004\102\021\001" +
    "\002\000\054\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44" +
    "\043\uff44\044\uff44\045\uff44\047\uff44\050\uff44\051\uff44\052" +
    "\uff44\053\uff44\054\uff44\055\uff44\057\uff44\061\uff44\062\uff44" +
    "\063\uff44\100\uff44\102\uff44\001\002\000\072\031\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\057\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\100\uff7f\102" +
    "\uff7f\001\002\000\042\011\161\046\130\047\162\050\150" +
    "\051\142\052\167\060\157\066\156\067\133\070\152\071" +
    "\114\072\046\073\034\105\200\106\164\107\160\001\002" +
    "\000\020\045\u0109\057\uff70\061\uff70\062\uff70\063\uff70\100" +
    "\u0108\102\uff70\001\002\000\004\102\uffd0\001\002\000\004" +
    "\060\362\001\002\000\066\031\uff82\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\045\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\054\uff82\055\uff82\056\230\060\uff82\064\uff82" +
    "\072\uff90\100\uff82\102\uff82\001\002\000\042\011\161\046" +
    "\130\047\162\050\150\051\142\052\167\060\157\066\156" +
    "\067\133\070\152\071\114\072\046\073\034\105\200\106" +
    "\164\107\160\001\002\000\042\011\161\046\130\047\162" +
    "\050\150\051\142\052\167\060\157\066\156\067\133\070" +
    "\152\071\114\072\046\073\034\105\200\106\164\107\160" +
    "\001\002\000\054\036\uff43\037\uff43\040\uff43\041\uff43\042" +
    "\uff43\043\uff43\044\uff43\045\uff43\047\uff43\050\uff43\051\uff43" +
    "\052\uff43\053\uff43\054\uff43\055\uff43\057\uff43\061\uff43\062" +
    "\uff43\063\uff43\100\uff43\102\uff43\001\002\000\054\036\uff37" +
    "\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37\045" +
    "\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054\uff37" +
    "\055\uff37\057\uff37\061\uff37\062\uff37\063\uff37\100\uff37\102" +
    "\uff37\001\002\000\004\072\046\001\002\000\026\036\352" +
    "\043\353\044\uff6b\045\uff6b\057\uff6b\061\uff6b\062\uff6b\063" +
    "\uff6b\100\uff6b\102\uff6b\001\002\000\036\036\uff68\037\333" +
    "\040\331\041\330\042\332\043\uff68\044\uff68\045\uff68\057" +
    "\uff68\061\uff68\062\uff68\063\uff68\100\uff68\102\uff68\001\002" +
    "\000\054\036\uff39\037\uff39\040\uff39\041\uff39\042\uff39\043" +
    "\uff39\044\uff39\045\uff39\047\uff39\050\uff39\051\uff39\052\uff39" +
    "\053\uff39\054\uff39\055\uff39\057\uff39\061\uff39\062\uff39\063" +
    "\uff39\100\uff39\102\uff39\001\002\000\056\004\074\005\075" +
    "\006\064\007\072\010\067\011\161\046\130\047\162\050" +
    "\150\051\142\052\167\060\157\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\076\071\105\200\106\164\107" +
    "\160\001\002\000\054\036\uff34\037\uff34\040\uff34\041\uff34" +
    "\042\uff34\043\uff34\044\uff34\045\uff34\047\uff34\050\uff34\051" +
    "\uff34\052\uff34\053\uff34\054\uff34\055\uff34\057\uff34\061\uff34" +
    "\062\uff34\063\uff34\100\uff34\102\uff34\001\002\000\006\072" +
    "\046\104\312\001\002\000\042\011\161\046\130\047\162" +
    "\050\150\051\142\052\167\060\157\066\156\067\133\070" +
    "\152\071\114\072\046\073\034\105\200\106\164\107\160" +
    "\001\002\000\050\036\uff56\037\uff56\040\uff56\041\uff56\042" +
    "\uff56\043\uff56\044\uff56\045\uff56\050\uff56\052\uff56\053\uff56" +
    "\054\uff56\055\uff56\057\uff56\061\uff56\062\uff56\063\uff56\100" +
    "\uff56\102\uff56\001\002\000\072\031\uff32\032\uff32\033\uff32" +
    "\034\uff32\035\uff32\036\uff32\037\uff32\040\uff32\041\uff32\042" +
    "\uff32\043\uff32\044\uff32\045\uff32\047\uff32\050\uff32\051\uff32" +
    "\052\uff32\053\uff32\054\uff32\055\uff32\057\uff32\060\uff32\061" +
    "\uff32\062\uff32\063\uff32\064\uff32\100\uff32\102\uff32\001\002" +
    "\000\004\074\301\001\002\000\004\102\uffd1\001\002\000" +
    "\042\011\161\046\130\047\162\050\150\051\142\052\167" +
    "\060\157\066\156\067\133\070\152\071\114\072\046\073" +
    "\034\105\200\106\164\107\160\001\002\000\004\102\021" +
    "\001\002\000\054\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042" +
    "\uff4e\043\uff4e\044\uff4e\045\uff4e\047\uff4e\050\uff4e\051\uff4e" +
    "\052\uff4e\053\uff4e\054\uff4e\055\uff4e\057\uff4e\061\uff4e\062" +
    "\uff4e\063\uff4e\100\uff4e\102\uff4e\001\002\000\004\060\267" +
    "\001\002\000\054\036\uff46\037\uff46\040\uff46\041\uff46\042" +
    "\uff46\043\uff46\044\uff46\045\uff46\047\uff46\050\uff46\051\uff46" +
    "\052\uff46\053\uff46\054\uff46\055\uff46\057\uff46\061\uff46\062" +
    "\uff46\063\uff46\100\uff46\102\uff46\001\002\000\010\022\uffdd" +
    "\023\uffdd\075\uffdd\001\002\000\006\020\260\102\uffc7\001" +
    "\002\000\072\031\242\032\240\033\245\034\244\035\241" +
    "\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044" +
    "\uff4a\045\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a" +
    "\054\uff4a\055\uff4a\057\uff4a\060\243\061\uff4a\062\uff4a\063" +
    "\uff4a\064\236\100\uff4a\102\uff4a\001\002\000\004\102\021" +
    "\001\002\000\072\031\uff33\032\uff33\033\uff33\034\uff33\035" +
    "\uff33\036\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043\uff33" +
    "\044\uff33\045\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053" +
    "\uff33\054\uff33\055\uff33\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\100\uff33\102\uff33\001\002\000\072\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\047" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\100" +
    "\uff84\102\uff84\001\002\000\014\057\uff72\061\uff72\062\uff72" +
    "\063\uff72\102\uff72\001\002\000\054\036\uff51\037\uff51\040" +
    "\uff51\041\uff51\042\uff51\043\uff51\044\uff51\045\uff51\047\uff51" +
    "\050\uff51\051\uff51\052\uff51\053\uff51\054\uff51\055\uff51\057" +
    "\uff51\061\uff51\062\uff51\063\uff51\100\uff51\102\uff51\001\002" +
    "\000\004\060\217\001\002\000\014\057\uff73\061\uff73\062" +
    "\uff73\063\uff73\102\uff73\001\002\000\004\102\021\001\002" +
    "\000\004\102\021\001\002\000\004\102\uffca\001\002\000" +
    "\054\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52\043\uff52" +
    "\044\uff52\045\uff52\047\214\050\uff52\051\213\052\uff52\053" +
    "\uff52\054\uff52\055\uff52\057\uff52\061\uff52\062\uff52\063\uff52" +
    "\100\uff52\102\uff52\001\002\000\054\036\uff45\037\uff45\040" +
    "\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045\uff45\047\uff45" +
    "\050\uff45\051\uff45\052\uff45\053\uff45\054\uff45\055\uff45\057" +
    "\uff45\061\uff45\062\uff45\063\uff45\100\uff45\102\uff45\001\002" +
    "\000\054\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f\043" +
    "\uff4f\044\uff4f\045\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f" +
    "\053\uff4f\054\uff4f\055\uff4f\057\uff4f\061\uff4f\062\uff4f\063" +
    "\uff4f\100\uff4f\102\uff4f\001\002\000\054\036\uff50\037\uff50" +
    "\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50\047" +
    "\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50" +
    "\057\uff50\061\uff50\062\uff50\063\uff50\100\uff50\102\uff50\001" +
    "\002\000\114\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\060\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\073\uffd3\075\uffd3\076\uffd3\077\uffd3" +
    "\102\040\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\001" +
    "\002\000\114\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\060\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\102\040\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\001" +
    "\002\000\042\011\161\046\130\047\162\050\150\051\142" +
    "\052\167\060\157\066\156\067\133\070\152\071\114\072" +
    "\046\073\034\105\200\106\164\107\160\001\002\000\074" +
    "\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82" +
    "\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\230\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\100\uff82\102\uff82\001\002\000\004\061\222\001" +
    "\002\000\004\074\223\001\002\000\004\102\021\001\002" +
    "\000\110\003\022\004\074\005\075\006\064\007\072\010" +
    "\067\011\161\012\172\013\165\014\131\015\207\016\177" +
    "\017\204\021\145\046\130\047\162\050\150\051\142\052" +
    "\167\060\157\066\156\067\133\070\152\071\114\072\046" +
    "\073\034\075\uffdc\076\071\077\147\102\040\103\011\104" +
    "\066\105\200\106\164\107\160\001\002\000\004\075\226" +
    "\001\002\000\006\020\uffba\102\uffba\001\002\000\074\031" +
    "\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e" +
    "\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\047" +
    "\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e" +
    "\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064" +
    "\uff3e\100\uff3e\102\uff3e\001\002\000\042\011\161\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\105\200\106\164" +
    "\107\160\001\002\000\074\031\uff81\032\uff81\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\043\uff81\044\uff81\045\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\230\057\uff81\060\uff81" +
    "\061\uff81\062\uff81\063\uff81\064\uff81\100\uff81\102\uff81\001" +
    "\002\000\074\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f" +
    "\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044" +
    "\uff3f\045\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f" +
    "\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062" +
    "\uff3f\063\uff3f\064\uff3f\100\uff3f\102\uff3f\001\002\000\004" +
    "\057\234\001\002\000\074\031\uff3b\032\uff3b\033\uff3b\034" +
    "\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b" +
    "\043\uff3b\044\uff3b\045\uff3b\047\uff3b\050\uff3b\051\uff3b\052" +
    "\uff3b\053\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b" +
    "\061\uff3b\062\uff3b\063\uff3b\064\uff3b\100\uff3b\102\uff3b\001" +
    "\002\000\114\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\060\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\073\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\102\040\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\001" +
    "\002\000\010\072\046\105\200\106\164\001\002\000\042" +
    "\011\161\046\130\047\162\050\150\051\142\052\167\060" +
    "\157\066\156\067\133\070\152\071\114\072\046\073\034" +
    "\105\200\106\164\107\160\001\002\000\042\011\uff88\046" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\060\uff88\066\uff88" +
    "\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\105\uff88\106" +
    "\uff88\107\uff88\001\002\000\042\011\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\060\uff85\066\uff85\067\uff85\070" +
    "\uff85\071\uff85\072\uff85\073\uff85\105\uff85\106\uff85\107\uff85" +
    "\001\002\000\042\011\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\060\uff89\066\uff89\067\uff89\070\uff89\071\uff89" +
    "\072\uff89\073\uff89\105\uff89\106\uff89\107\uff89\001\002\000" +
    "\044\011\161\046\130\047\162\050\150\051\142\052\167" +
    "\060\157\061\uffa3\066\156\067\133\070\152\071\114\072" +
    "\046\073\034\105\200\106\164\107\160\001\002\000\042" +
    "\011\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\060" +
    "\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86" +
    "\105\uff86\106\uff86\107\uff86\001\002\000\042\011\uff87\046" +
    "\uff87\047\uff87\050\uff87\051\uff87\052\uff87\060\uff87\066\uff87" +
    "\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\105\uff87\106" +
    "\uff87\107\uff87\001\002\000\006\061\uffa4\062\254\001\002" +
    "\000\006\061\uffa1\062\uffa1\001\002\000\004\061\252\001" +
    "\002\000\006\061\uffa0\062\uffa0\001\002\000\056\036\uff49" +
    "\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044\uff49\045" +
    "\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054\uff49" +
    "\055\uff49\056\230\057\uff49\061\uff49\062\uff49\063\uff49\100" +
    "\uff49\102\uff49\001\002\000\056\036\uff48\037\uff48\040\uff48" +
    "\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48\047\uff48\050" +
    "\uff48\051\uff48\052\uff48\053\uff48\054\uff48\055\uff48\056\230" +
    "\057\uff48\061\uff48\062\uff48\063\uff48\100\uff48\102\uff48\001" +
    "\002\000\042\011\161\046\130\047\162\050\150\051\142" +
    "\052\167\060\157\066\156\067\133\070\152\071\114\072" +
    "\046\073\034\105\200\106\164\107\160\001\002\000\006" +
    "\061\uffa2\062\uffa2\001\002\000\014\057\uff71\061\uff71\062" +
    "\uff71\063\uff71\102\uff71\001\002\000\072\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\100\uff7e\102\uff7e" +
    "\001\002\000\006\017\204\074\263\001\002\000\004\102" +
    "\uffc6\001\002\000\006\020\uffbc\102\uffbc\001\002\000\004" +
    "\102\021\001\002\000\110\003\022\004\074\005\075\006" +
    "\064\007\072\010\067\011\161\012\172\013\165\014\131" +
    "\015\207\016\177\017\204\021\145\046\130\047\162\050" +
    "\150\051\142\052\167\060\157\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\075\uffdc\076\071\077\147\102" +
    "\040\103\011\104\066\105\200\106\164\107\160\001\002" +
    "\000\004\075\266\001\002\000\004\102\uffb9\001\002\000" +
    "\042\011\161\046\130\047\162\050\150\051\142\052\167" +
    "\060\157\066\156\067\133\070\152\071\114\072\046\073" +
    "\034\105\200\106\164\107\160\001\002\000\004\061\271" +
    "\001\002\000\004\074\272\001\002\000\004\102\021\001" +
    "\002\000\110\003\022\004\074\005\075\006\064\007\072" +
    "\010\067\011\161\012\172\013\165\014\131\015\207\016" +
    "\177\017\204\021\145\046\130\047\162\050\150\051\142" +
    "\052\167\060\157\066\156\067\133\070\152\071\114\072" +
    "\046\073\034\075\uffdc\076\071\077\147\102\040\103\011" +
    "\104\066\105\200\106\164\107\160\001\002\000\004\075" +
    "\275\001\002\000\004\102\uffcf\001\002\000\114\003\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\060\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2" +
    "\073\uffd2\075\uffd2\076\uffd2\077\uffd2\102\040\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\107\uffd2\001\002\000\050\036\uff57" +
    "\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57\045" +
    "\uff57\050\uff57\052\uff57\053\uff57\054\uff57\055\uff57\057\uff57" +
    "\061\uff57\062\uff57\063\uff57\100\uff57\102\uff57\001\002\000" +
    "\060\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\044\uff4a\045\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053" +
    "\uff4a\054\uff4a\055\uff4a\057\uff4a\060\243\061\uff4a\062\uff4a" +
    "\063\uff4a\064\236\100\uff4a\102\uff4a\001\002\000\004\102" +
    "\021\001\002\000\110\003\022\004\074\005\075\006\064" +
    "\007\072\010\067\011\161\012\172\013\165\014\131\015" +
    "\207\016\177\017\204\021\145\046\130\047\162\050\150" +
    "\051\142\052\167\060\157\066\156\067\133\070\152\071" +
    "\114\072\046\073\034\075\uffdc\076\071\077\147\102\040" +
    "\103\011\104\066\105\200\106\164\107\160\001\002\000" +
    "\004\075\304\001\002\000\004\012\305\001\002\000\004" +
    "\060\306\001\002\000\042\011\161\046\130\047\162\050" +
    "\150\051\142\052\167\060\157\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\105\200\106\164\107\160\001" +
    "\002\000\004\061\310\001\002\000\004\102\uffce\001\002" +
    "\000\050\036\uff5a\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043" +
    "\uff5a\044\uff5a\045\uff5a\050\uff5a\052\uff5a\053\uff5a\054\uff5a" +
    "\055\uff5a\057\uff5a\061\uff5a\062\uff5a\063\uff5a\100\uff5a\102" +
    "\uff5a\001\002\000\004\060\317\001\002\000\004\060\314" +
    "\001\002\000\044\011\161\046\130\047\162\050\150\051" +
    "\142\052\167\060\157\061\uffa3\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\105\200\106\164\107\160\001" +
    "\002\000\004\061\316\001\002\000\054\036\uff4c\037\uff4c" +
    "\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\047" +
    "\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\055\uff4c" +
    "\057\uff4c\061\uff4c\062\uff4c\063\uff4c\100\uff4c\102\uff4c\001" +
    "\002\000\044\011\161\046\130\047\162\050\150\051\142" +
    "\052\167\060\157\061\uffa3\066\156\067\133\070\152\071" +
    "\114\072\046\073\034\105\200\106\164\107\160\001\002" +
    "\000\004\061\321\001\002\000\054\036\uff4b\037\uff4b\040" +
    "\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\047\uff4b" +
    "\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b\057" +
    "\uff4b\061\uff4b\062\uff4b\063\uff4b\100\uff4b\102\uff4b\001\002" +
    "\000\004\061\326\001\002\000\004\061\324\001\002\000" +
    "\042\011\161\046\130\047\162\050\150\051\142\052\167" +
    "\060\157\066\156\067\133\070\152\071\114\072\046\073" +
    "\034\105\200\106\164\107\160\001\002\000\050\036\uff54" +
    "\037\uff54\040\uff54\041\uff54\042\uff54\043\uff54\044\uff54\045" +
    "\uff54\050\uff54\052\uff54\053\uff54\054\uff54\055\uff54\057\uff54" +
    "\061\uff54\062\uff54\063\uff54\100\uff54\102\uff54\001\002\000" +
    "\104\011\161\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\044\uff4d\045\uff4d\046\130\047\uff4d\050\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d\057\uff4d\060\157" +
    "\061\uff4d\062\uff4d\063\uff4d\066\156\067\133\070\152\071" +
    "\114\072\046\073\034\100\uff4d\102\uff4d\105\200\106\164" +
    "\107\160\001\002\000\050\036\uff53\037\uff53\040\uff53\041" +
    "\uff53\042\uff53\043\uff53\044\uff53\045\uff53\050\uff53\052\uff53" +
    "\053\uff53\054\uff53\055\uff53\057\uff53\061\uff53\062\uff53\063" +
    "\uff53\100\uff53\102\uff53\001\002\000\042\011\161\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\105\200\106\164" +
    "\107\160\001\002\000\042\011\161\046\130\047\162\050" +
    "\150\051\142\052\167\060\157\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\105\200\106\164\107\160\001" +
    "\002\000\042\011\161\046\130\047\162\050\150\051\142" +
    "\052\167\060\157\066\156\067\133\070\152\071\114\072" +
    "\046\073\034\105\200\106\164\107\160\001\002\000\042" +
    "\011\161\046\130\047\162\050\150\051\142\052\167\060" +
    "\157\066\156\067\133\070\152\071\114\072\046\073\034" +
    "\105\200\106\164\107\160\001\002\000\042\036\uff65\037" +
    "\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\045\uff65" +
    "\050\335\052\336\057\uff65\061\uff65\062\uff65\063\uff65\100" +
    "\uff65\102\uff65\001\002\000\042\011\161\046\130\047\162" +
    "\050\150\051\142\052\167\060\157\066\156\067\133\070" +
    "\152\071\114\072\046\073\034\105\200\106\164\107\160" +
    "\001\002\000\042\011\161\046\130\047\162\050\150\051" +
    "\142\052\167\060\157\066\156\067\133\070\152\071\114" +
    "\072\046\073\034\105\200\106\164\107\160\001\002\000" +
    "\046\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61" +
    "\044\uff61\045\uff61\050\uff61\052\uff61\053\340\054\341\057" +
    "\uff61\061\uff61\062\uff61\063\uff61\100\uff61\102\uff61\001\002" +
    "\000\042\011\161\046\130\047\162\050\150\051\142\052" +
    "\167\060\157\066\156\067\133\070\152\071\114\072\046" +
    "\073\034\105\200\106\164\107\160\001\002\000\042\011" +
    "\161\046\130\047\162\050\150\051\142\052\167\060\157" +
    "\066\156\067\133\070\152\071\114\072\046\073\034\105" +
    "\200\106\164\107\160\001\002\000\050\036\uff5e\037\uff5e" +
    "\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\050" +
    "\uff5e\052\uff5e\053\uff5e\054\uff5e\055\343\057\uff5e\061\uff5e" +
    "\062\uff5e\063\uff5e\100\uff5e\102\uff5e\001\002\000\042\011" +
    "\161\046\130\047\162\050\150\051\142\052\167\060\157" +
    "\066\156\067\133\070\152\071\114\072\046\073\034\105" +
    "\200\106\164\107\160\001\002\000\050\036\uff5c\037\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\050" +
    "\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\057\uff5c\061\uff5c" +
    "\062\uff5c\063\uff5c\100\uff5c\102\uff5c\001\002\000\050\036" +
    "\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f" +
    "\045\uff5f\050\uff5f\052\uff5f\053\uff5f\054\uff5f\055\343\057" +
    "\uff5f\061\uff5f\062\uff5f\063\uff5f\100\uff5f\102\uff5f\001\002" +
    "\000\046\036\uff62\037\uff62\040\uff62\041\uff62\042\uff62\043" +
    "\uff62\044\uff62\045\uff62\050\uff62\052\uff62\053\340\054\341" +
    "\057\uff62\061\uff62\062\uff62\063\uff62\100\uff62\102\uff62\001" +
    "\002\000\042\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66" +
    "\043\uff66\044\uff66\045\uff66\050\335\052\336\057\uff66\061" +
    "\uff66\062\uff66\063\uff66\100\uff66\102\uff66\001\002\000\042" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\050\335\052\336\057\uff64\061\uff64\062\uff64" +
    "\063\uff64\100\uff64\102\uff64\001\002\000\042\036\uff67\037" +
    "\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67" +
    "\050\335\052\336\057\uff67\061\uff67\062\uff67\063\uff67\100" +
    "\uff67\102\uff67\001\002\000\042\011\161\046\130\047\162" +
    "\050\150\051\142\052\167\060\157\066\156\067\133\070" +
    "\152\071\114\072\046\073\034\105\200\106\164\107\160" +
    "\001\002\000\042\011\161\046\130\047\162\050\150\051" +
    "\142\052\167\060\157\066\156\067\133\070\152\071\114" +
    "\072\046\073\034\105\200\106\164\107\160\001\002\000" +
    "\036\036\uff69\037\333\040\331\041\330\042\332\043\uff69" +
    "\044\uff69\045\uff69\057\uff69\061\uff69\062\uff69\063\uff69\100" +
    "\uff69\102\uff69\001\002\000\036\036\uff6a\037\333\040\331" +
    "\041\330\042\332\043\uff6a\044\uff6a\045\uff6a\057\uff6a\061" +
    "\uff6a\062\uff6a\063\uff6a\100\uff6a\102\uff6a\001\002\000\010" +
    "\031\100\062\uff40\102\uff40\001\002\000\050\036\uff58\037" +
    "\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045\uff58" +
    "\050\uff58\052\uff58\053\uff58\054\uff58\055\uff58\057\uff58\061" +
    "\uff58\062\uff58\063\uff58\100\uff58\102\uff58\001\002\000\004" +
    "\102\021\001\002\000\012\022\uffdb\023\uffdb\075\uffdb\102" +
    "\040\001\002\000\042\011\161\046\130\047\162\050\150" +
    "\051\142\052\167\060\157\066\156\067\133\070\152\071" +
    "\114\072\046\073\034\105\200\106\164\107\160\001\002" +
    "\000\004\061\364\001\002\000\004\074\365\001\002\000" +
    "\004\102\021\001\002\000\012\022\367\023\375\075\uffc2" +
    "\102\040\001\002\000\042\011\161\046\130\047\162\050" +
    "\150\051\142\052\167\060\157\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\105\200\106\164\107\160\001" +
    "\002\000\004\075\uffc3\001\002\000\010\022\uffbe\023\uffbe" +
    "\075\uffbe\001\002\000\004\075\u0103\001\002\000\010\022" +
    "\367\023\375\075\uffc4\001\002\000\010\022\uffbf\023\uffbf" +
    "\075\uffbf\001\002\000\004\063\376\001\002\000\004\102" +
    "\021\001\002\000\110\003\022\004\074\005\075\006\064" +
    "\007\072\010\067\011\161\012\172\013\165\014\131\015" +
    "\207\016\177\017\204\021\145\046\130\047\162\050\150" +
    "\051\142\052\167\060\157\066\156\067\133\070\152\071" +
    "\114\072\046\073\034\075\uffdc\076\071\077\147\102\040" +
    "\103\011\104\066\105\200\106\164\107\160\001\002\000" +
    "\004\075\uffc1\001\002\000\004\075\uffc5\001\002\000\010" +
    "\022\uffc0\023\uffc0\075\uffc0\001\002\000\004\102\uffc8\001" +
    "\002\000\004\063\u0105\001\002\000\004\102\021\001\002" +
    "\000\114\003\022\004\074\005\075\006\064\007\072\010" +
    "\067\011\161\012\172\013\165\014\131\015\207\016\177" +
    "\017\204\021\145\022\uffdc\023\uffdc\046\130\047\162\050" +
    "\150\051\142\052\167\060\157\066\156\067\133\070\152" +
    "\071\114\072\046\073\034\075\uffdc\076\071\077\147\102" +
    "\040\103\011\104\066\105\200\106\164\107\160\001\002" +
    "\000\010\022\uffbd\023\uffbd\075\uffbd\001\002\000\042\011" +
    "\161\046\130\047\162\050\150\051\142\052\167\060\157" +
    "\066\156\067\133\070\152\071\114\072\046\073\034\105" +
    "\200\106\164\107\160\001\002\000\042\011\161\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\105\200\106\164" +
    "\107\160\001\002\000\022\044\u010b\045\uff6e\057\uff6e\061" +
    "\uff6e\062\uff6e\063\uff6e\100\uff6e\102\uff6e\001\002\000\042" +
    "\011\161\046\130\047\162\050\150\051\142\052\167\060" +
    "\157\066\156\067\133\070\152\071\114\072\046\073\034" +
    "\105\200\106\164\107\160\001\002\000\026\036\352\043" +
    "\353\044\uff6c\045\uff6c\057\uff6c\061\uff6c\062\uff6c\063\uff6c" +
    "\100\uff6c\102\uff6c\001\002\000\004\063\u010e\001\002\000" +
    "\042\011\161\046\130\047\162\050\150\051\142\052\167" +
    "\060\157\066\156\067\133\070\152\071\114\072\046\073" +
    "\034\105\200\106\164\107\160\001\002\000\014\057\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\102\uff6f\001\002\000\050\036" +
    "\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59" +
    "\045\uff59\050\uff59\052\uff59\053\uff59\054\uff59\055\uff59\057" +
    "\uff59\061\uff59\062\uff59\063\uff59\100\uff59\102\uff59\001\002" +
    "\000\114\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\022\uffd7\023\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\060\uffd7\066\uffd7\067\uffd7\070\uffd7" +
    "\071\uffd7\072\uffd7\073\uffd7\075\uffd7\076\uffd7\077\uffd7\102" +
    "\040\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\001\002" +
    "\000\004\102\uffe9\001\002\000\006\004\u0115\072\046\001" +
    "\002\000\004\061\u0126\001\002\000\004\072\046\001\002" +
    "\000\004\031\u0117\001\002\000\042\011\161\046\130\047" +
    "\162\050\150\051\142\052\167\060\157\066\156\067\133" +
    "\070\152\071\114\072\046\073\034\105\200\106\164\107" +
    "\160\001\002\000\004\062\u0119\001\002\000\042\011\161" +
    "\046\130\047\162\050\150\051\142\052\167\060\157\066" +
    "\156\067\133\070\152\071\114\072\046\073\034\105\200" +
    "\106\164\107\160\001\002\000\004\062\u011b\001\002\000" +
    "\004\072\046\001\002\000\004\047\u011d\001\002\000\004" +
    "\061\uffcc\001\002\000\004\031\u011f\001\002\000\042\011" +
    "\161\046\130\047\162\050\150\051\142\052\167\060\157" +
    "\066\156\067\133\070\152\071\114\072\046\073\034\105" +
    "\200\106\164\107\160\001\002\000\004\062\u0121\001\002" +
    "\000\042\011\161\046\130\047\162\050\150\051\142\052" +
    "\167\060\157\066\156\067\133\070\152\071\114\072\046" +
    "\073\034\105\200\106\164\107\160\001\002\000\004\062" +
    "\u0123\001\002\000\004\072\046\001\002\000\004\047\u0125" +
    "\001\002\000\004\061\uffcb\001\002\000\004\074\u0127\001" +
    "\002\000\004\102\021\001\002\000\110\003\022\004\074" +
    "\005\075\006\064\007\072\010\067\011\161\012\172\013" +
    "\165\014\131\015\207\016\177\017\204\021\145\046\130" +
    "\047\162\050\150\051\142\052\167\060\157\066\156\067" +
    "\133\070\152\071\114\072\046\073\034\075\uffdc\076\071" +
    "\077\147\102\040\103\011\104\066\105\200\106\164\107" +
    "\160\001\002\000\004\075\u012a\001\002\000\004\102\uffcd" +
    "\001\002\000\050\036\uff55\037\uff55\040\uff55\041\uff55\042" +
    "\uff55\043\uff55\044\uff55\045\uff55\050\uff55\052\uff55\053\uff55" +
    "\054\uff55\055\uff55\057\uff55\061\uff55\062\uff55\063\uff55\100" +
    "\uff55\102\uff55\001\002\000\114\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\060\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\102\040\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\107\uffd6\001\002\000\112\003\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\060\uffda\066" +
    "\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\075\uffda" +
    "\076\uffda\077\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107" +
    "\uffda\001\002\000\010\022\uffdf\023\uffdf\075\uffdf\001\002" +
    "\000\114\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\060\uffd8\066\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\075\uffd8\076\uffd8\077\uffd8\102" +
    "\040\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\001\002" +
    "\000\006\037\uff90\072\uff90\001\002\000\004\041\u0134\001" +
    "\002\000\004\072\046\001\002\000\006\061\uffe4\062\uffe4" +
    "\001\002\000\020\004\074\005\075\006\064\007\072\010" +
    "\067\072\046\076\071\001\002\000\004\037\u0136\001\002" +
    "\000\004\072\046\001\002\000\006\061\uffe3\062\uffe3\001" +
    "\002\000\024\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\065\105\072\uffe1\076\uffe1\104\uffe1\001\002\000\006\061" +
    "\uffe6\062\uffe6\001\002\000\004\102\uff9d\001\002\000\004" +
    "\072\046\001\002\000\006\062\uff41\102\uff41\001\002\000" +
    "\020\004\074\005\075\006\064\007\072\010\067\072\046" +
    "\076\071\001\002\000\004\037\u013f\001\002\000\004\072" +
    "\046\001\002\000\006\062\u013b\102\uff9c\001\002\000\010" +
    "\031\u0142\062\uff40\102\uff40\001\002\000\042\011\161\046" +
    "\130\047\162\050\150\051\142\052\167\060\157\066\156" +
    "\067\133\070\152\071\114\072\046\073\034\105\200\106" +
    "\164\107\160\001\002\000\004\102\uff9b\001\002\000\026" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\061\uffe7\065" +
    "\105\072\uffe1\076\uffe1\104\uffe1\001\002\000\004\061\u0146" +
    "\001\002\000\004\074\u0147\001\002\000\004\102\021\001" +
    "\002\000\110\003\022\004\074\005\075\006\064\007\072" +
    "\010\067\011\161\012\172\013\165\014\131\015\207\016" +
    "\177\017\204\021\145\046\130\047\162\050\150\051\142" +
    "\052\167\060\157\066\156\067\133\070\152\071\114\072" +
    "\046\073\034\075\uffdc\076\071\077\147\102\040\103\011" +
    "\104\066\105\200\106\164\107\160\001\002\000\004\075" +
    "\u014a\001\002\000\004\102\uffea\001\002\000\040\003\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\025\uffee\026" +
    "\uffee\072\uffee\075\uffee\076\uffee\101\uffee\102\040\103\uffee" +
    "\104\uffee\001\002\000\040\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\025\uffec\026\uffec\072\uffec\075\uffec" +
    "\076\uffec\101\uffec\102\040\103\uffec\104\uffec\001\002\000" +
    "\004\102\ufff4\001\002\000\040\003\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\025\uffed\026\uffed\072\uffed\075" +
    "\uffed\076\uffed\101\uffed\102\040\103\uffed\104\uffed\001\002" +
    "\000\004\074\u0150\001\002\000\004\102\021\001\002\000" +
    "\040\003\022\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\025\023\026\020\072\uff97\075\ufff1\076\uff97\101\024\102" +
    "\040\103\011\104\uff97\001\002\000\004\075\u0153\001\002" +
    "\000\004\102\ufff3\001\002\000\032\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\024\uff96\025\uff96\026\uff96\072\uff96" +
    "\076\uff96\101\uff96\104\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\036\002\012\003\026\004\015\007\013\021" +
    "\005\071\003\072\006\103\004\104\016\106\011\107\025" +
    "\110\007\111\027\112\024\001\001\000\002\001\001\000" +
    "\004\071\u0153\001\001\000\002\001\001\000\032\003\026" +
    "\004\015\007\013\021\005\071\003\103\004\104\043\106" +
    "\011\107\025\110\007\111\027\112\024\001\001\000\004" +
    "\072\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\040\001\001\000\002\001\001" +
    "\000\022\003\031\007\013\021\005\071\003\103\004\106" +
    "\011\107\025\110\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u014e\001\001\000\004\072\051\001\001\000\030\010" +
    "\056\011\053\012\060\021\057\041\052\047\055\071\003" +
    "\103\004\106\011\107\025\110\054\001\001\000\004\072" +
    "\u014d\001\001\000\002\001\001\000\004\072\u014b\001\001" +
    "\000\004\072\u014a\001\001\000\002\001\001\000\012\006" +
    "\062\020\067\022\072\113\064\001\001\000\024\010\061" +
    "\021\057\041\052\047\055\071\003\103\004\106\011\107" +
    "\025\110\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\076\042\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\006\217\023\124\024\172\025\211\026\137\027" +
    "\150\030\u0139\127\202\130\201\131\204\135\142\136\123" +
    "\137\135\140\122\141\133\142\153\143\154\144\111\146" +
    "\210\147\170\150\175\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\012\013\105\015\103\043" +
    "\101\164\102\001\001\000\002\001\001\000\010\006\u012f" +
    "\022\u0131\113\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\110" +
    "\001\001\000\136\006\145\014\131\016\134\017\125\020" +
    "\120\022\152\023\124\024\172\025\211\026\137\027\150" +
    "\030\115\046\136\055\173\060\126\061\205\062\174\064" +
    "\207\073\114\074\165\075\143\076\112\106\011\107\025" +
    "\110\167\113\064\127\202\130\201\131\204\135\142\136" +
    "\123\137\135\140\122\141\133\142\153\143\154\144\111" +
    "\146\210\147\170\150\175\151\200\152\121\155\162\165" +
    "\116\166\117\167\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\132\006\145\014\u012c\020\120" +
    "\022\152\023\124\024\172\025\211\026\137\027\150\030" +
    "\115\046\136\055\u012d\060\126\061\205\062\174\064\207" +
    "\073\114\074\165\075\143\076\112\106\011\107\025\110" +
    "\167\113\064\127\202\130\201\131\204\135\142\136\123" +
    "\137\135\140\122\141\133\142\153\143\154\144\111\146" +
    "\210\147\170\150\175\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\004\072\u012b\001\001\000" +
    "\044\006\217\023\124\024\172\025\211\026\137\027\150" +
    "\127\202\144\u012a\146\210\147\170\150\277\151\200\152" +
    "\121\155\162\165\116\166\117\167\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\217\023\124\024\172\025\211\026\137\027\150\127\202" +
    "\144\u010f\146\210\147\170\150\277\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\226\045" +
    "\230\001\001\000\070\006\217\023\124\024\172\025\211" +
    "\026\137\027\150\030\357\127\202\130\201\131\204\135" +
    "\142\136\123\137\135\140\122\141\133\142\153\143\154" +
    "\144\111\146\210\147\170\150\175\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\044\006\217" +
    "\023\124\024\172\025\211\026\137\027\150\127\202\144" +
    "\356\146\210\147\170\150\277\151\200\152\121\155\162" +
    "\165\116\166\117\167\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\355\042\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\006" +
    "\217\023\124\024\172\025\211\026\137\027\150\030\321" +
    "\113\322\127\202\130\201\131\204\135\142\136\123\137" +
    "\135\140\122\141\133\142\153\143\154\144\111\146\210" +
    "\147\170\150\175\151\200\152\121\155\162\165\116\166" +
    "\117\167\140\001\001\000\002\001\001\000\004\006\312" +
    "\001\001\000\044\006\217\023\124\024\172\025\211\026" +
    "\137\027\150\127\202\144\310\146\210\147\170\150\277" +
    "\151\200\152\121\155\162\165\116\166\117\167\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\217\023\124\024\172\025" +
    "\211\026\137\027\150\127\202\144\276\146\210\147\170" +
    "\150\277\151\200\152\121\155\162\165\116\166\117\167" +
    "\140\001\001\000\004\072\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\260\001\001\000\004\126\236\001\001\000\004" +
    "\072\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\215\001\001\000\004\072\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\006\217\023\124\024\172\025\211" +
    "\026\137\027\150\030\220\127\202\130\201\131\204\135" +
    "\142\136\123\137\135\140\122\141\133\142\153\143\154" +
    "\144\111\146\210\147\170\150\175\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\006\044\226" +
    "\045\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\223\001\001\000\136\006\145\014\131\016\224" +
    "\017\125\020\120\022\152\023\124\024\172\025\211\026" +
    "\137\027\150\030\115\046\136\055\173\060\126\061\205" +
    "\062\174\064\207\073\114\074\165\075\143\076\112\106" +
    "\011\107\025\110\167\113\064\127\202\130\201\131\204" +
    "\135\142\136\123\137\135\140\122\141\133\142\153\143" +
    "\154\144\111\146\210\147\170\150\175\151\200\152\121" +
    "\155\162\165\116\166\117\167\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\006\217" +
    "\023\124\024\172\025\211\026\137\027\150\030\232\127" +
    "\202\130\201\131\204\135\142\136\123\137\135\140\122" +
    "\141\133\142\153\143\154\144\111\146\210\147\170\150" +
    "\175\151\200\152\121\155\162\165\116\166\117\167\140" +
    "\001\001\000\004\044\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\217\151\256\166\117\167\140\001\001\000\070\006" +
    "\217\023\124\024\172\025\211\026\137\027\150\030\255" +
    "\127\202\130\201\131\204\135\142\136\123\137\135\140" +
    "\122\141\133\142\153\143\154\144\111\146\210\147\170" +
    "\150\175\151\200\152\121\155\162\165\116\166\117\167" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\006\217\023\124\024\172\025\211\026" +
    "\137\027\150\030\250\051\247\052\245\053\246\127\202" +
    "\130\201\131\204\135\142\136\123\137\135\140\122\141" +
    "\133\142\153\143\154\144\111\146\210\147\170\150\175" +
    "\151\200\152\121\155\162\165\116\166\117\167\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\226\045\252\001\001\000\004\044\231\001\001" +
    "\000\072\006\217\023\124\024\172\025\211\026\137\027" +
    "\150\030\250\053\254\127\202\130\201\131\204\135\142" +
    "\136\123\137\135\140\122\141\133\142\153\143\154\144" +
    "\111\146\210\147\170\150\175\151\200\152\121\155\162" +
    "\165\116\166\117\167\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\263\001" +
    "\001\000\136\006\145\014\131\016\264\017\125\020\120" +
    "\022\152\023\124\024\172\025\211\026\137\027\150\030" +
    "\115\046\136\055\173\060\126\061\205\062\174\064\207" +
    "\073\114\074\165\075\143\076\112\106\011\107\025\110" +
    "\167\113\064\127\202\130\201\131\204\135\142\136\123" +
    "\137\135\140\122\141\133\142\153\143\154\144\111\146" +
    "\210\147\170\150\175\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\006\217\023\124\024\172\025\211\026\137" +
    "\027\150\030\267\127\202\130\201\131\204\135\142\136" +
    "\123\137\135\140\122\141\133\142\153\143\154\144\111" +
    "\146\210\147\170\150\175\151\200\152\121\155\162\165" +
    "\116\166\117\167\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\272\001\001\000\136\006\145\014" +
    "\131\016\273\017\125\020\120\022\152\023\124\024\172" +
    "\025\211\026\137\027\150\030\115\046\136\055\173\060" +
    "\126\061\205\062\174\064\207\073\114\074\165\075\143" +
    "\076\112\106\011\107\025\110\167\113\064\127\202\130" +
    "\201\131\204\135\142\136\123\137\135\140\122\141\133" +
    "\142\153\143\154\144\111\146\210\147\170\150\175\151" +
    "\200\152\121\155\162\165\116\166\117\167\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\301\001\001" +
    "\000\136\006\145\014\131\016\302\017\125\020\120\022" +
    "\152\023\124\024\172\025\211\026\137\027\150\030\115" +
    "\046\136\055\173\060\126\061\205\062\174\064\207\073" +
    "\114\074\165\075\143\076\112\106\011\107\025\110\167" +
    "\113\064\127\202\130\201\131\204\135\142\136\123\137" +
    "\135\140\122\141\133\142\153\143\154\144\111\146\210" +
    "\147\170\150\175\151\200\152\121\155\162\165\116\166" +
    "\117\167\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\006\217\023\124\024\172\025" +
    "\211\026\137\027\150\030\306\127\202\130\201\131\204" +
    "\135\142\136\123\137\135\140\122\141\133\142\153\143" +
    "\154\144\111\146\210\147\170\150\175\151\200\152\121" +
    "\155\162\165\116\166\117\167\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\006\217\023\124\024\172\025" +
    "\211\026\137\027\150\030\250\051\314\052\245\053\246" +
    "\127\202\130\201\131\204\135\142\136\123\137\135\140" +
    "\122\141\133\142\153\143\154\144\111\146\210\147\170" +
    "\150\175\151\200\152\121\155\162\165\116\166\117\167" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\006\217\023\124\024\172\025\211\026\137\027\150\030" +
    "\250\051\317\052\245\053\246\127\202\130\201\131\204" +
    "\135\142\136\123\137\135\140\122\141\133\142\153\143" +
    "\154\144\111\146\210\147\170\150\175\151\200\152\121" +
    "\155\162\165\116\166\117\167\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\217\023\124\024\172\025\211\026\137\027" +
    "\150\127\202\144\324\146\210\147\170\150\277\151\200" +
    "\152\121\155\162\165\116\166\117\167\140\001\001\000" +
    "\002\001\001\000\042\006\217\023\124\024\172\025\211" +
    "\026\137\027\150\127\202\146\210\147\170\150\277\151" +
    "\200\152\121\155\326\165\116\166\117\167\140\001\001" +
    "\000\002\001\001\000\052\006\217\023\124\024\172\025" +
    "\211\026\137\027\150\127\202\137\350\140\122\141\133" +
    "\144\111\146\210\147\170\150\277\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\052\006\217" +
    "\023\124\024\172\025\211\026\137\027\150\127\202\137" +
    "\347\140\122\141\133\144\111\146\210\147\170\150\277" +
    "\151\200\152\121\155\162\165\116\166\117\167\140\001" +
    "\001\000\052\006\217\023\124\024\172\025\211\026\137" +
    "\027\150\127\202\137\346\140\122\141\133\144\111\146" +
    "\210\147\170\150\277\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\052\006\217\023\124\024" +
    "\172\025\211\026\137\027\150\127\202\137\333\140\122" +
    "\141\133\144\111\146\210\147\170\150\277\151\200\152" +
    "\121\155\162\165\116\166\117\167\140\001\001\000\002" +
    "\001\001\000\050\006\217\023\124\024\172\025\211\026" +
    "\137\027\150\127\202\140\345\141\133\144\111\146\210" +
    "\147\170\150\277\151\200\152\121\155\162\165\116\166" +
    "\117\167\140\001\001\000\050\006\217\023\124\024\172" +
    "\025\211\026\137\027\150\127\202\140\336\141\133\144" +
    "\111\146\210\147\170\150\277\151\200\152\121\155\162" +
    "\165\116\166\117\167\140\001\001\000\002\001\001\000" +
    "\046\006\217\023\124\024\172\025\211\026\137\027\150" +
    "\127\202\141\344\144\111\146\210\147\170\150\277\151" +
    "\200\152\121\155\162\165\116\166\117\167\140\001\001" +
    "\000\046\006\217\023\124\024\172\025\211\026\137\027" +
    "\150\127\202\141\341\144\111\146\210\147\170\150\277" +
    "\151\200\152\121\155\162\165\116\166\117\167\140\001" +
    "\001\000\002\001\001\000\044\006\217\023\124\024\172" +
    "\025\211\026\137\027\150\127\202\144\343\146\210\147" +
    "\170\150\277\151\200\152\121\155\162\165\116\166\117" +
    "\167\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\217\023\124\024\172\025\211\026" +
    "\137\027\150\127\202\137\135\140\122\141\133\143\354" +
    "\144\111\146\210\147\170\150\277\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\054\006\217" +
    "\023\124\024\172\025\211\026\137\027\150\127\202\137" +
    "\135\140\122\141\133\143\353\144\111\146\210\147\170" +
    "\150\277\151\200\152\121\155\162\165\116\166\117\167" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\360\001\001\000" +
    "\002\001\001\000\070\006\217\023\124\024\172\025\211" +
    "\026\137\027\150\030\362\127\202\130\201\131\204\135" +
    "\142\136\123\137\135\140\122\141\133\142\153\143\154" +
    "\144\111\146\210\147\170\150\175\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\365\001\001\000\014\065" +
    "\371\066\372\067\373\077\367\100\370\001\001\000\070" +
    "\006\217\023\124\024\172\025\211\026\137\027\150\030" +
    "\u0103\127\202\130\201\131\204\135\142\136\123\137\135" +
    "\140\122\141\133\142\153\143\154\144\111\146\210\147" +
    "\170\150\175\151\200\152\121\155\162\165\116\166\117" +
    "\167\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\067\u0101\077\u0100\100\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\376\001" +
    "\001\000\136\006\145\014\131\016\377\017\125\020\120" +
    "\022\152\023\124\024\172\025\211\026\137\027\150\030" +
    "\115\046\136\055\173\060\126\061\205\062\174\064\207" +
    "\073\114\074\165\075\143\076\112\106\011\107\025\110" +
    "\167\113\064\127\202\130\201\131\204\135\142\136\123" +
    "\137\135\140\122\141\133\142\153\143\154\144\111\146" +
    "\210\147\170\150\175\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\u0105\001\001\000\136\006\145\014\131\016" +
    "\u0106\017\125\020\120\022\152\023\124\024\172\025\211" +
    "\026\137\027\150\030\115\046\136\055\173\060\126\061" +
    "\205\062\174\064\207\073\114\074\165\075\143\076\112" +
    "\106\011\107\025\110\167\113\064\127\202\130\201\131" +
    "\204\135\142\136\123\137\135\140\122\141\133\142\153" +
    "\143\154\144\111\146\210\147\170\150\175\151\200\152" +
    "\121\155\162\165\116\166\117\167\140\001\001\000\002" +
    "\001\001\000\070\006\217\023\124\024\172\025\211\026" +
    "\137\027\150\030\u010c\127\202\130\201\131\204\135\142" +
    "\136\123\137\135\140\122\141\133\142\153\143\154\144" +
    "\111\146\210\147\170\150\175\151\200\152\121\155\162" +
    "\165\116\166\117\167\140\001\001\000\060\006\217\023" +
    "\124\024\172\025\211\026\137\027\150\127\202\136\u0109" +
    "\137\135\140\122\141\133\142\153\143\154\144\111\146" +
    "\210\147\170\150\277\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\002\001\001\000\056\006" +
    "\217\023\124\024\172\025\211\026\137\027\150\127\202" +
    "\137\135\140\122\141\133\142\u010b\143\154\144\111\146" +
    "\210\147\170\150\277\151\200\152\121\155\162\165\116" +
    "\166\117\167\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\006\217\023\124\024\172\025\211\026\137" +
    "\027\150\030\u010e\127\202\130\201\131\204\135\142\136" +
    "\123\137\135\140\122\141\133\142\153\143\154\144\111" +
    "\146\210\147\170\150\175\151\200\152\121\155\162\165" +
    "\116\166\117\167\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0115\101\u0113\001\001\000\002\001\001\000\004\006\u011d" +
    "\001\001\000\002\001\001\000\070\006\217\023\124\024" +
    "\172\025\211\026\137\027\150\030\u0117\127\202\130\201" +
    "\131\204\135\142\136\123\137\135\140\122\141\133\142" +
    "\153\143\154\144\111\146\210\147\170\150\175\151\200" +
    "\152\121\155\162\165\116\166\117\167\140\001\001\000" +
    "\002\001\001\000\070\006\217\023\124\024\172\025\211" +
    "\026\137\027\150\030\u0119\127\202\130\201\131\204\135" +
    "\142\136\123\137\135\140\122\141\133\142\153\143\154" +
    "\144\111\146\210\147\170\150\175\151\200\152\121\155" +
    "\162\165\116\166\117\167\140\001\001\000\002\001\001" +
    "\000\004\006\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\006\217\023\124\024\172" +
    "\025\211\026\137\027\150\030\u011f\127\202\130\201\131" +
    "\204\135\142\136\123\137\135\140\122\141\133\142\153" +
    "\143\154\144\111\146\210\147\170\150\175\151\200\152" +
    "\121\155\162\165\116\166\117\167\140\001\001\000\002" +
    "\001\001\000\070\006\217\023\124\024\172\025\211\026" +
    "\137\027\150\030\u0121\127\202\130\201\131\204\135\142" +
    "\136\123\137\135\140\122\141\133\142\153\143\154\144" +
    "\111\146\210\147\170\150\175\151\200\152\121\155\162" +
    "\165\116\166\117\167\140\001\001\000\002\001\001\000" +
    "\004\006\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\u0127\001\001\000\136\006" +
    "\145\014\131\016\u0128\017\125\020\120\022\152\023\124" +
    "\024\172\025\211\026\137\027\150\030\115\046\136\055" +
    "\173\060\126\061\205\062\174\064\207\073\114\074\165" +
    "\075\143\076\112\106\011\107\025\110\167\113\064\127" +
    "\202\130\201\131\204\135\142\136\123\137\135\140\122" +
    "\141\133\142\153\143\154\144\111\146\210\147\170\150" +
    "\175\151\200\152\121\155\162\165\116\166\117\167\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0132\001\001\000\002\001\001\000\010\006\u012f" +
    "\022\u0134\113\064\001\001\000\002\001\001\000\004\006" +
    "\u0136\001\001\000\002\001\001\000\006\013\u0138\164\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u013b\001\001\000\002\001\001\000\010\006\u012f\022\u013d" +
    "\113\064\001\001\000\002\001\001\000\006\006\u0140\042" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\006\217\023\124\024\172\025\211\026\137\027\150\030" +
    "\u0142\127\202\130\201\131\204\135\142\136\123\137\135" +
    "\140\122\141\133\142\153\143\154\144\111\146\210\147" +
    "\170\150\175\151\200\152\121\155\162\165\116\166\117" +
    "\167\140\001\001\000\002\001\001\000\012\013\105\015" +
    "\u0144\043\101\164\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\u0147\001\001\000\136\006\145\014" +
    "\131\016\u0148\017\125\020\120\022\152\023\124\024\172" +
    "\025\211\026\137\027\150\030\115\046\136\055\173\060" +
    "\126\061\205\062\174\064\207\073\114\074\165\075\143" +
    "\076\112\106\011\107\025\110\167\113\064\127\202\130" +
    "\201\131\204\135\142\136\123\137\135\140\122\141\133" +
    "\142\153\143\154\144\111\146\210\147\170\150\175\151" +
    "\200\152\121\155\162\165\116\166\117\167\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\u0150\001\001\000\030\010\056\011" +
    "\u0151\012\060\021\057\041\052\047\055\071\003\103\004" +
    "\106\011\107\025\110\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	Object info = null;

	public void report_error(String message, Object info){
		// Err err = new Err(TErr.SINTACTICO,message,info);
		this.info = info;
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        Err err = new Err(TErr.SINTACTICO,message,info);
        System.err.println(err);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // app ::= stmts 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict start_val = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // app ::= nl_list stmts 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt_list stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= import_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= stmt_class nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= err nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_list ::= import_list importar 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_list",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_list ::= importar 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_list",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // importar ::= KW_IMPORT LTHAN string BTHAN nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.IMPORT,null,null,new Dict("path",x)));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_class ::= modifiers KW_CLASS id LL nl_list class_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(
						TOperation.DEF_CLASS
						,null
						,null
						,new Dict(
							"modifiers",l
							,"name",x
							,"stmts",ss
							)));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_class",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_class ::= modifiers KW_CLASS id KW_EXTENDS id LL nl_list class_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(
						TOperation.DEF_CLASS
						,null
						,null
						,new Dict(
							"modifiers",l
							,"name",x
							,"super",x2
							,"stmts",ss
							)));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_class",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_stmts ::= class_stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_stmt_list ::= class_stmt_list class_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_stmt_list ::= class_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("list",new ArrayList(){{
							add(x);
						}});
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_stmt ::= class_def_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // class_stmt ::= def_method nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_stmt ::= err nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // class_def_var ::= modifiers def_var 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("modifiers",l);
						RESULT = new Dict("nodo",new Node(TOperation.DEF_FIELD,null,null,x,null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_def_var",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_method ::= modifiers id PL method_params PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.DEF_CONSTRUCT,null,null,new Dict(){{
						set("modifiers",l);
						set("name",x);
						set("params",l2);
						set("stmts",new Dict("list",new ArrayList<Dict>()));
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_method",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_method ::= modifiers type id PL method_params PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,new Dict(){{
						set("modifiers",l);
						set("type",t);
						set("name",x);
						set("params",l2);
						// set("stmts",new Dict("list",new ArrayList<Dict>()));
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_method",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_params ::= method_param_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_params ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_param_list ::= method_param_list COMA method_param 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_param_list ::= method_param 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_param ::= method_param_ref type id 
            {
              Dict RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("ref",r);
							set("type",t);
							set("name",x);
							set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_param ::= method_param_ref KW_ARRAY LTHAN type BTHAN id 
            {
              Dict RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("array",true);
							set("ref",r);
							set("type",t);
							set("name",x);
							set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_param_ref ::= REF 
            {
              Dict RESULT =null;
		RESULT = new Dict("val",true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_ref",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_param_ref ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("val",false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_ref",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block ::= LL nl_list method_stmts LR 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_stmts ::= method_stmt_list method_return 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_stmts ::= method_stmt_list 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_stmts ::= method_return 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_return ::= KW_RETURN expr nl_list 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.RETURN,null,null,new Dict("return",e)));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_return",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_stmt_list ::= method_stmt_list method_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_stmt_list ::= method_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_stmt ::= expr nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_stmt ::= method_def_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_stmt ::= loops nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_stmt ::= conds nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_stmt ::= KW_BREAK nl_list 
            {
              Dict RESULT =null;
		RESULT = new Dict("nodo",new Node(TOperation.BREAK,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_stmt ::= KW_CONTINUE nl_list 
            {
              Dict RESULT =null;
		RESULT = new Dict("nodo",new Node(TOperation.CONTINUE,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_stmt ::= err nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // loops ::= loop_while 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loops",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // loops ::= loop_for 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loops",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // loop_while ::= KW_WHILE PL expr PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_while",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // loop_while ::= KW_DO LL nl_list method_stmts LR KW_WHILE PL expr PR 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_while",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // loop_for ::= KW_FOR PL for_def PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // for_def ::= id EQUAL expr COMA expr COMA id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for_def ::= KW_INT id EQUAL expr COMA expr COMA id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conds ::= cond_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conds",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conds ::= cond_switch 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conds",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond_switch ::= KW_SWITCH PL expr PR LL nl_list switch_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_switch",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond_if ::= cond_if_else_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond_if ::= cond_if_else_list cond_if_else 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // switch_stmts ::= switch_stmt_list switch_default 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch_stmts ::= switch_stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch_stmts ::= switch_default 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch_stmts ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_default ::= KW_DEFAULT DPUNTOS nl_list method_stmts 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_default",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch_stmt_list ::= switch_stmt_list switch_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switch_stmt_list ::= switch_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // switch_stmt ::= switch_case 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // switch_case ::= KW_CASE expr DPUNTOS nl_list method_stmts 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond_if_else_list ::= cond_if_else_list KW_ELSE cond_if_if 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond_if_else_list ::= cond_if_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond_if_if ::= KW_IF PL expr PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_if",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond_if_else ::= KW_ELSE LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // set_var ::= var EQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // set_var ::= var PEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // set_var ::= var MIEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // set_var ::= var MUEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // set_var ::= var DIEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // var ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // new_obj ::= KW_NEW id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_obj",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // method_call ::= method_call_obj_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // method_call ::= id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // method_call ::= id DMINUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // method_call_obj_list ::= method_call_obj_list PUNTO method_call_obj 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // method_call_obj_list ::= method_call_obj 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // method_call_obj_list ::= new_obj 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // method_call_obj_list ::= PL expr Q expr DPUNTOS expr PR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e3 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // method_call_obj_list ::= PL PL type PR expr PR 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // method_call_obj ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // method_call_obj ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // method_call_obj ::= id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // method_call_obj ::= id PL method_call_params PR di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // method_call_params ::= method_call_param_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_params",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // method_call_params ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_params",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // method_call_param_list ::= method_call_param_list COMA method_call_param 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // method_call_param_list ::= method_call_param 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // method_call_param ::= expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // method_def_var ::= def_var 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.DEF_LOCALVAR,null,null,x));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_def_var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // def_var ::= type id_list 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("type",t);
							set("name",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // def_var ::= type id EQUAL expr 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("type",t);
							set("name",new Dict("list",new ArrayList<Dict>(){{add(x);}}));
							set("val",e);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // def_var ::= KW_ARRAY LTHAN type BTHAN id_list 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("array",true);
							set("type",t);
							set("name",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_var ::= KW_ARRAY LTHAN type BTHAN id EQUAL expr 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("array",true);
							set("type",t);
							set("name",new Dict("list",new ArrayList<Dict>(){{add(x);}}));
							set("val",e);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_var_array ::= LTHAN type BTHAN 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var_array",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_var_array ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var_array",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // modifiers ::= modifier_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifiers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // modifiers ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifiers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // modifier_list ::= modifier_list modifier 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_list",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // modifier_list ::= modifier 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("list",new ArrayList(){{
							add(x);
						}});
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_list",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // modifier ::= KW_PRIVATE 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.PRIVATE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // modifier ::= KW_PUBLIC 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.PUBLIC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // modifier ::= KW_STATIC 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.STATIC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type ::= type_primitive 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type_primitive ::= KW_INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.INT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_primitive",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type_primitive ::= KW_FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.FLOAT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_primitive",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_primitive ::= KW_CHAR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_primitive",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_primitive ::= KW_STRING 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_primitive",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type_primitive ::= KW_BOOL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_primitive",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type_primitive ::= KW_VOID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.VOID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_primitive",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_assign_oper ::= EQUAL 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign_oper",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_assign_oper ::= PEQUAL 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign_oper",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_assign_oper ::= MIEQUAL 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign_oper",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_assign_oper ::= MUEQUAL 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign_oper",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr_assign_oper ::= DIEQUAL 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign_oper",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr_name ::= expr_name_simple 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr_name ::= expr_name_complex 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr_name_simple ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name_simple",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_name_simple ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							x.put("dims",l);
							RESULT = x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name_simple",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_name_simple ::= this 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name_simple",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr_name_simple ::= kw_super 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name_simple",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr_name_complex ::= expr_name PUNTO expr_name_simple 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_name_complex",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr_call ::= expr_call_simple 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_call",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr_call ::= expr_call_complex 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_call",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr_call_simple ::= id PL method_call_params PR 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_call_simple",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr_call_simple ::= id PL method_call_params PR di_list 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_call_simple",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr_call_complex ::= expr_call PUNTO expr_call_simple 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_call_complex",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr_nc ::= expr_nc_simple 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_nc",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr_nc ::= expr_nc_complex 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_nc",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr_nc_simple ::= expr_call 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_nc_simple",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr_nc_simple ::= expr_name 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_nc_simple",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr_nc_complex ::= expr_nc PUNTO expr_nc_simple 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_nc_complex",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= expr_assign 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= expr_cond 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_assign ::= expr_name expr_assign_oper expr 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_cond ::= expr_cond_or 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_cond",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_cond ::= expr_cond_or Q expr DPUNTOS expr 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_cond",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_cond_or ::= expr_cond_or OR expr_cond_and 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.OR,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_cond_or",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr_cond_or ::= expr_cond_and 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_cond_or",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr_cond_and ::= expr_cond_and AND expr_eq 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.AND,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_cond_and",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr_cond_and ::= expr_eq 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_cond_and",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_eq ::= expr_eq DEQUAL expr_rel 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.DEQUAL,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_eq",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr_eq ::= expr_eq NEQUAL expr_rel 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.NEQUAL,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_eq",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_eq ::= expr_rel 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_eq",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr_rel ::= expr_rel LTHAN expr_add 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.LTHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_rel ::= expr_rel LETHAN expr_add 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.LETHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr_rel ::= expr_rel BTHAN expr_add 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.BTHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr_rel ::= expr_rel BETHAN expr_add 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.BETHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr_rel ::= expr_add 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr_add ::= expr_add PLUS expr_mul 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.PLUS,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_add",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expr_add ::= expr_add MINUS expr_mul 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.MINUS,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_add",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expr_add ::= expr_mul 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_add",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr_mul ::= expr_mul MULT expr_expnte 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.MULT,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_mul",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr_mul ::= expr_mul DIV expr_expnte 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.DIV,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_mul",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr_mul ::= expr_expnte 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_mul",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr_expnte ::= expr_expnte EXP expr_unary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.put(
						"nodo",
						new Node(
							TOperation.EXP,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_expnte",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_expnte ::= expr_unary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_expnte",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_unary ::= DPLUS expr_unary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.LLPLUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_unary ::= DMINUS expr_unary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.LLMINUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_unary ::= PLUS expr_unary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.LPLUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_unary ::= MINUS expr_unary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.LMINUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_unary ::= expr_unary1 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_unary1 ::= NOT expr_unary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.NOT,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary1",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_unary1 ::= PL type_primitive PR expr_unary 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.CAST,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1),"type",t)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary1",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_unary1 ::= PL expr PR expr_unary1 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.CAST,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1),"type",t)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary1",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_unary1 ::= expr_unary_post 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary1",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_unary_post ::= expr_prim 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary_post",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_unary_post ::= expr_unary_post DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Dict("nodo",new Node(TOperation.RRPLUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary_post",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_unary_post ::= expr_unary_post DMINUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Dict("nodo",new Node(TOperation.RRMINUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary_post",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_prim ::= expr_prim_lit 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_prim ::= PL expr PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_prim ::= KW_NEW id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.NEW
  							,null
  							,null
  							,new Dict(
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4),
  								"type",x,
  								"params",l
  								)
  							)
  						);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_prim ::= KW_NEW KW_ARRAY PL method_call_params PR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.NEW
  							,null
  							,null
  							,new Dict(
  								"array",true,
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4),
  								"params",l
  								)
  							)
  						);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_prim ::= expr_name 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.LEAF
  							,null
  							,null
  							,new Dict(
  								"name",x
  								)
  							)
  						);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_prim ::= expr_name PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.METHOD_CALL
  							,null
  							,null
  							,new Dict(
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3),
  								"name",x,
  								"params",l
  								)
  							)
  						);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_prim ::= expr_name PL method_call_params PR di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict d = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.METHOD_CALL
  							,null
  							,null
  							,new Dict(
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4),
  								"name",x,
  								"params",l,
  								"dims",d
  								)
  							)
  						);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_prim_lit ::= int 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim_lit",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_prim_lit ::= float 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim_lit",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_prim_lit ::= char 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim_lit",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_prim_lit ::= string 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim_lit",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_prim_lit ::= bool 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim_lit",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_prim_lit ::= null 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_prim_lit",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // id_list ::= id_list COMA id 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // id_list ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // di_list ::= di_list di 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // di_list ::= di 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // nl_list ::= nl_list NEWLINE 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nl_list",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // nl_list ::= NEWLINE 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nl_list",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // di ::= QL expr QR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // id ::= ID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.REF);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // int ::= INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.INT);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // float ::= FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.FLOAT);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // char ::= CHAR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.CHAR);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // string ::= STRING 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.STRING);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bool ::= BOOL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.BOOLEAN);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // null ::= NULL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.NULL);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("null",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // this ::= KW_THIS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.REF);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // kw_super ::= KW_SUPER 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.REF);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("kw_super",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // error_lexico ::= ERROR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							put("nodo",new Node(TOperation.ERROR_LEXICO,null,null,this));
							put("info",(CUP$Parser$stack.peek()));
							put("tipo",Sym.ERROR);
							put("val",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_lexico",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // error_sintactico ::= error 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict(){{
								put("nodo",new Node(TOperation.ERROR_SINTACTICO,null,null,this));
								put("info",parser.info);
								put("type",Sym.error);
							}};
						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_sintactico",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // err ::= error_sintactico 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // err ::= error_lexico 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

