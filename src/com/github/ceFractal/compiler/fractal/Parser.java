
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Jun 15 18:39:35 CST 2014
//----------------------------------------------------

package com.github.ceFractal.compiler.fractal;

import com.github.gg.Dict;
import com.github.gg.TOperation;
import com.github.gg.Node;
import com.github.gg.Err;
import com.github.gg.TErr;
import com.github.gg.TType;
import com.github.gg.TModifier;
import java.util.ArrayList;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Jun 15 18:39:35 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\104\003\000\002\104\002\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\005\006\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\007\011\000\002\007\013\000\002\011\003\000\002\011" +
    "\002\000\002\012\004\000\002\012\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\047\004\000\002\041\013\000\002\041\014\000\002" +
    "\015\003\000\002\015\002\000\002\043\005\000\002\043" +
    "\003\000\002\013\004\000\002\013\005\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\002\000" +
    "\002\055\005\000\002\017\004\000\002\017\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\060\003\000" +
    "\002\060\003\000\002\074\012\000\002\074\013\000\002" +
    "\075\012\000\002\101\012\000\002\101\013\000\002\061" +
    "\003\000\002\061\003\000\002\073\012\000\002\064\003" +
    "\000\002\064\004\000\002\065\004\000\002\065\003\000" +
    "\002\065\003\000\002\065\002\000\002\077\006\000\002" +
    "\066\004\000\002\066\003\000\002\067\003\000\002\100" +
    "\007\000\002\062\005\000\002\062\003\000\002\076\012" +
    "\000\002\063\007\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\105\003\000\002\105\004\000\002\070\007\000\002\050" +
    "\003\000\002\050\004\000\002\050\004\000\002\057\005" +
    "\000\002\057\003\000\002\057\003\000\002\057\015\000" +
    "\002\057\005\000\002\056\003\000\002\056\004\000\002" +
    "\056\006\000\002\056\007\000\002\051\003\000\002\051" +
    "\002\000\002\052\005\000\002\052\003\000\002\053\003" +
    "\000\002\046\003\000\002\020\004\000\002\020\006\000" +
    "\002\020\007\000\002\020\011\000\002\102\005\000\002" +
    "\102\002\000\002\021\003\000\002\021\002\000\002\103" +
    "\004\000\002\103\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\030\005\000\002\030" +
    "\003\000\002\031\005\000\002\031\003\000\002\032\004" +
    "\000\002\032\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\005\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\003\000" +
    "\002\037\004\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\005\000\002\042\005" +
    "\000\002\042\003\000\002\045\004\000\002\045\003\000" +
    "\002\072\004\000\002\072\003\000\002\044\005\000\002" +
    "\006\003\000\002\023\003\000\002\024\003\000\002\025" +
    "\003\000\002\026\003\000\002\027\003\000\002\106\003" +
    "\000\002\107\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\024\002\ufffd\003\021\024\uff98\025\022\026" +
    "\017\030\015\101\024\102\020\103\010\001\002\000\030" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\024\uff96\025" +
    "\uff96\026\uff96\072\uff96\076\uff96\101\uff96\001\002\000\030" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\024\uff99\025" +
    "\022\026\017\072\uff99\076\uff99\101\024\001\002\000\004" +
    "\024\043\001\002\000\024\002\ufffd\003\021\024\uff98\025" +
    "\022\026\017\030\015\101\024\102\030\103\010\001\002" +
    "\000\004\102\uff60\001\002\000\004\102\020\001\002\000" +
    "\004\002\040\001\002\000\004\102\020\001\002\000\020" +
    "\002\ufffe\003\021\024\uff98\025\022\026\017\101\024\103" +
    "\010\001\002\000\004\041\032\001\002\000\004\002\001" +
    "\001\002\000\030\004\uff95\005\uff95\006\uff95\007\uff95\010" +
    "\uff95\024\uff95\025\uff95\026\uff95\072\uff95\076\uff95\101\uff95" +
    "\001\002\000\074\002\uff68\003\uff68\004\uff68\005\uff68\006" +
    "\uff68\007\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68" +
    "\015\uff68\016\uff68\017\uff68\021\uff68\022\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\030\uff68\060\uff68\072\uff68\075\uff68" +
    "\076\uff68\077\uff68\101\uff68\102\uff68\103\uff68\001\002\000" +
    "\004\102\uff5f\001\002\000\030\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\024\uff94\025\uff94\026\uff94\072\uff94\076" +
    "\uff94\101\uff94\001\002\000\004\102\020\001\002\000\030" +
    "\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\024\uff93\025" +
    "\uff93\026\uff93\072\uff93\076\uff93\101\uff93\001\002\000\004" +
    "\102\020\001\002\000\020\002\ufffb\003\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\101\ufffb\103\ufffb\001\002\000\022\002\ufff6" +
    "\003\ufff6\024\ufff6\025\ufff6\026\ufff6\101\ufff6\102\030\103" +
    "\ufff6\001\002\000\074\002\uff69\003\uff69\004\uff69\005\uff69" +
    "\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\015\uff69\016\uff69\017\uff69\021\uff69\022\uff69\023\uff69" +
    "\024\uff69\025\uff69\026\uff69\030\uff69\060\uff69\072\uff69\075" +
    "\uff69\076\uff69\077\uff69\101\uff69\102\uff69\103\uff69\001\002" +
    "\000\022\002\ufffa\003\ufffa\024\ufffa\025\ufffa\026\ufffa\101" +
    "\ufffa\102\030\103\ufffa\001\002\000\004\073\033\001\002" +
    "\000\050\036\uff62\037\uff62\040\uff62\041\uff62\042\uff62\043" +
    "\uff62\044\uff62\045\uff62\050\uff62\052\uff62\053\uff62\054\uff62" +
    "\055\uff62\057\uff62\061\uff62\062\uff62\063\uff62\075\uff62\102" +
    "\uff62\001\002\000\004\037\035\001\002\000\004\102\ufff9" +
    "\001\002\000\020\002\ufffc\003\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\101\ufffc\103\ufffc\001\002\000\022\002\ufff8\003\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\101\ufff8\102\030\103\ufff8\001" +
    "\002\000\004\002\000\001\002\000\022\002\ufff7\003\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\101\ufff7\102\030\103\ufff7\001" +
    "\002\000\004\002\uffff\001\002\000\004\072\044\001\002" +
    "\000\102\027\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66" +
    "\044\uff66\045\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053" +
    "\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66" +
    "\062\uff66\063\uff66\064\uff66\072\uff66\074\uff66\075\uff66\102" +
    "\uff66\001\002\000\006\027\046\074\047\001\002\000\004" +
    "\072\044\001\002\000\004\102\020\001\002\000\036\003" +
    "\021\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\025\022" +
    "\026\017\072\uff98\075\ufff2\076\uff98\101\024\102\030\103" +
    "\010\001\002\000\004\102\020\001\002\000\004\102\020" +
    "\001\002\000\004\075\u013f\001\002\000\004\102\020\001" +
    "\002\000\034\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\025\ufff0\026\ufff0\072\ufff0\075\ufff0\076\ufff0\101" +
    "\ufff0\103\ufff0\001\002\000\004\102\020\001\002\000\034" +
    "\003\021\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\025" +
    "\022\026\017\072\uff98\075\ufff3\076\uff98\101\024\103\010" +
    "\001\002\000\020\004\070\005\071\006\062\007\066\010" +
    "\063\072\044\076\065\001\002\000\010\041\314\060\u0135" +
    "\072\uff8c\001\002\000\006\037\uff90\072\uff90\001\002\000" +
    "\006\037\uff8e\072\uff8e\001\002\000\004\102\uffeb\001\002" +
    "\000\006\037\uff8d\072\uff8d\001\002\000\006\037\uff8f\072" +
    "\uff8f\001\002\000\004\072\044\001\002\000\006\037\uff92" +
    "\072\uff92\001\002\000\006\037\uff91\072\uff91\001\002\000" +
    "\006\062\324\102\uff9f\001\002\000\012\031\074\060\075" +
    "\062\uff6c\102\uff6c\001\002\000\026\011\133\046\167\052" +
    "\174\060\172\066\165\067\171\070\166\071\201\072\044" +
    "\073\033\001\002\000\024\004\070\005\071\006\062\007" +
    "\066\010\063\061\uffe7\065\103\072\044\076\065\001\002" +
    "\000\004\061\111\001\002\000\006\037\uff8c\072\uff8c\001" +
    "\002\000\006\061\uffe8\062\107\001\002\000\006\061\uffe5" +
    "\062\uffe5\001\002\000\004\072\044\001\002\000\020\004" +
    "\070\005\071\006\062\007\066\010\063\072\044\076\065" +
    "\001\002\000\004\072\044\001\002\000\006\061\uffe3\062" +
    "\uffe3\001\002\000\006\061\uffe4\062\uffe4\001\002\000\022" +
    "\004\070\005\071\006\062\007\066\010\063\065\103\072" +
    "\044\076\065\001\002\000\006\061\uffe6\062\uffe6\001\002" +
    "\000\004\074\112\001\002\000\004\102\020\001\002\000" +
    "\054\003\021\004\070\005\071\006\062\007\066\010\063" +
    "\011\133\012\152\013\125\014\124\015\134\016\146\017" +
    "\142\021\140\060\117\072\044\075\uffdf\076\065\077\135" +
    "\102\030\103\010\001\002\000\056\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\060\uffdc\072\uffdc\075\uffdc\076\uffdc\077\uffdc\103\uffdc" +
    "\001\002\000\004\102\020\001\002\000\004\102\020\001" +
    "\002\000\030\004\265\011\133\046\167\052\174\060\172" +
    "\066\165\067\171\070\166\071\201\072\044\073\033\001" +
    "\002\000\004\102\020\001\002\000\004\102\020\001\002" +
    "\000\004\102\uffcb\001\002\000\004\102\uffd1\001\002\000" +
    "\004\060\u0116\001\002\000\004\074\u010e\001\002\000\004" +
    "\102\020\001\002\000\004\102\uffca\001\002\000\010\022" +
    "\uffe0\023\uffe0\075\uffe0\001\002\000\004\102\uffd2\001\002" +
    "\000\004\102\020\001\002\000\004\072\044\001\002\000" +
    "\004\102\020\001\002\000\026\011\133\046\167\052\174" +
    "\060\172\066\165\067\171\070\166\071\201\072\044\073" +
    "\033\001\002\000\014\031\374\032\373\033\377\034\376" +
    "\035\375\001\002\000\006\020\uffbc\102\uffbc\001\002\000" +
    "\004\060\345\001\002\000\052\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\050\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\057\uffad\061\uffad\062\uffad" +
    "\063\uffad\064\uffad\075\uffad\102\uffad\001\002\000\004\060" +
    "\336\001\002\000\004\075\335\001\002\000\006\020\326" +
    "\102\uffc8\001\002\000\034\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\041\314\047\242\051\241\056\246\060\244" +
    "\064\uffa9\072\uff8c\102\uffa9\001\002\000\004\102\020\001" +
    "\002\000\052\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\050\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\064\310" +
    "\075\uffb1\102\uffb1\001\002\000\056\003\021\004\070\005" +
    "\071\006\062\007\066\010\063\011\133\012\152\013\125" +
    "\014\124\015\134\016\146\017\142\021\140\022\uffe1\023" +
    "\uffe1\060\117\072\044\075\uffe1\076\065\077\135\103\010" +
    "\001\002\000\052\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\050\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\057\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\075\uffac\102\uffac\001\002\000\004\060\160\001\002" +
    "\000\004\102\020\001\002\000\004\102\uffa0\001\002\000" +
    "\004\072\044\001\002\000\010\031\074\062\uff6c\102\uff6c" +
    "\001\002\000\060\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\060\uffd7\072" +
    "\uffd7\075\uffd7\076\uffd7\077\uffd7\102\030\103\uffd7\001\002" +
    "\000\026\011\133\046\167\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\050" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\050\uff71\052\uff71\053\uff71\054\uff71\055\uff71" +
    "\057\uff71\061\uff71\062\uff71\063\uff71\075\uff71\102\uff71\001" +
    "\002\000\050\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff6f\044\uff6f\045\uff6f\050\uff6f\052\uff6f\053\uff6f\054" +
    "\uff6f\055\uff6f\057\uff6f\061\uff6f\062\uff6f\063\uff6f\075\uff6f" +
    "\102\uff6f\001\002\000\050\036\uff74\037\uff74\040\uff74\041" +
    "\uff74\042\uff74\043\uff74\044\uff74\045\uff74\050\uff74\052\uff74" +
    "\053\uff74\054\uff74\055\uff74\057\uff74\061\uff74\062\uff74\063" +
    "\uff74\075\uff74\102\uff74\001\002\000\006\045\262\061\301" +
    "\001\002\000\050\036\uff65\037\uff65\040\uff65\041\uff65\042" +
    "\uff65\043\uff65\044\uff65\045\uff65\050\uff65\052\uff65\053\uff65" +
    "\054\uff65\055\uff65\057\uff65\061\uff65\062\uff65\063\uff65\075" +
    "\uff65\102\uff65\001\002\000\050\036\uff63\037\uff63\040\uff63" +
    "\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\050\uff63\052" +
    "\uff63\053\uff63\054\uff63\055\uff63\057\uff63\061\uff63\062\uff63" +
    "\063\uff63\075\uff63\102\uff63\001\002\000\024\011\133\052" +
    "\174\060\172\066\165\067\171\070\166\071\201\072\044" +
    "\073\033\001\002\000\050\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\045\uff70\050\uff70\052\uff70" +
    "\053\uff70\054\uff70\055\uff70\057\uff70\061\uff70\062\uff70\063" +
    "\uff70\075\uff70\102\uff70\001\002\000\050\036\uff64\037\uff64" +
    "\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\050" +
    "\uff64\052\uff64\053\uff64\054\uff64\055\uff64\057\uff64\061\uff64" +
    "\062\uff64\063\uff64\075\uff64\102\uff64\001\002\000\030\004" +
    "\265\011\133\046\167\052\174\060\172\066\165\067\171" +
    "\070\166\071\201\072\044\073\033\001\002\000\062\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\047\242\050\uffa9\051\241\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\246\057\uffa9\060\244\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\075\uffa9\102\uffa9\001\002\000\022\011" +
    "\133\060\172\066\165\067\171\070\166\071\201\072\044" +
    "\073\033\001\002\000\050\036\uff75\037\uff75\040\uff75\041" +
    "\uff75\042\uff75\043\uff75\044\uff75\045\uff75\050\uff75\052\uff75" +
    "\053\uff75\054\uff75\055\uff75\057\uff75\061\uff75\062\uff75\063" +
    "\uff75\075\uff75\102\uff75\001\002\000\050\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\050" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\057\uff77\061\uff77" +
    "\062\uff77\063\uff77\075\uff77\102\uff77\001\002\000\050\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79" +
    "\045\uff79\050\uff79\052\uff79\053\uff79\054\uff79\055\227\057" +
    "\uff79\061\uff79\062\uff79\063\uff79\075\uff79\102\uff79\001\002" +
    "\000\046\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\050\uff7c\052\uff7c\053\224\054\225" +
    "\057\uff7c\061\uff7c\062\uff7c\063\uff7c\075\uff7c\102\uff7c\001" +
    "\002\000\050\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61" +
    "\043\uff61\044\uff61\045\uff61\050\uff61\052\uff61\053\uff61\054" +
    "\uff61\055\uff61\057\uff61\061\uff61\062\uff61\063\uff61\075\uff61" +
    "\102\uff61\001\002\000\040\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\050\221\052\222" +
    "\061\uff7f\062\uff7f\063\uff7f\075\uff7f\102\uff7f\001\002\000" +
    "\034\036\214\037\217\040\213\041\212\042\215\043\216" +
    "\044\uff86\045\uff86\061\uff86\062\uff86\063\uff86\075\uff86\102" +
    "\uff86\001\002\000\020\044\uff88\045\uff88\061\uff88\062\uff88" +
    "\063\uff88\075\uff88\102\uff88\001\002\000\050\036\uff72\037" +
    "\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72" +
    "\050\uff72\052\uff72\053\uff72\054\uff72\055\uff72\057\uff72\061" +
    "\uff72\062\uff72\063\uff72\075\uff72\102\uff72\001\002\000\020" +
    "\044\210\045\uff8a\061\uff8a\062\uff8a\063\uff8a\075\uff8a\102" +
    "\uff8a\001\002\000\050\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\050\uff73\052\uff73\053" +
    "\uff73\054\uff73\055\uff73\057\uff73\061\uff73\062\uff73\063\uff73" +
    "\075\uff73\102\uff73\001\002\000\026\011\133\046\167\052" +
    "\174\060\172\066\165\067\171\070\166\071\201\072\044" +
    "\073\033\001\002\000\020\044\uff89\045\uff89\061\uff89\062" +
    "\uff89\063\uff89\075\uff89\102\uff89\001\002\000\024\011\133" +
    "\052\174\060\172\066\165\067\171\070\166\071\201\072" +
    "\044\073\033\001\002\000\024\011\133\052\174\060\172" +
    "\066\165\067\171\070\166\071\201\072\044\073\033\001" +
    "\002\000\024\011\133\052\174\060\172\066\165\067\171" +
    "\070\166\071\201\072\044\073\033\001\002\000\024\011" +
    "\133\052\174\060\172\066\165\067\171\070\166\071\201" +
    "\072\044\073\033\001\002\000\024\011\133\052\174\060" +
    "\172\066\165\067\171\070\166\071\201\072\044\073\033" +
    "\001\002\000\024\011\133\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\040" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\050\221\052\222\061\uff83\062\uff83\063\uff83" +
    "\075\uff83\102\uff83\001\002\000\024\011\133\052\174\060" +
    "\172\066\165\067\171\070\166\071\201\072\044\073\033" +
    "\001\002\000\024\011\133\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\046" +
    "\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\050\uff7d\052\uff7d\053\224\054\225\057\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\075\uff7d\102\uff7d\001\002\000" +
    "\024\011\133\052\174\060\172\066\165\067\171\070\166" +
    "\071\201\072\044\073\033\001\002\000\024\011\133\052" +
    "\174\060\172\066\165\067\171\070\166\071\201\072\044" +
    "\073\033\001\002\000\050\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\050\uff7a\052\uff7a" +
    "\053\uff7a\054\uff7a\055\227\057\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\075\uff7a\102\uff7a\001\002\000\024\011\133\052\174" +
    "\060\172\066\165\067\171\070\166\071\201\072\044\073" +
    "\033\001\002\000\050\036\uff78\037\uff78\040\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\050\uff78\052\uff78\053" +
    "\uff78\054\uff78\055\uff78\057\uff78\061\uff78\062\uff78\063\uff78" +
    "\075\uff78\102\uff78\001\002\000\050\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\050\uff7b" +
    "\052\uff7b\053\uff7b\054\uff7b\055\227\057\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\075\uff7b\102\uff7b\001\002\000\046\036\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\050\uff7e\052\uff7e\053\224\054\225\057\uff7e\061\uff7e" +
    "\062\uff7e\063\uff7e\075\uff7e\102\uff7e\001\002\000\040\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\050\221\052\222\061\uff84\062\uff84\063\uff84\075" +
    "\uff84\102\uff84\001\002\000\040\036\uff80\037\uff80\040\uff80" +
    "\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\050\221\052" +
    "\222\061\uff80\062\uff80\063\uff80\075\uff80\102\uff80\001\002" +
    "\000\040\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\050\221\052\222\061\uff85\062\uff85" +
    "\063\uff85\075\uff85\102\uff85\001\002\000\040\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82" +
    "\050\221\052\222\061\uff82\062\uff82\063\uff82\075\uff82\102" +
    "\uff82\001\002\000\040\036\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\050\221\052\222\061" +
    "\uff81\062\uff81\063\uff81\075\uff81\102\uff81\001\002\000\050" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044" +
    "\uff76\045\uff76\050\uff76\052\uff76\053\uff76\054\uff76\055\uff76" +
    "\057\uff76\061\uff76\062\uff76\063\uff76\075\uff76\102\uff76\001" +
    "\002\000\050\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\050\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf\075\uffaf" +
    "\102\uffaf\001\002\000\050\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\050\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\057\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\075\uffb0\102\uffb0\001\002\000\066\031\uff6a\032\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041" +
    "\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\050\uff6a\052\uff6a" +
    "\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\061\uff6a\062" +
    "\uff6a\063\uff6a\064\uff6a\075\uff6a\102\uff6a\001\002\000\030" +
    "\011\133\046\167\052\174\060\172\061\uffa4\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\054" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\050\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\246\057\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\075" +
    "\uffa8\102\uffa8\001\002\000\024\011\133\052\174\060\172" +
    "\066\165\067\171\070\166\071\201\072\044\073\033\001" +
    "\002\000\010\050\221\052\222\057\250\001\002\000\066" +
    "\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037" +
    "\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67" +
    "\050\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057" +
    "\uff67\061\uff67\062\uff67\063\uff67\064\uff67\075\uff67\102\uff67" +
    "\001\002\000\066\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035" +
    "\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b" +
    "\044\uff6b\045\uff6b\050\uff6b\052\uff6b\053\uff6b\054\uff6b\055" +
    "\uff6b\056\uff6b\057\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b" +
    "\075\uff6b\102\uff6b\001\002\000\010\045\262\061\uffa1\062" +
    "\uffa1\001\002\000\006\061\uffa5\062\260\001\002\000\006" +
    "\061\uffa2\062\uffa2\001\002\000\004\061\256\001\002\000" +
    "\054\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\050\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\246\057\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\075\uffa7\102\uffa7\001\002\000\054\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\050\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\246\057\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\075\uffa6\102\uffa6\001\002" +
    "\000\026\011\133\046\167\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\006" +
    "\061\uffa3\062\uffa3\001\002\000\026\011\133\046\167\052" +
    "\174\060\172\066\165\067\171\070\166\071\201\072\044" +
    "\073\033\001\002\000\020\044\210\045\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\075\uff8b\102\uff8b\001\002\000\006\045\262" +
    "\061\267\001\002\000\004\061\266\001\002\000\052\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\057" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\075\uffaa\102\uffaa" +
    "\001\002\000\052\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042" +
    "\uff6e\043\uff6e\044\uff6e\045\uff6e\050\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\055\uff6e\057\uff6e\061\uff6e\062\uff6e\063\uff6e\075" +
    "\uff6e\100\270\102\uff6e\001\002\000\004\074\271\001\002" +
    "\000\026\011\133\046\167\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\006" +
    "\045\262\075\273\001\002\000\004\063\274\001\002\000" +
    "\004\074\275\001\002\000\026\011\133\046\167\052\174" +
    "\060\172\066\165\067\171\070\166\071\201\072\044\073" +
    "\033\001\002\000\006\045\262\075\277\001\002\000\052" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\050\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\057\uffab\061\uffab\062\uffab\063\uffab\064\uffab\075\uffab\102" +
    "\uffab\001\002\000\034\036\214\037\217\040\213\041\212" +
    "\042\215\043\216\044\uff87\045\uff87\061\uff87\062\uff87\063" +
    "\uff87\075\uff87\102\uff87\001\002\000\004\074\302\001\002" +
    "\000\004\102\020\001\002\000\054\003\021\004\070\005" +
    "\071\006\062\007\066\010\063\011\133\012\152\013\125" +
    "\014\124\015\134\016\146\017\142\021\140\060\117\072" +
    "\044\075\uffdf\076\065\077\135\102\030\103\010\001\002" +
    "\000\004\075\305\001\002\000\004\102\uffd0\001\002\000" +
    "\056\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\060\uffdd\072\uffdd\075\uffdd" +
    "\076\uffdd\077\uffdd\103\uffdd\001\002\000\010\022\uffe2\023" +
    "\uffe2\075\uffe2\001\002\000\004\072\044\001\002\000\052" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\057\uffae\061\uffae\062\uffae\063\uffae\064\uffae\075\uffae\102" +
    "\uffae\001\002\000\056\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\050\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\246\057\uffa9\060\244\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\075\uffa9\102\uffa9\001\002\000" +
    "\060\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\060\uffd6\072\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\102\030\103\uffd6\001\002\000\020\004" +
    "\070\005\071\006\062\007\066\010\063\072\044\076\065" +
    "\001\002\000\022\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\056\246\064\uffa8\102\uffa8\001\002\000\004\037\317" +
    "\001\002\000\004\072\044\001\002\000\006\062\324\102" +
    "\uff9d\001\002\000\010\031\322\062\uff6c\102\uff6c\001\002" +
    "\000\026\011\133\046\167\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\006" +
    "\045\262\102\uff9c\001\002\000\004\072\044\001\002\000" +
    "\006\062\uff6d\102\uff6d\001\002\000\006\017\142\074\331" +
    "\001\002\000\004\102\uffc7\001\002\000\006\020\uffbd\102" +
    "\uffbd\001\002\000\004\102\020\001\002\000\054\003\021" +
    "\004\070\005\071\006\062\007\066\010\063\011\133\012" +
    "\152\013\125\014\124\015\134\016\146\017\142\021\140" +
    "\060\117\072\044\075\uffdf\076\065\077\135\102\030\103" +
    "\010\001\002\000\004\075\334\001\002\000\004\102\uffba" +
    "\001\002\000\004\102\uffe9\001\002\000\026\011\133\046" +
    "\167\052\174\060\172\066\165\067\171\070\166\071\201" +
    "\072\044\073\033\001\002\000\006\045\262\061\340\001" +
    "\002\000\004\074\341\001\002\000\004\102\020\001\002" +
    "\000\054\003\021\004\070\005\071\006\062\007\066\010" +
    "\063\011\133\012\152\013\125\014\124\015\134\016\146" +
    "\017\142\021\140\060\117\072\044\075\uffdf\076\065\077" +
    "\135\102\030\103\010\001\002\000\004\075\344\001\002" +
    "\000\006\020\uffbb\102\uffbb\001\002\000\026\011\133\046" +
    "\167\052\174\060\172\066\165\067\171\070\166\071\201" +
    "\072\044\073\033\001\002\000\006\045\262\061\347\001" +
    "\002\000\004\074\350\001\002\000\004\102\020\001\002" +
    "\000\012\022\352\023\360\075\uffc3\102\030\001\002\000" +
    "\026\011\133\046\167\052\174\060\172\066\165\067\171" +
    "\070\166\071\201\072\044\073\033\001\002\000\004\075" +
    "\uffc4\001\002\000\010\022\uffbf\023\uffbf\075\uffbf\001\002" +
    "\000\004\075\366\001\002\000\010\022\uffc0\023\uffc0\075" +
    "\uffc0\001\002\000\010\022\352\023\360\075\uffc5\001\002" +
    "\000\004\063\361\001\002\000\004\102\020\001\002\000" +
    "\054\003\021\004\070\005\071\006\062\007\066\010\063" +
    "\011\133\012\152\013\125\014\124\015\134\016\146\017" +
    "\142\021\140\060\117\072\044\075\uffdf\076\065\077\135" +
    "\102\030\103\010\001\002\000\004\075\uffc2\001\002\000" +
    "\004\075\uffc6\001\002\000\010\022\uffc1\023\uffc1\075\uffc1" +
    "\001\002\000\004\102\uffc9\001\002\000\006\045\262\063" +
    "\370\001\002\000\004\102\020\001\002\000\060\003\021" +
    "\004\070\005\071\006\062\007\066\010\063\011\133\012" +
    "\152\013\125\014\124\015\134\016\146\017\142\021\140" +
    "\022\uffdf\023\uffdf\060\117\072\044\075\uffdf\076\065\077" +
    "\135\102\030\103\010\001\002\000\010\022\uffbe\023\uffbe" +
    "\075\uffbe\001\002\000\026\011\133\046\167\052\174\060" +
    "\172\066\165\067\171\070\166\071\201\072\044\073\033" +
    "\001\002\000\026\011\133\046\167\052\174\060\172\066" +
    "\165\067\171\070\166\071\201\072\044\073\033\001\002" +
    "\000\026\011\133\046\167\052\174\060\172\066\165\067" +
    "\171\070\166\071\201\072\044\073\033\001\002\000\026" +
    "\011\133\046\167\052\174\060\172\066\165\067\171\070" +
    "\166\071\201\072\044\073\033\001\002\000\026\011\133" +
    "\046\167\052\174\060\172\066\165\067\171\070\166\071" +
    "\201\072\044\073\033\001\002\000\006\045\262\102\uffb7" +
    "\001\002\000\006\045\262\102\uffb6\001\002\000\006\045" +
    "\262\102\uffb5\001\002\000\006\045\262\102\uffb9\001\002" +
    "\000\006\045\262\102\uffb8\001\002\000\006\045\262\102" +
    "\020\001\002\000\012\022\uffde\023\uffde\075\uffde\102\030" +
    "\001\002\000\060\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\060\uffd5\072" +
    "\uffd5\075\uffd5\076\uffd5\077\uffd5\102\030\103\uffd5\001\002" +
    "\000\004\060\u0109\001\002\000\030\011\133\046\167\052" +
    "\174\060\172\061\uffa4\066\165\067\171\070\166\071\201" +
    "\072\044\073\033\001\002\000\004\061\u010b\001\002\000" +
    "\052\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\050\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\057\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\075\uffb2" +
    "\102\uffb2\001\002\000\060\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\060" +
    "\uffd8\072\uffd8\075\uffd8\076\uffd8\077\uffd8\102\030\103\uffd8" +
    "\001\002\000\060\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\060\uffdb\072" +
    "\uffdb\075\uffdb\076\uffdb\077\uffdb\102\030\103\uffdb\001\002" +
    "\000\004\102\020\001\002\000\054\003\021\004\070\005" +
    "\071\006\062\007\066\010\063\011\133\012\152\013\125" +
    "\014\124\015\134\016\146\017\142\021\140\060\117\072" +
    "\044\075\uffdf\076\065\077\135\102\030\103\010\001\002" +
    "\000\004\075\u0111\001\002\000\004\012\u0112\001\002\000" +
    "\004\060\u0113\001\002\000\026\011\133\046\167\052\174" +
    "\060\172\066\165\067\171\070\166\071\201\072\044\073" +
    "\033\001\002\000\006\045\262\061\u0115\001\002\000\004" +
    "\102\uffcf\001\002\000\006\004\u0118\072\044\001\002\000" +
    "\004\061\u0129\001\002\000\004\072\044\001\002\000\004" +
    "\031\u011a\001\002\000\026\011\133\046\167\052\174\060" +
    "\172\066\165\067\171\070\166\071\201\072\044\073\033" +
    "\001\002\000\006\045\262\062\u011c\001\002\000\026\011" +
    "\133\046\167\052\174\060\172\066\165\067\171\070\166" +
    "\071\201\072\044\073\033\001\002\000\006\045\262\062" +
    "\u011e\001\002\000\004\072\044\001\002\000\004\047\u0120" +
    "\001\002\000\004\061\uffcd\001\002\000\004\031\u0122\001" +
    "\002\000\026\011\133\046\167\052\174\060\172\066\165" +
    "\067\171\070\166\071\201\072\044\073\033\001\002\000" +
    "\006\045\262\062\u0124\001\002\000\026\011\133\046\167" +
    "\052\174\060\172\066\165\067\171\070\166\071\201\072" +
    "\044\073\033\001\002\000\006\045\262\062\u0126\001\002" +
    "\000\004\072\044\001\002\000\004\047\u0128\001\002\000" +
    "\004\061\uffcc\001\002\000\004\074\u012a\001\002\000\004" +
    "\102\020\001\002\000\054\003\021\004\070\005\071\006" +
    "\062\007\066\010\063\011\133\012\152\013\125\014\124" +
    "\015\134\016\146\017\142\021\140\060\117\072\044\075" +
    "\uffdf\076\065\077\135\102\030\103\010\001\002\000\004" +
    "\075\u012d\001\002\000\004\102\uffce\001\002\000\060\003" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\060\uffd9\072\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\102\030\103\uffd9\001\002\000\060\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\060\uffd4\072\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\102\030\103\uffd4\001\002\000\006\045\262\061\u0131\001" +
    "\002\000\004\100\270\001\002\000\060\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\060\uffd3\072\uffd3\075\uffd3\076\uffd3\077\uffd3\102" +
    "\030\103\uffd3\001\002\000\060\003\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda" +
    "\060\uffda\072\uffda\075\uffda\076\uffda\077\uffda\102\030\103" +
    "\uffda\001\002\000\006\045\262\102\uff9e\001\002\000\024" +
    "\004\070\005\071\006\062\007\066\010\063\061\uffe7\065" +
    "\103\072\044\076\065\001\002\000\004\061\u0137\001\002" +
    "\000\004\074\u0138\001\002\000\004\102\020\001\002\000" +
    "\054\003\021\004\070\005\071\006\062\007\066\010\063" +
    "\011\133\012\152\013\125\014\124\015\134\016\146\017" +
    "\142\021\140\060\117\072\044\075\uffdf\076\065\077\135" +
    "\102\030\103\010\001\002\000\004\075\u013b\001\002\000" +
    "\004\102\uffea\001\002\000\034\003\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\025\ufff1\026\ufff1\072\ufff1\075" +
    "\ufff1\076\ufff1\101\ufff1\103\ufff1\001\002\000\036\003\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\025\uffef\026" +
    "\uffef\072\uffef\075\uffef\076\uffef\101\uffef\102\030\103\uffef" +
    "\001\002\000\036\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\025\uffec\026\uffec\072\uffec\075\uffec\076\uffec" +
    "\101\uffec\102\030\103\uffec\001\002\000\004\102\ufff5\001" +
    "\002\000\036\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\025\uffed\026\uffed\072\uffed\075\uffed\076\uffed\101" +
    "\uffed\102\030\103\uffed\001\002\000\036\003\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\025\uffee\026\uffee\072" +
    "\uffee\075\uffee\076\uffee\101\uffee\102\030\103\uffee\001\002" +
    "\000\004\074\u0143\001\002\000\004\102\020\001\002\000" +
    "\036\003\021\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\025\022\026\017\072\uff98\075\ufff2\076\uff98\101\024\102" +
    "\030\103\010\001\002\000\004\075\u0146\001\002\000\004" +
    "\102\ufff4\001\002\000\030\004\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\024\uff97\025\uff97\026\uff97\072\uff97\076\uff97" +
    "\101\uff97\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\032\002\011\003\025\004\013\005\022\007" +
    "\012\021\005\071\003\072\006\103\004\104\015\106\010" +
    "\107\024\001\001\000\002\001\001\000\004\071\u0146\001" +
    "\001\000\002\001\001\000\026\003\025\004\013\005\022" +
    "\007\012\021\005\071\003\103\004\104\041\106\010\107" +
    "\024\001\001\000\002\001\001\000\004\072\040\001\001" +
    "\000\002\001\001\000\004\072\036\001\001\000\020\003" +
    "\035\007\012\021\005\071\003\103\004\106\010\107\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\030\001\001\000\002\001\001\000\004\072" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0141\001\001\000" +
    "\004\072\047\001\001\000\026\010\054\011\052\012\056" +
    "\021\057\041\050\047\055\071\003\103\004\106\051\107" +
    "\053\001\001\000\004\072\u0140\001\001\000\004\072\u013f" +
    "\001\001\000\002\001\001\000\004\072\u013d\001\001\000" +
    "\002\001\001\000\004\072\u013c\001\001\000\022\010\u013b" +
    "\021\057\041\050\047\055\071\003\103\004\106\051\107" +
    "\053\001\001\000\010\006\060\020\063\022\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\072\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\172" +
    "\023\162\024\206\025\204\026\160\027\167\030\u0133\031" +
    "\205\032\203\033\202\034\201\035\177\036\176\037\175" +
    "\040\174\050\161\056\140\057\146\070\150\001\001\000" +
    "\014\006\076\013\100\015\075\022\101\043\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\105\001\001\000\006\006\076" +
    "\022\103\001\001\000\004\006\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\076\013\107\022\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\112\001\001\000\062\006\144\014\113\016\142\017\147" +
    "\020\153\022\154\046\125\050\114\054\120\055\127\056" +
    "\140\057\146\060\131\061\152\062\143\064\121\070\150" +
    "\073\126\074\130\075\122\076\136\105\135\106\115\107" +
    "\117\001\001\000\002\001\001\000\004\072\u0132\001\001" +
    "\000\004\072\u0131\001\001\000\050\006\172\023\162\024" +
    "\206\025\204\026\160\027\167\030\u012f\031\205\032\203" +
    "\033\202\034\201\035\177\036\176\037\175\040\174\050" +
    "\161\056\140\057\146\070\150\001\001\000\004\072\u012e" +
    "\001\001\000\004\072\u012d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\u010c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\u010b\001\001\000\004\006\u0107" +
    "\001\001\000\004\072\u0106\001\001\000\050\006\172\023" +
    "\162\024\206\025\204\026\160\027\167\030\u0104\031\205" +
    "\032\203\033\202\034\201\035\177\036\176\037\175\040" +
    "\174\050\161\056\140\057\146\070\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\326" +
    "\001\001\000\006\044\242\045\314\001\001\000\004\072" +
    "\312\001\001\000\002\001\001\000\056\006\144\014\305" +
    "\020\153\022\154\046\125\050\114\054\120\055\306\056" +
    "\140\057\146\060\131\061\152\062\143\064\121\070\150" +
    "\073\126\074\130\075\122\076\136\105\135\106\115\107" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\156\001\001\000\002\001\001\000\006\006\155\042" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\172\023\162\024\206\025\204\026\160\027\167\030" +
    "\163\031\205\032\203\033\202\034\201\035\177\036\176" +
    "\037\175\040\174\050\161\056\140\057\146\070\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\172\023\162\024\206\025\204\026\160\027\167" +
    "\033\277\034\201\035\177\036\176\037\175\040\174\050" +
    "\161\056\140\057\146\070\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\172\023\162\024\206\025" +
    "\204\026\160\027\167\030\263\031\205\032\203\033\202" +
    "\034\201\035\177\036\176\037\175\040\174\050\161\056" +
    "\140\057\146\070\150\001\001\000\006\044\242\045\244" +
    "\001\001\000\030\006\172\023\162\024\206\025\204\026" +
    "\160\027\167\040\237\050\161\056\140\057\146\070\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\172\023\162" +
    "\024\206\025\204\026\160\027\167\032\210\033\202\034" +
    "\201\035\177\036\176\037\175\040\174\050\161\056\140" +
    "\057\146\070\150\001\001\000\002\001\001\000\040\006" +
    "\172\023\162\024\206\025\204\026\160\027\167\034\236" +
    "\035\177\036\176\037\175\040\174\050\161\056\140\057" +
    "\146\070\150\001\001\000\040\006\172\023\162\024\206" +
    "\025\204\026\160\027\167\034\235\035\177\036\176\037" +
    "\175\040\174\050\161\056\140\057\146\070\150\001\001" +
    "\000\040\006\172\023\162\024\206\025\204\026\160\027" +
    "\167\034\234\035\177\036\176\037\175\040\174\050\161" +
    "\056\140\057\146\070\150\001\001\000\040\006\172\023" +
    "\162\024\206\025\204\026\160\027\167\034\233\035\177" +
    "\036\176\037\175\040\174\050\161\056\140\057\146\070" +
    "\150\001\001\000\040\006\172\023\162\024\206\025\204" +
    "\026\160\027\167\034\232\035\177\036\176\037\175\040" +
    "\174\050\161\056\140\057\146\070\150\001\001\000\040" +
    "\006\172\023\162\024\206\025\204\026\160\027\167\034" +
    "\217\035\177\036\176\037\175\040\174\050\161\056\140" +
    "\057\146\070\150\001\001\000\002\001\001\000\036\006" +
    "\172\023\162\024\206\025\204\026\160\027\167\035\231" +
    "\036\176\037\175\040\174\050\161\056\140\057\146\070" +
    "\150\001\001\000\036\006\172\023\162\024\206\025\204" +
    "\026\160\027\167\035\222\036\176\037\175\040\174\050" +
    "\161\056\140\057\146\070\150\001\001\000\002\001\001" +
    "\000\034\006\172\023\162\024\206\025\204\026\160\027" +
    "\167\036\230\037\175\040\174\050\161\056\140\057\146" +
    "\070\150\001\001\000\034\006\172\023\162\024\206\025" +
    "\204\026\160\027\167\036\225\037\175\040\174\050\161" +
    "\056\140\057\146\070\150\001\001\000\002\001\001\000" +
    "\032\006\172\023\162\024\206\025\204\026\160\027\167" +
    "\037\227\040\174\050\161\056\140\057\146\070\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\006" +
    "\172\023\162\024\206\025\204\026\160\027\167\030\251" +
    "\031\205\032\203\033\202\034\201\035\177\036\176\037" +
    "\175\040\174\050\161\051\254\052\252\053\253\056\140" +
    "\057\146\070\150\001\001\000\004\044\250\001\001\000" +
    "\040\006\172\023\162\024\206\025\204\026\160\027\167" +
    "\034\246\035\177\036\176\037\175\040\174\050\161\056" +
    "\140\057\146\070\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\242" +
    "\045\256\001\001\000\004\044\250\001\001\000\052\006" +
    "\172\023\162\024\206\025\204\026\160\027\167\030\251" +
    "\031\205\032\203\033\202\034\201\035\177\036\176\037" +
    "\175\040\174\050\161\053\260\056\140\057\146\070\150" +
    "\001\001\000\002\001\001\000\046\006\172\023\162\024" +
    "\206\025\204\026\160\027\167\031\262\032\203\033\202" +
    "\034\201\035\177\036\176\037\175\040\174\050\161\056" +
    "\140\057\146\070\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\006\172\023\162\024\206" +
    "\025\204\026\160\027\167\030\271\031\205\032\203\033" +
    "\202\034\201\035\177\036\176\037\175\040\174\050\161" +
    "\056\140\057\146\070\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\172\023\162" +
    "\024\206\025\204\026\160\027\167\030\275\031\205\032" +
    "\203\033\202\034\201\035\177\036\176\037\175\040\174" +
    "\050\161\056\140\057\146\070\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\302\001\001\000\062\006\144\014\113\016" +
    "\303\017\147\020\153\022\154\046\125\050\114\054\120" +
    "\055\127\056\140\057\146\060\131\061\152\062\143\064" +
    "\121\070\150\073\126\074\130\075\122\076\136\105\135" +
    "\106\115\107\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\311" +
    "\056\310\001\001\000\002\001\001\000\006\044\242\045" +
    "\244\001\001\000\002\001\001\000\006\006\076\022\315" +
    "\001\001\000\004\044\250\001\001\000\002\001\001\000" +
    "\006\006\320\042\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\006\172\023\162\024\206\025\204\026" +
    "\160\027\167\030\322\031\205\032\203\033\202\034\201" +
    "\035\177\036\176\037\175\040\174\050\161\056\140\057" +
    "\146\070\150\001\001\000\002\001\001\000\004\006\324" +
    "\001\001\000\002\001\001\000\004\076\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\331\001\001" +
    "\000\062\006\144\014\113\016\332\017\147\020\153\022" +
    "\154\046\125\050\114\054\120\055\127\056\140\057\146" +
    "\060\131\061\152\062\143\064\121\070\150\073\126\074" +
    "\130\075\122\076\136\105\135\106\115\107\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\172\023\162\024\206\025\204\026\160\027\167" +
    "\030\336\031\205\032\203\033\202\034\201\035\177\036" +
    "\176\037\175\040\174\050\161\056\140\057\146\070\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\341\001\001\000\062\006\144\014\113\016\342\017\147" +
    "\020\153\022\154\046\125\050\114\054\120\055\127\056" +
    "\140\057\146\060\131\061\152\062\143\064\121\070\150" +
    "\073\126\074\130\075\122\076\136\105\135\106\115\107" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\172\023\162\024\206\025\204\026\160\027\167\030" +
    "\345\031\205\032\203\033\202\034\201\035\177\036\176" +
    "\037\175\040\174\050\161\056\140\057\146\070\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\350" +
    "\001\001\000\014\065\354\066\356\067\355\077\352\100" +
    "\353\001\001\000\050\006\172\023\162\024\206\025\204" +
    "\026\160\027\167\030\366\031\205\032\203\033\202\034" +
    "\201\035\177\036\176\037\175\040\174\050\161\056\140" +
    "\057\146\070\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\067\364" +
    "\077\363\100\353\001\001\000\002\001\001\000\004\072" +
    "\361\001\001\000\062\006\144\014\113\016\362\017\147" +
    "\020\153\022\154\046\125\050\114\054\120\055\127\056" +
    "\140\057\146\060\131\061\152\062\143\064\121\070\150" +
    "\073\126\074\130\075\122\076\136\105\135\106\115\107" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\370\001\001\000\062\006\144\014\113\016\371\017\147" +
    "\020\153\022\154\046\125\050\114\054\120\055\127\056" +
    "\140\057\146\060\131\061\152\062\143\064\121\070\150" +
    "\073\126\074\130\075\122\076\136\105\135\106\115\107" +
    "\117\001\001\000\002\001\001\000\050\006\172\023\162" +
    "\024\206\025\204\026\160\027\167\030\u0103\031\205\032" +
    "\203\033\202\034\201\035\177\036\176\037\175\040\174" +
    "\050\161\056\140\057\146\070\150\001\001\000\050\006" +
    "\172\023\162\024\206\025\204\026\160\027\167\030\u0102" +
    "\031\205\032\203\033\202\034\201\035\177\036\176\037" +
    "\175\040\174\050\161\056\140\057\146\070\150\001\001" +
    "\000\050\006\172\023\162\024\206\025\204\026\160\027" +
    "\167\030\u0101\031\205\032\203\033\202\034\201\035\177" +
    "\036\176\037\175\040\174\050\161\056\140\057\146\070" +
    "\150\001\001\000\050\006\172\023\162\024\206\025\204" +
    "\026\160\027\167\030\u0100\031\205\032\203\033\202\034" +
    "\201\035\177\036\176\037\175\040\174\050\161\056\140" +
    "\057\146\070\150\001\001\000\050\006\172\023\162\024" +
    "\206\025\204\026\160\027\167\030\377\031\205\032\203" +
    "\033\202\034\201\035\177\036\176\037\175\040\174\050" +
    "\161\056\140\057\146\070\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\172\023" +
    "\162\024\206\025\204\026\160\027\167\030\251\031\205" +
    "\032\203\033\202\034\201\035\177\036\176\037\175\040" +
    "\174\050\161\051\u0109\052\252\053\253\056\140\057\146" +
    "\070\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u010e\001\001" +
    "\000\062\006\144\014\113\016\u010f\017\147\020\153\022" +
    "\154\046\125\050\114\054\120\055\127\056\140\057\146" +
    "\060\131\061\152\062\143\064\121\070\150\073\126\074" +
    "\130\075\122\076\136\105\135\106\115\107\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\172\023\162\024\206\025\204\026\160\027\167" +
    "\030\u0113\031\205\032\203\033\202\034\201\035\177\036" +
    "\176\037\175\040\174\050\161\056\140\057\146\070\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0118\101\u0116\001\001\000\002\001\001\000\004\006\u0120" +
    "\001\001\000\002\001\001\000\050\006\172\023\162\024" +
    "\206\025\204\026\160\027\167\030\u011a\031\205\032\203" +
    "\033\202\034\201\035\177\036\176\037\175\040\174\050" +
    "\161\056\140\057\146\070\150\001\001\000\002\001\001" +
    "\000\050\006\172\023\162\024\206\025\204\026\160\027" +
    "\167\030\u011c\031\205\032\203\033\202\034\201\035\177" +
    "\036\176\037\175\040\174\050\161\056\140\057\146\070" +
    "\150\001\001\000\002\001\001\000\004\006\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\172\023\162\024\206\025\204\026\160\027\167" +
    "\030\u0122\031\205\032\203\033\202\034\201\035\177\036" +
    "\176\037\175\040\174\050\161\056\140\057\146\070\150" +
    "\001\001\000\002\001\001\000\050\006\172\023\162\024" +
    "\206\025\204\026\160\027\167\030\u0124\031\205\032\203" +
    "\033\202\034\201\035\177\036\176\037\175\040\174\050" +
    "\161\056\140\057\146\070\150\001\001\000\002\001\001" +
    "\000\004\006\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u012a\001\001\000\062" +
    "\006\144\014\113\016\u012b\017\147\020\153\022\154\046" +
    "\125\050\114\054\120\055\127\056\140\057\146\060\131" +
    "\061\152\062\143\064\121\070\150\073\126\074\130\075" +
    "\122\076\136\105\135\106\115\107\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\076\013" +
    "\100\015\u0135\022\101\043\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\u0138\001\001\000\062\006" +
    "\144\014\113\016\u0139\017\147\020\153\022\154\046\125" +
    "\050\114\054\120\055\127\056\140\057\146\060\131\061" +
    "\152\062\143\064\121\070\150\073\126\074\130\075\122" +
    "\076\136\105\135\106\115\107\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u0143\001\001" +
    "\000\026\010\054\011\u0144\012\056\021\057\041\050\047" +
    "\055\071\003\103\004\106\051\107\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	Object info = null;

	public void report_error(String message, Object info){
		// Err err = new Err(TErr.SINTACTICO,message,info);
		this.info = info;
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        Err err = new Err(TErr.SINTACTICO,message,info);
        System.err.println(err);
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // app ::= stmts 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict start_val = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // app ::= nl_list stmts 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt_list stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList<Dict>(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= imports nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("list",new ArrayList<Dict>(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // imports ::= KW_IMPORT LTHAN string BTHAN 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.IMPORT,null,null,new Dict("path",x),null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= stmt_class nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= error_lexico nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.ERROR_LEXICO,null,null,x,null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= error_sintactico nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.ERROR_SINTACTICO,null,null,x,null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_class ::= modifiers KW_CLASS id LL nl_list class_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo", new Node(TOperation.DEF_CLASS,null,null,new Dict(){{
						set("modifiers",l);
						set("name",x);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_class",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_class ::= modifiers KW_CLASS id KW_EXTENDS id LL nl_list class_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo", new Node(TOperation.DEF_CLASS,null,null,new Dict(){{
						set("modifiers",l);
						set("name",x);
						set("extends",x2);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_class",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_stmts ::= class_stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_stmt_list ::= class_stmt_list class_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_stmt_list ::= class_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("list",new ArrayList<Dict>(){{
							add(x);
						}});
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_stmt ::= class_def_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_stmt ::= def_method nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // class_stmt ::= error_lexico nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_stmt ::= error_sintactico nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // class_def_var ::= modifiers def_var 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("modifiers",l);
						RESULT = new Dict("nodo",new Node(TOperation.DEF_FIELD,null,null,x,null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_def_var",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_method ::= modifiers id PL method_params PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.DEF_CONSTRUCT,null,null,new Dict(){{
						set("modifiers",l);
						// set("type",t);
						set("name",x);
						set("params",l2);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_method",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_method ::= modifiers type id PL method_params PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,new Dict(){{
						set("modifiers",l);
						set("type",t);
						set("name",x);
						set("params",l2);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_method",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_params ::= method_param_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_params ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_param_list ::= method_param_list COMA method_param 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_param_list ::= method_param 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_param ::= type id 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("ref",new Dict("val",false));
							set("type",t);
							set("name",x);
							set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_param ::= REF type id 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("ref",new Dict("val",true));
							set("type",t);
							set("name",x);
							set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_stmts ::= method_stmt_list method_return 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.set("return",x );
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_stmts ::= method_stmt_list 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_stmts ::= method_return 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("return",x);
							set("list",new ArrayList<Dict>());
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_stmts ::= 
            {
              Dict RESULT =null;
		
						RESULT = new Dict("list",new ArrayList<Dict>());
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_return ::= KW_RETURN expr nl_list 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("expr",e);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_return",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_stmt_list ::= method_stmt_list method_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_stmt_list ::= method_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_stmt ::= method_def_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_stmt ::= method_call nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_stmt ::= set_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_stmt ::= loops nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_stmt ::= conds nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_stmt ::= KW_BREAK nl_list 
            {
              Dict RESULT =null;
		RESULT = new Dict("nodo",new Node(TOperation.BREAK,null,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_stmt ::= KW_CONTINUE nl_list 
            {
              Dict RESULT =null;
		RESULT = new Dict("nodo",new Node(TOperation.BREAK,null,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_stmt ::= error_sintactico nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_stmt ::= error_lexico nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // loops ::= loop_while 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loops",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // loops ::= loop_for 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loops",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // loop_while ::= KW_WHILE PL expr PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_WHILE,null,null,new Dict("stmts",ss,"expr",e),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_while",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // loop_while ::= KW_DO LL nl_list method_stmts LR KW_WHILE PL expr PR 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_DO_WHILE,null,null,new Dict("stmts",ss,"expr",e),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_while",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // loop_for ::= KW_FOR PL for_def PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						x.set("stmts",ss);
						RESULT = new Dict("nodo",new Node(TOperation.STMT_FOR,null,null,x,null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for_def ::= id EQUAL expr COMA expr COMA id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("var",x,"init",e,"term",e2,"increment",x2);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // for_def ::= KW_INT id EQUAL expr COMA expr COMA id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("var",x,"init",e,"term",e2,"increment",x2);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conds ::= cond_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conds",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conds ::= cond_switch 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conds",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond_switch ::= KW_SWITCH PL expr PR LL nl_list switch_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_SWITCH,null,null,new Dict("stmts",ss,"expr",e),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_switch",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond_if ::= cond_if_else_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,null,null,new Dict("if_elseif",x),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond_if ::= cond_if_else_list cond_if_else 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,null,null,new Dict("if_elseif",x,"else",x2),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // switch_stmts ::= switch_stmt_list switch_default 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.set("default",x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // switch_stmts ::= switch_stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch_stmts ::= switch_default 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("default",x,"list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch_default ::= KW_DEFAULT DPUNTOS nl_list method_stmts 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("stmts",ss);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_default",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_stmt_list ::= switch_stmt_list switch_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch_stmt_list ::= switch_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switch_stmt ::= switch_case 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // switch_case ::= KW_CASE expr DPUNTOS nl_list method_stmts 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("expr",e,"stmts",ss);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond_if_else_list ::= cond_if_else_list KW_ELSE cond_if_if 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond_if_else_list ::= cond_if_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond_if_if ::= KW_IF PL expr PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("expr",e,"stmts",ss);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_if",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond_if_else ::= KW_ELSE LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("stmts",ss);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // set_var ::= var EQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // set_var ::= var PEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // set_var ::= var MIEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // set_var ::= var MUEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // set_var ::= var DIEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("name",x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("name",x,"dimension",l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // new_obj ::= KW_NEW id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_NEW_OBJECT,null,null,new Dict("type",x,"params",l)));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_obj",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // method_call ::= method_call_obj_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // method_call ::= id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // method_call ::= id DMINUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // method_call_obj_list ::= method_call_obj_list PUNTO method_call_obj 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // method_call_obj_list ::= method_call_obj 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // method_call_obj_list ::= new_obj 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // method_call_obj_list ::= PL expr PR Q LL expr LR DPUNTOS LL expr LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e3 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Dict();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // method_call_obj_list ::= PL KW_INT PR 
            {
              Dict RESULT =null;
		RESULT = new Dict();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // method_call_obj ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // method_call_obj ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // method_call_obj ::= id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // method_call_obj ::= id PL method_call_params PR di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // method_call_params ::= method_call_param_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_params",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // method_call_params ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_params",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // method_call_param_list ::= method_call_param_list COMA method_call_param 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // method_call_param_list ::= method_call_param 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // method_call_param ::= expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // method_def_var ::= def_var 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT=new Dict("nodo",new Node(TOperation.DEF_VAR,null,null,x,null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_def_var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // def_var ::= type id_list 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("type",t);
							set("name",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // def_var ::= type id EQUAL expr 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("type",t);
							set("name",new Dict("list",new ArrayList<Dict>(){{add(x);}}));
							set("val",e);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // def_var ::= id LTHAN type BTHAN id_list 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("type",t);
							set("name",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // def_var ::= id LTHAN type BTHAN id EQUAL expr 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("type",t);
							set("name",new Dict("list",new ArrayList<Dict>(){{add(x);}}));
							set("val",e);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_var_array ::= LTHAN type BTHAN 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var_array",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_var_array ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var_array",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // modifiers ::= modifier_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifiers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // modifiers ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifiers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // modifier_list ::= modifier_list modifier 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_list",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // modifier_list ::= modifier 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							put("list",new ArrayList<Dict>(){{add(x);}});
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_list",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // modifier ::= KW_PRIVATE 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.PRIVATE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // modifier ::= KW_PUBLIC 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.PUBLIC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // modifier ::= KW_STATIC 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.STATIC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type ::= KW_INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.INT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type ::= KW_FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.FLOAT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type ::= KW_CHAR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type ::= KW_STRING 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type ::= KW_BOOL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type ::= KW_VOID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.VOID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= expr OR expr2 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.OR,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= expr2 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr2 ::= expr2 AND expr3 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.AND,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr2 ::= expr3 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr3 ::= NOT expr4 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					x.set("nodo",new Node(Sym.NOT,x.getNode("nodo"),null,info));
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr3 ::= expr4 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr4 ::= expr4 DEQUAL expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.DEQUAL,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr4 ::= expr4 NEQUAL expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.NEQUAL,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr4 ::= expr4 BTHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.BTHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr4 ::= expr4 BETHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.BETHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr4 ::= expr4 LTHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.LTHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr4 ::= expr4 LETHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.LETHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr4 ::= expr5 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr5 ::= expr5 PLUS expr6 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.PLUS,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr5 ::= expr5 MINUS expr6 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.MINUS,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr5 ::= expr6 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr6 ::= expr6 MULT expr7 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.MULT,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr6 ::= expr6 DIV expr7 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.DIV,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr6 ::= expr7 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr7 ::= expr7 EXP expr8 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.EXP,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr7 ::= expr8 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr8 ::= MINUS expr9 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					// new Node(<operacion>,<left>,<right>,<info>)  //nodos no hojas...
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					x.set("nodo",new Node(Sym.MINUS,x.getNode("nodo"),null,info));
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr8 ::= expr9 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr9 ::= int 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr9 ::= float 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr9 ::= char 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr9 ::= string 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr9 ::= bool 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr9 ::= method_call 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr9 ::= PL expr PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // id_list ::= id_list COMA id 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // id_list ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // di_list ::= di_list di 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // di_list ::= di 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // nl_list ::= nl_list NEWLINE 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nl_list",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // nl_list ::= NEWLINE 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nl_list",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // di ::= QL expr5 QR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // id ::= ID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.ID,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.ID);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // int ::= INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.INT,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.INT);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // float ::= FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.FLOAT,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.FLOAT);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // char ::= CHAR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.CHAR,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.CHAR);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // string ::= STRING 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.STRING,null,null,this));
						put("info",CUP$Parser$stack.peek());
						put("tipo",Sym.STRING);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // bool ::= BOOL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.BOOL,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.BOOL);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // error_lexico ::= ERROR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							put("nodo",new Node(TOperation.ERROR_LEXICO,null,null,this));
							put("info",(CUP$Parser$stack.peek()));
							put("tipo",Sym.ERROR);
							put("val",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_lexico",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // error_sintactico ::= error 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict(
								"nodo",new Node(TOperation.ERROR_SINTACTICO,null,null,null),
								"info",parser.info,
								"type",Sym.error
								);
						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_sintactico",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

