
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Jun 12 17:12:30 CST 2014
//----------------------------------------------------

package com.github.ceFractal.compiler.fractal;

import com.github.gg.Dict;
import com.github.gg.TOperation;
import com.github.gg.Node;
import com.github.gg.Err;
import com.github.gg.TErr;
import com.github.gg.TType;
import com.github.gg.TModifier;
import java.util.ArrayList;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Jun 12 17:12:30 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\104\003\000\002\104\002\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\005\006\000" +
    "\002\003\004\000\002\003\003\000\002\007\011\000\002" +
    "\007\013\000\002\011\003\000\002\011\002\000\002\012" +
    "\004\000\002\012\003\000\002\010\004\000\002\010\004" +
    "\000\002\047\004\000\002\041\013\000\002\041\014\000" +
    "\002\015\003\000\002\015\002\000\002\043\005\000\002" +
    "\043\003\000\002\013\004\000\002\013\005\000\002\016" +
    "\004\000\002\016\003\000\002\016\002\000\002\055\005" +
    "\000\002\017\004\000\002\017\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\060" +
    "\003\000\002\060\003\000\002\074\012\000\002\074\013" +
    "\000\002\075\012\000\002\101\012\000\002\101\013\000" +
    "\002\061\003\000\002\061\003\000\002\073\012\000\002" +
    "\064\003\000\002\064\004\000\002\065\004\000\002\065" +
    "\003\000\002\065\002\000\002\077\006\000\002\066\004" +
    "\000\002\066\003\000\002\067\003\000\002\100\007\000" +
    "\002\062\005\000\002\062\003\000\002\076\012\000\002" +
    "\063\007\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\105\003" +
    "\000\002\105\004\000\002\070\007\000\002\050\003\000" +
    "\002\050\004\000\002\050\004\000\002\057\005\000\002" +
    "\057\003\000\002\057\003\000\002\057\015\000\002\057" +
    "\005\000\002\056\003\000\002\056\004\000\002\056\006" +
    "\000\002\056\007\000\002\051\003\000\002\051\002\000" +
    "\002\052\005\000\002\052\003\000\002\053\003\000\002" +
    "\046\003\000\002\020\004\000\002\020\006\000\002\020" +
    "\007\000\002\020\011\000\002\102\005\000\002\102\002" +
    "\000\002\021\003\000\002\021\002\000\002\103\004\000" +
    "\002\103\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\030\005\000\002\030\003\000" +
    "\002\031\005\000\002\031\003\000\002\032\004\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\003\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\037" +
    "\004\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\005\000\002\042\005\000\002" +
    "\042\003\000\002\045\004\000\002\045\003\000\002\072" +
    "\004\000\002\072\003\000\002\044\005\000\002\006\003" +
    "\000\002\023\003\000\002\024\003\000\002\025\003\000" +
    "\002\026\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\022\002\ufffd\003\017\024\uff9f\025\016\026" +
    "\010\030\007\101\015\102\022\001\002\000\016\002\ufffa" +
    "\003\ufffa\024\ufffa\025\ufffa\026\ufffa\101\ufffa\001\002\000" +
    "\022\002\ufffd\003\017\024\uff9f\025\016\026\010\030\007" +
    "\101\015\102\042\001\002\000\004\002\001\001\002\000" +
    "\004\041\u0136\001\002\000\030\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\024\uff9c\025\uff9c\026\uff9c\072\uff9c\076" +
    "\uff9c\101\uff9c\001\002\000\004\102\022\001\002\000\016" +
    "\002\ufffb\003\ufffb\024\ufffb\025\ufffb\026\ufffb\101\ufffb\001" +
    "\002\000\004\002\u0134\001\002\000\030\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\024\uff9d\025\uff9d\026\uff9d\072" +
    "\uff9d\076\uff9d\101\uff9d\001\002\000\030\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\024\uff9a\025\uff9a\026\uff9a\072" +
    "\uff9a\076\uff9a\101\uff9a\001\002\000\030\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\024\uff9b\025\uff9b\026\uff9b\072" +
    "\uff9b\076\uff9b\101\uff9b\001\002\000\016\002\ufff7\003\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\101\ufff7\001\002\000\004\024" +
    "\026\001\002\000\016\002\ufffe\003\017\024\uff9f\025\016" +
    "\026\010\101\015\001\002\000\072\002\uff6f\003\uff6f\004" +
    "\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f" +
    "\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\021\uff6f\022" +
    "\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\030\uff6f\060\uff6f" +
    "\072\uff6f\075\uff6f\076\uff6f\077\uff6f\101\uff6f\102\uff6f\001" +
    "\002\000\030\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\024\uffa0\025\016\026\010\072\uffa0\076\uffa0\101\015\001" +
    "\002\000\030\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\072\uff9e\076\uff9e\101\uff9e\001" +
    "\002\000\016\002\ufffc\003\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\101\ufffc\001\002\000\004\072\027\001\002\000\102\027" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\064\uff6d\072\uff6d\074\uff6d\075\uff6d\102\uff6d\001\002" +
    "\000\006\027\031\074\032\001\002\000\004\072\027\001" +
    "\002\000\004\102\022\001\002\000\032\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\025\016\026\010\072\uff9f\075" +
    "\ufff3\076\uff9f\101\015\102\042\001\002\000\004\102\022" +
    "\001\002\000\004\075\u012d\001\002\000\004\102\022\001" +
    "\002\000\030\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\025\ufff1\026\ufff1\072\ufff1\075\ufff1\076\ufff1\101\ufff1\001" +
    "\002\000\020\004\053\005\054\006\045\007\051\010\046" +
    "\072\027\076\050\001\002\000\030\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\025\016\026\010\072\uff9f\075\ufff4" +
    "\076\uff9f\101\015\001\002\000\072\002\uff70\003\uff70\004" +
    "\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\021\uff70\022" +
    "\uff70\023\uff70\024\uff70\025\uff70\026\uff70\030\uff70\060\uff70" +
    "\072\uff70\075\uff70\076\uff70\077\uff70\101\uff70\102\uff70\001" +
    "\002\000\030\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\025\ufff2\026\ufff2\072\ufff2\075\ufff2\076\ufff2\101\ufff2\001" +
    "\002\000\010\041\uff93\060\u0125\072\uff93\001\002\000\010" +
    "\037\uff97\041\uff97\072\uff97\001\002\000\010\037\uff95\041" +
    "\uff95\072\uff95\001\002\000\004\102\uffee\001\002\000\010" +
    "\037\uff94\041\uff94\072\uff94\001\002\000\010\037\uff96\041" +
    "\uff96\072\uff96\001\002\000\006\041\055\072\027\001\002" +
    "\000\010\037\uff99\041\uff99\072\uff99\001\002\000\010\037" +
    "\uff98\041\uff98\072\uff98\001\002\000\020\004\053\005\054" +
    "\006\045\007\051\010\046\072\027\076\050\001\002\000" +
    "\006\062\u011d\102\uffa6\001\002\000\012\031\060\060\061" +
    "\062\uff73\102\uff73\001\002\000\026\011\115\046\151\052" +
    "\157\060\155\066\147\067\154\070\150\071\163\072\027" +
    "\073\153\001\002\000\024\004\053\005\054\006\045\007" +
    "\051\010\046\061\uffea\065\067\072\027\076\050\001\002" +
    "\000\004\061\075\001\002\000\006\037\uff93\072\uff93\001" +
    "\002\000\006\061\uffeb\062\073\001\002\000\006\061\uffe8" +
    "\062\uffe8\001\002\000\004\072\027\001\002\000\020\004" +
    "\053\005\054\006\045\007\051\010\046\072\027\076\050" +
    "\001\002\000\004\072\027\001\002\000\006\061\uffe6\062" +
    "\uffe6\001\002\000\006\061\uffe7\062\uffe7\001\002\000\022" +
    "\004\053\005\054\006\045\007\051\010\046\065\067\072" +
    "\027\076\050\001\002\000\006\061\uffe9\062\uffe9\001\002" +
    "\000\004\074\076\001\002\000\004\102\022\001\002\000" +
    "\050\004\053\005\054\006\045\007\051\010\046\011\115" +
    "\012\134\013\107\014\106\015\116\016\130\017\122\021" +
    "\123\060\102\072\027\075\uffe3\076\050\077\120\102\042" +
    "\001\002\000\044\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\021\uffe0\060\uffe0\072\uffe0\076\uffe0\077\uffe0\001" +
    "\002\000\004\102\022\001\002\000\030\004\250\011\115" +
    "\046\151\052\157\060\155\066\147\067\154\070\150\071" +
    "\163\072\027\073\153\001\002\000\004\102\022\001\002" +
    "\000\004\102\uffd1\001\002\000\004\102\uffd7\001\002\000" +
    "\004\060\u0100\001\002\000\004\074\370\001\002\000\004" +
    "\102\022\001\002\000\004\102\uffd0\001\002\000\010\022" +
    "\uffe4\023\uffe4\075\uffe4\001\002\000\004\102\uffd8\001\002" +
    "\000\004\102\022\001\002\000\004\072\027\001\002\000" +
    "\004\102\022\001\002\000\014\031\351\032\347\033\353" +
    "\034\352\035\350\001\002\000\026\011\115\046\151\052" +
    "\157\060\155\066\147\067\154\070\150\071\163\072\027" +
    "\073\153\001\002\000\006\020\uffc3\102\uffc3\001\002\000" +
    "\004\060\336\001\002\000\004\060\310\001\002\000\052" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\057\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\075\uffb4\102" +
    "\uffb4\001\002\000\004\075\307\001\002\000\006\020\300" +
    "\102\uffce\001\002\000\034\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\041\uff93\047\225\051\224\056\230\060\227" +
    "\064\uffb0\072\uff93\102\uffb0\001\002\000\004\102\022\001" +
    "\002\000\052\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\050\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\057\uffb8\061\uffb8\062\uffb8\063\uffb8\064\273" +
    "\075\uffb8\102\uffb8\001\002\000\044\004\053\005\054\006" +
    "\045\007\051\010\046\011\115\012\134\013\107\014\106" +
    "\015\116\016\130\017\122\021\123\060\102\072\027\076" +
    "\050\077\120\001\002\000\052\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\050\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\057\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\075\uffb3\102\uffb3\001\002\000\004\060" +
    "\142\001\002\000\004\102\022\001\002\000\004\102\uffa7" +
    "\001\002\000\006\041\055\072\027\001\002\000\010\031" +
    "\060\062\uff73\102\uff73\001\002\000\046\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\060\uffdb\072\uffdb" +
    "\076\uffdb\077\uffdb\102\042\001\002\000\026\011\115\046" +
    "\151\052\157\060\155\066\147\067\154\070\150\071\163" +
    "\072\027\073\153\001\002\000\050\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\050\uff76" +
    "\052\uff76\053\uff76\054\uff76\055\uff76\057\uff76\061\uff76\062" +
    "\uff76\063\uff76\075\uff76\102\uff76\001\002\000\050\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\050\uff78\052\uff78\053\uff78\054\uff78\055\uff78\057\uff78" +
    "\061\uff78\062\uff78\063\uff78\075\uff78\102\uff78\001\002\000" +
    "\050\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b" +
    "\044\uff7b\045\uff7b\050\uff7b\052\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\057\uff7b\061\uff7b\062\uff7b\063\uff7b\075\uff7b\102\uff7b" +
    "\001\002\000\006\045\245\061\264\001\002\000\050\036" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c" +
    "\045\uff6c\050\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\057" +
    "\uff6c\061\uff6c\062\uff6c\063\uff6c\075\uff6c\102\uff6c\001\002" +
    "\000\050\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\045\uff6a\050\uff6a\052\uff6a\053\uff6a\054\uff6a" +
    "\055\uff6a\057\uff6a\061\uff6a\062\uff6a\063\uff6a\075\uff6a\102" +
    "\uff6a\001\002\000\024\011\115\052\157\060\155\066\147" +
    "\067\154\070\150\071\163\072\027\073\153\001\002\000" +
    "\050\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\045\uff77\050\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\057\uff77\061\uff77\062\uff77\063\uff77\075\uff77\102\uff77" +
    "\001\002\000\050\036\uff69\037\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\044\uff69\045\uff69\050\uff69\052\uff69\053\uff69" +
    "\054\uff69\055\uff69\057\uff69\061\uff69\062\uff69\063\uff69\075" +
    "\uff69\102\uff69\001\002\000\050\036\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\050\uff6b\052" +
    "\uff6b\053\uff6b\054\uff6b\055\uff6b\057\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\075\uff6b\102\uff6b\001\002\000\030\004\250\011" +
    "\115\046\151\052\157\060\155\066\147\067\154\070\150" +
    "\071\163\072\027\073\153\001\002\000\062\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\047\225\050\uffb0\051\224\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\230\057\uffb0\060\227\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\075\uffb0\102\uffb0\001\002\000\022\011\115\060" +
    "\155\066\147\067\154\070\150\071\163\072\027\073\153" +
    "\001\002\000\050\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\045\uff7c\050\uff7c\052\uff7c\053\uff7c" +
    "\054\uff7c\055\uff7c\057\uff7c\061\uff7c\062\uff7c\063\uff7c\075" +
    "\uff7c\102\uff7c\001\002\000\050\036\uff7e\037\uff7e\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\050\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\057\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\075\uff7e\102\uff7e\001\002\000\050\036\uff80\037" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\050\uff80\052\uff80\053\uff80\054\uff80\055\212\057\uff80\061" +
    "\uff80\062\uff80\063\uff80\075\uff80\102\uff80\001\002\000\050" +
    "\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044" +
    "\uff68\045\uff68\050\uff68\052\uff68\053\uff68\054\uff68\055\uff68" +
    "\057\uff68\061\uff68\062\uff68\063\uff68\075\uff68\102\uff68\001" +
    "\002\000\046\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\050\uff83\052\uff83\053\207\054" +
    "\210\057\uff83\061\uff83\062\uff83\063\uff83\075\uff83\102\uff83" +
    "\001\002\000\040\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\050\204\052\205\061\uff86" +
    "\062\uff86\063\uff86\075\uff86\102\uff86\001\002\000\034\036" +
    "\177\037\202\040\176\041\175\042\200\043\201\044\uff8d" +
    "\045\uff8d\061\uff8d\062\uff8d\063\uff8d\075\uff8d\102\uff8d\001" +
    "\002\000\020\044\uff8f\045\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\075\uff8f\102\uff8f\001\002\000\050\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\050\uff79" +
    "\052\uff79\053\uff79\054\uff79\055\uff79\057\uff79\061\uff79\062" +
    "\uff79\063\uff79\075\uff79\102\uff79\001\002\000\020\044\173" +
    "\045\uff91\061\uff91\062\uff91\063\uff91\075\uff91\102\uff91\001" +
    "\002\000\050\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\050\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\057\uff7a\061\uff7a\062\uff7a\063\uff7a\075\uff7a" +
    "\102\uff7a\001\002\000\026\011\115\046\151\052\157\060" +
    "\155\066\147\067\154\070\150\071\163\072\027\073\153" +
    "\001\002\000\020\044\uff90\045\uff90\061\uff90\062\uff90\063" +
    "\uff90\075\uff90\102\uff90\001\002\000\024\011\115\052\157" +
    "\060\155\066\147\067\154\070\150\071\163\072\027\073" +
    "\153\001\002\000\024\011\115\052\157\060\155\066\147" +
    "\067\154\070\150\071\163\072\027\073\153\001\002\000" +
    "\024\011\115\052\157\060\155\066\147\067\154\070\150" +
    "\071\163\072\027\073\153\001\002\000\024\011\115\052" +
    "\157\060\155\066\147\067\154\070\150\071\163\072\027" +
    "\073\153\001\002\000\024\011\115\052\157\060\155\066" +
    "\147\067\154\070\150\071\163\072\027\073\153\001\002" +
    "\000\024\011\115\052\157\060\155\066\147\067\154\070" +
    "\150\071\163\072\027\073\153\001\002\000\040\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\050\204\052\205\061\uff8a\062\uff8a\063\uff8a\075\uff8a" +
    "\102\uff8a\001\002\000\024\011\115\052\157\060\155\066" +
    "\147\067\154\070\150\071\163\072\027\073\153\001\002" +
    "\000\024\011\115\052\157\060\155\066\147\067\154\070" +
    "\150\071\163\072\027\073\153\001\002\000\046\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\050\uff84\052\uff84\053\207\054\210\057\uff84\061\uff84" +
    "\062\uff84\063\uff84\075\uff84\102\uff84\001\002\000\024\011" +
    "\115\052\157\060\155\066\147\067\154\070\150\071\163" +
    "\072\027\073\153\001\002\000\024\011\115\052\157\060" +
    "\155\066\147\067\154\070\150\071\163\072\027\073\153" +
    "\001\002\000\050\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\050\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\212\057\uff81\061\uff81\062\uff81\063\uff81\075" +
    "\uff81\102\uff81\001\002\000\024\011\115\052\157\060\155" +
    "\066\147\067\154\070\150\071\163\072\027\073\153\001" +
    "\002\000\050\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\050\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\057\uff7f\061\uff7f\062\uff7f\063\uff7f\075\uff7f" +
    "\102\uff7f\001\002\000\050\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\044\uff82\045\uff82\050\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\212\057\uff82\061\uff82\062\uff82\063" +
    "\uff82\075\uff82\102\uff82\001\002\000\046\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\050" +
    "\uff85\052\uff85\053\207\054\210\057\uff85\061\uff85\062\uff85" +
    "\063\uff85\075\uff85\102\uff85\001\002\000\040\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\050\204\052\205\061\uff8b\062\uff8b\063\uff8b\075\uff8b\102" +
    "\uff8b\001\002\000\040\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\050\204\052\205\061" +
    "\uff87\062\uff87\063\uff87\075\uff87\102\uff87\001\002\000\040" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\050\204\052\205\061\uff8c\062\uff8c\063\uff8c" +
    "\075\uff8c\102\uff8c\001\002\000\040\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\050\204" +
    "\052\205\061\uff89\062\uff89\063\uff89\075\uff89\102\uff89\001" +
    "\002\000\040\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\050\204\052\205\061\uff88\062" +
    "\uff88\063\uff88\075\uff88\102\uff88\001\002\000\050\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\050\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\057\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\075\uff7d\102\uff7d\001\002\000" +
    "\050\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\057\uffb6\061\uffb6\062\uffb6\063\uffb6\075\uffb6\102\uffb6" +
    "\001\002\000\050\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\050\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\057\uffb7\061\uffb7\062\uffb7\063\uffb7\075" +
    "\uffb7\102\uffb7\001\002\000\066\031\uff71\032\uff71\033\uff71" +
    "\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042" +
    "\uff71\043\uff71\044\uff71\045\uff71\050\uff71\052\uff71\053\uff71" +
    "\054\uff71\055\uff71\056\uff71\057\uff71\061\uff71\062\uff71\063" +
    "\uff71\064\uff71\075\uff71\102\uff71\001\002\000\030\011\115" +
    "\046\151\052\157\060\155\061\uffab\066\147\067\154\070" +
    "\150\071\163\072\027\073\153\001\002\000\024\011\115" +
    "\052\157\060\155\066\147\067\154\070\150\071\163\072" +
    "\027\073\153\001\002\000\054\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\050\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\230\057\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\075\uffaf\102\uffaf\001\002\000" +
    "\066\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72" +
    "\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045" +
    "\uff72\050\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72" +
    "\057\uff72\061\uff72\062\uff72\063\uff72\064\uff72\075\uff72\102" +
    "\uff72\001\002\000\010\050\204\052\205\057\234\001\002" +
    "\000\066\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\050\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\075\uff6e" +
    "\102\uff6e\001\002\000\010\045\245\061\uffa8\062\uffa8\001" +
    "\002\000\006\061\uffac\062\243\001\002\000\006\061\uffa9" +
    "\062\uffa9\001\002\000\004\061\241\001\002\000\054\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\230\057\uffae\061\uffae\062\uffae\063\uffae\064\uffae\075\uffae" +
    "\102\uffae\001\002\000\054\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\050\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\230\057\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\075\uffad\102\uffad\001\002\000\026" +
    "\011\115\046\151\052\157\060\155\066\147\067\154\070" +
    "\150\071\163\072\027\073\153\001\002\000\006\061\uffaa" +
    "\062\uffaa\001\002\000\026\011\115\046\151\052\157\060" +
    "\155\066\147\067\154\070\150\071\163\072\027\073\153" +
    "\001\002\000\020\044\173\045\uff92\061\uff92\062\uff92\063" +
    "\uff92\075\uff92\102\uff92\001\002\000\006\045\245\061\252" +
    "\001\002\000\004\061\251\001\002\000\052\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\050\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\057\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\075\uffb1\102\uffb1\001\002" +
    "\000\052\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\050\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\057\uff75\061\uff75\062\uff75\063\uff75\075\uff75\100" +
    "\253\102\uff75\001\002\000\004\074\254\001\002\000\026" +
    "\011\115\046\151\052\157\060\155\066\147\067\154\070" +
    "\150\071\163\072\027\073\153\001\002\000\006\045\245" +
    "\075\256\001\002\000\004\063\257\001\002\000\004\074" +
    "\260\001\002\000\026\011\115\046\151\052\157\060\155" +
    "\066\147\067\154\070\150\071\163\072\027\073\153\001" +
    "\002\000\006\045\245\075\262\001\002\000\052\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\050\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\075\uffb2\102\uffb2\001" +
    "\002\000\034\036\177\037\202\040\176\041\175\042\200" +
    "\043\201\044\uff8e\045\uff8e\061\uff8e\062\uff8e\063\uff8e\075" +
    "\uff8e\102\uff8e\001\002\000\004\074\265\001\002\000\004" +
    "\102\022\001\002\000\050\004\053\005\054\006\045\007" +
    "\051\010\046\011\115\012\134\013\107\014\106\015\116" +
    "\016\130\017\122\021\123\060\102\072\027\075\uffe3\076" +
    "\050\077\120\102\042\001\002\000\004\075\270\001\002" +
    "\000\004\102\uffd6\001\002\000\044\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\021\uffe1\060\uffe1\072\uffe1\076" +
    "\uffe1\077\uffe1\001\002\000\010\022\uffe5\023\uffe5\075\uffe5" +
    "\001\002\000\004\072\027\001\002\000\052\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\050\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\075\uffb5\102\uffb5\001\002" +
    "\000\056\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\050\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\230\057\uffb0\060\227\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\075\uffb0\102\uffb0\001\002\000\046\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\060\uffda" +
    "\072\uffda\076\uffda\077\uffda\102\042\001\002\000\022\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\056\230\064\uffaf" +
    "\102\uffaf\001\002\000\006\017\122\074\303\001\002\000" +
    "\004\102\uffcd\001\002\000\006\020\uffc4\102\uffc4\001\002" +
    "\000\004\102\022\001\002\000\050\004\053\005\054\006" +
    "\045\007\051\010\046\011\115\012\134\013\107\014\106" +
    "\015\116\016\130\017\122\021\123\060\102\072\027\075" +
    "\uffe3\076\050\077\120\102\042\001\002\000\004\075\306" +
    "\001\002\000\004\102\uffc1\001\002\000\004\102\uffec\001" +
    "\002\000\026\011\115\046\151\052\157\060\155\066\147" +
    "\067\154\070\150\071\163\072\027\073\153\001\002\000" +
    "\006\045\245\061\312\001\002\000\004\074\313\001\002" +
    "\000\004\102\022\001\002\000\012\022\315\023\323\075" +
    "\uffca\102\042\001\002\000\026\011\115\046\151\052\157" +
    "\060\155\066\147\067\154\070\150\071\163\072\027\073" +
    "\153\001\002\000\004\075\uffcb\001\002\000\006\022\uffc6" +
    "\023\uffc6\001\002\000\004\075\331\001\002\000\006\022" +
    "\uffc7\023\uffc7\001\002\000\006\022\315\023\323\001\002" +
    "\000\004\063\324\001\002\000\004\102\022\001\002\000" +
    "\050\004\053\005\054\006\045\007\051\010\046\011\115" +
    "\012\134\013\107\014\106\015\116\016\130\017\122\021" +
    "\123\060\102\072\027\075\uffe3\076\050\077\120\102\042" +
    "\001\002\000\004\075\uffc9\001\002\000\004\075\uffcc\001" +
    "\002\000\006\022\uffc8\023\uffc8\001\002\000\004\102\uffcf" +
    "\001\002\000\006\045\245\063\333\001\002\000\004\102" +
    "\022\001\002\000\052\004\053\005\054\006\045\007\051" +
    "\010\046\011\115\012\134\013\107\014\106\015\116\016" +
    "\130\017\122\021\123\022\uffe3\023\uffe3\060\102\072\027" +
    "\076\050\077\120\102\042\001\002\000\006\022\uffc5\023" +
    "\uffc5\001\002\000\026\011\115\046\151\052\157\060\155" +
    "\066\147\067\154\070\150\071\163\072\027\073\153\001" +
    "\002\000\006\045\245\061\340\001\002\000\004\074\341" +
    "\001\002\000\004\102\022\001\002\000\050\004\053\005" +
    "\054\006\045\007\051\010\046\011\115\012\134\013\107" +
    "\014\106\015\116\016\130\017\122\021\123\060\102\072" +
    "\027\075\uffe3\076\050\077\120\102\042\001\002\000\004" +
    "\075\344\001\002\000\006\020\uffc2\102\uffc2\001\002\000" +
    "\006\045\245\102\022\001\002\000\012\022\uffe2\023\uffe2" +
    "\075\uffe2\102\042\001\002\000\026\011\115\046\151\052" +
    "\157\060\155\066\147\067\154\070\150\071\163\072\027" +
    "\073\153\001\002\000\026\011\115\046\151\052\157\060" +
    "\155\066\147\067\154\070\150\071\163\072\027\073\153" +
    "\001\002\000\026\011\115\046\151\052\157\060\155\066" +
    "\147\067\154\070\150\071\163\072\027\073\153\001\002" +
    "\000\026\011\115\046\151\052\157\060\155\066\147\067" +
    "\154\070\150\071\163\072\027\073\153\001\002\000\026" +
    "\011\115\046\151\052\157\060\155\066\147\067\154\070" +
    "\150\071\163\072\027\073\153\001\002\000\006\045\245" +
    "\102\uffbe\001\002\000\006\045\245\102\uffbd\001\002\000" +
    "\006\045\245\102\uffc0\001\002\000\006\045\245\102\uffbc" +
    "\001\002\000\006\045\245\102\uffbf\001\002\000\046\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\060" +
    "\uffd9\072\uffd9\076\uffd9\077\uffd9\102\042\001\002\000\004" +
    "\060\363\001\002\000\030\011\115\046\151\052\157\060" +
    "\155\061\uffab\066\147\067\154\070\150\071\163\072\027" +
    "\073\153\001\002\000\004\061\365\001\002\000\052\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\050\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\075\uffb9\102\uffb9" +
    "\001\002\000\046\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\021\uffdc\060\uffdc\072\uffdc\076\uffdc\077\uffdc\102" +
    "\042\001\002\000\046\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\021\uffdf\060\uffdf\072\uffdf\076\uffdf\077\uffdf" +
    "\102\042\001\002\000\004\102\022\001\002\000\050\004" +
    "\053\005\054\006\045\007\051\010\046\011\115\012\134" +
    "\013\107\014\106\015\116\016\130\017\122\021\123\060" +
    "\102\072\027\075\uffe3\076\050\077\120\102\042\001\002" +
    "\000\004\075\373\001\002\000\004\012\374\001\002\000" +
    "\004\060\375\001\002\000\026\011\115\046\151\052\157" +
    "\060\155\066\147\067\154\070\150\071\163\072\027\073" +
    "\153\001\002\000\006\045\245\061\377\001\002\000\004" +
    "\102\uffd5\001\002\000\006\004\u0102\072\027\001\002\000" +
    "\004\061\u0113\001\002\000\004\072\027\001\002\000\004" +
    "\031\u0104\001\002\000\026\011\115\046\151\052\157\060" +
    "\155\066\147\067\154\070\150\071\163\072\027\073\153" +
    "\001\002\000\006\045\245\062\u0106\001\002\000\026\011" +
    "\115\046\151\052\157\060\155\066\147\067\154\070\150" +
    "\071\163\072\027\073\153\001\002\000\006\045\245\062" +
    "\u0108\001\002\000\004\072\027\001\002\000\004\047\u010a" +
    "\001\002\000\004\061\uffd3\001\002\000\004\031\u010c\001" +
    "\002\000\026\011\115\046\151\052\157\060\155\066\147" +
    "\067\154\070\150\071\163\072\027\073\153\001\002\000" +
    "\006\045\245\062\u010e\001\002\000\026\011\115\046\151" +
    "\052\157\060\155\066\147\067\154\070\150\071\163\072" +
    "\027\073\153\001\002\000\006\045\245\062\u0110\001\002" +
    "\000\004\072\027\001\002\000\004\047\u0112\001\002\000" +
    "\004\061\uffd2\001\002\000\004\074\u0114\001\002\000\004" +
    "\102\022\001\002\000\050\004\053\005\054\006\045\007" +
    "\051\010\046\011\115\012\134\013\107\014\106\015\116" +
    "\016\130\017\122\021\123\060\102\072\027\075\uffe3\076" +
    "\050\077\120\102\042\001\002\000\004\075\u0117\001\002" +
    "\000\004\102\uffd4\001\002\000\046\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\021\uffdd\060\uffdd\072\uffdd\076" +
    "\uffdd\077\uffdd\102\042\001\002\000\006\045\245\061\u011a" +
    "\001\002\000\004\100\253\001\002\000\046\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\060\uffde\072" +
    "\uffde\076\uffde\077\uffde\102\042\001\002\000\006\045\245" +
    "\102\uffa5\001\002\000\004\072\027\001\002\000\006\062" +
    "\uff74\102\uff74\001\002\000\004\037\u0120\001\002\000\004" +
    "\072\027\001\002\000\006\062\u011d\102\uffa4\001\002\000" +
    "\010\031\u0123\062\uff73\102\uff73\001\002\000\026\011\115" +
    "\046\151\052\157\060\155\066\147\067\154\070\150\071" +
    "\163\072\027\073\153\001\002\000\006\045\245\102\uffa3" +
    "\001\002\000\024\004\053\005\054\006\045\007\051\010" +
    "\046\061\uffea\065\067\072\027\076\050\001\002\000\004" +
    "\061\u0127\001\002\000\004\074\u0128\001\002\000\004\102" +
    "\022\001\002\000\050\004\053\005\054\006\045\007\051" +
    "\010\046\011\115\012\134\013\107\014\106\015\116\016" +
    "\130\017\122\021\123\060\102\072\027\075\uffe3\076\050" +
    "\077\120\102\042\001\002\000\004\075\u012b\001\002\000" +
    "\004\102\uffed\001\002\000\032\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\025\ufff0\026\ufff0\072\ufff0\075\ufff0\076" +
    "\ufff0\101\ufff0\102\042\001\002\000\004\102\ufff6\001\002" +
    "\000\032\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\025" +
    "\uffef\026\uffef\072\uffef\075\uffef\076\uffef\101\uffef\102\042" +
    "\001\002\000\004\074\u0130\001\002\000\004\102\022\001" +
    "\002\000\032\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\025\016\026\010\072\uff9f\075\ufff3\076\uff9f\101\015\102" +
    "\042\001\002\000\004\075\u0133\001\002\000\004\102\ufff5" +
    "\001\002\000\004\002\000\001\002\000\020\002\ufff8\003" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\101\ufff8\102\042\001\002" +
    "\000\004\073\153\001\002\000\004\037\u0138\001\002\000" +
    "\016\002\ufff9\003\ufff9\024\ufff9\025\ufff9\026\ufff9\101\ufff9" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\026\002\012\003\011\004\020\005\003\007" +
    "\010\021\017\071\013\072\004\103\022\104\005\001\001" +
    "\000\002\001\001\000\022\003\011\004\020\005\003\007" +
    "\010\021\017\071\013\103\022\104\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\u0134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\024\007\010\021\017" +
    "\071\013\103\022\001\001\000\002\001\001\000\004\071" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u012e\001\001\000\004\072\032\001\001\000\022" +
    "\010\036\011\034\012\040\021\037\041\033\047\035\071" +
    "\013\103\022\001\001\000\004\072\u012d\001\001\000\002" +
    "\001\001\000\004\072\u012b\001\001\000\002\001\001\000" +
    "\010\006\043\020\046\022\051\001\001\000\016\010\042" +
    "\021\037\041\033\047\035\071\013\103\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\056\042\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\062\022" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\155\023\144\024\171\025\167\026\143\027\151\030" +
    "\u011b\031\170\032\166\033\165\034\164\035\163\036\161" +
    "\037\160\040\157\050\142\056\123\057\130\070\132\001" +
    "\001\000\014\006\062\013\064\015\061\022\065\043\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\071\001\001\000\006" +
    "\006\062\022\067\001\001\000\004\006\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\062\013\073" +
    "\022\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\076\001\001\000\056\006\126\014\077\016\124" +
    "\017\131\020\135\022\136\046\107\050\100\054\102\055" +
    "\111\056\123\057\130\060\113\061\134\062\125\064\103" +
    "\070\132\073\110\074\112\075\104\076\120\105\116\001" +
    "\001\000\002\001\001\000\004\072\u011a\001\001\000\050" +
    "\006\155\023\144\024\171\025\167\026\143\027\151\030" +
    "\u0118\031\170\032\166\033\165\034\164\035\163\036\161" +
    "\037\160\040\157\050\142\056\123\057\130\070\132\001" +
    "\001\000\004\072\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\365\001\001\000\004\006\361\001" +
    "\001\000\004\072\360\001\001\000\002\001\001\000\050" +
    "\006\155\023\144\024\171\025\167\026\143\027\151\030" +
    "\344\031\170\032\166\033\165\034\164\035\163\036\161" +
    "\037\160\040\157\050\142\056\123\057\130\070\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\300\001" +
    "\001\000\006\044\225\045\276\001\001\000\004\072\275" +
    "\001\001\000\002\001\001\000\052\006\126\014\270\020" +
    "\135\022\136\046\107\050\100\054\102\055\271\056\123" +
    "\057\130\060\113\061\134\062\125\064\103\070\132\073" +
    "\110\074\112\075\104\076\120\105\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\140\001\001\000" +
    "\002\001\001\000\006\006\137\042\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\155\023\144\024" +
    "\171\025\167\026\143\027\151\030\145\031\170\032\166" +
    "\033\165\034\164\035\163\036\161\037\160\040\157\050" +
    "\142\056\123\057\130\070\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\155\023\144" +
    "\024\171\025\167\026\143\027\151\033\262\034\164\035" +
    "\163\036\161\037\160\040\157\050\142\056\123\057\130" +
    "\070\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\006\155\023\144\024\171\025\167" +
    "\026\143\027\151\030\246\031\170\032\166\033\165\034" +
    "\164\035\163\036\161\037\160\040\157\050\142\056\123" +
    "\057\130\070\132\001\001\000\006\044\225\045\230\001" +
    "\001\000\030\006\155\023\144\024\171\025\167\026\143" +
    "\027\151\040\222\050\142\056\123\057\130\070\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\006\155\023\144\024" +
    "\171\025\167\026\143\027\151\032\173\033\165\034\164" +
    "\035\163\036\161\037\160\040\157\050\142\056\123\057" +
    "\130\070\132\001\001\000\002\001\001\000\040\006\155" +
    "\023\144\024\171\025\167\026\143\027\151\034\221\035" +
    "\163\036\161\037\160\040\157\050\142\056\123\057\130" +
    "\070\132\001\001\000\040\006\155\023\144\024\171\025" +
    "\167\026\143\027\151\034\220\035\163\036\161\037\160" +
    "\040\157\050\142\056\123\057\130\070\132\001\001\000" +
    "\040\006\155\023\144\024\171\025\167\026\143\027\151" +
    "\034\217\035\163\036\161\037\160\040\157\050\142\056" +
    "\123\057\130\070\132\001\001\000\040\006\155\023\144" +
    "\024\171\025\167\026\143\027\151\034\216\035\163\036" +
    "\161\037\160\040\157\050\142\056\123\057\130\070\132" +
    "\001\001\000\040\006\155\023\144\024\171\025\167\026" +
    "\143\027\151\034\215\035\163\036\161\037\160\040\157" +
    "\050\142\056\123\057\130\070\132\001\001\000\040\006" +
    "\155\023\144\024\171\025\167\026\143\027\151\034\202" +
    "\035\163\036\161\037\160\040\157\050\142\056\123\057" +
    "\130\070\132\001\001\000\002\001\001\000\036\006\155" +
    "\023\144\024\171\025\167\026\143\027\151\035\214\036" +
    "\161\037\160\040\157\050\142\056\123\057\130\070\132" +
    "\001\001\000\036\006\155\023\144\024\171\025\167\026" +
    "\143\027\151\035\205\036\161\037\160\040\157\050\142" +
    "\056\123\057\130\070\132\001\001\000\002\001\001\000" +
    "\034\006\155\023\144\024\171\025\167\026\143\027\151" +
    "\036\213\037\160\040\157\050\142\056\123\057\130\070" +
    "\132\001\001\000\034\006\155\023\144\024\171\025\167" +
    "\026\143\027\151\036\210\037\160\040\157\050\142\056" +
    "\123\057\130\070\132\001\001\000\002\001\001\000\032" +
    "\006\155\023\144\024\171\025\167\026\143\027\151\037" +
    "\212\040\157\050\142\056\123\057\130\070\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\155" +
    "\023\144\024\171\025\167\026\143\027\151\030\234\031" +
    "\170\032\166\033\165\034\164\035\163\036\161\037\160" +
    "\040\157\050\142\051\237\052\235\053\236\056\123\057" +
    "\130\070\132\001\001\000\040\006\155\023\144\024\171" +
    "\025\167\026\143\027\151\034\232\035\163\036\161\037" +
    "\160\040\157\050\142\056\123\057\130\070\132\001\001" +
    "\000\004\044\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\225\045" +
    "\241\001\001\000\004\044\231\001\001\000\052\006\155" +
    "\023\144\024\171\025\167\026\143\027\151\030\234\031" +
    "\170\032\166\033\165\034\164\035\163\036\161\037\160" +
    "\040\157\050\142\053\243\056\123\057\130\070\132\001" +
    "\001\000\002\001\001\000\046\006\155\023\144\024\171" +
    "\025\167\026\143\027\151\031\245\032\166\033\165\034" +
    "\164\035\163\036\161\037\160\040\157\050\142\056\123" +
    "\057\130\070\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\155\023\144\024\171\025" +
    "\167\026\143\027\151\030\254\031\170\032\166\033\165" +
    "\034\164\035\163\036\161\037\160\040\157\050\142\056" +
    "\123\057\130\070\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\155\023\144\024" +
    "\171\025\167\026\143\027\151\030\260\031\170\032\166" +
    "\033\165\034\164\035\163\036\161\037\160\040\157\050" +
    "\142\056\123\057\130\070\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\265\001\001\000\056\006\126\014\077\016\266" +
    "\017\131\020\135\022\136\046\107\050\100\054\102\055" +
    "\111\056\123\057\130\060\113\061\134\062\125\064\103" +
    "\070\132\073\110\074\112\075\104\076\120\105\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\274\056\273\001\001\000" +
    "\002\001\001\000\006\044\225\045\230\001\001\000\002" +
    "\001\001\000\004\044\231\001\001\000\004\076\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\303" +
    "\001\001\000\056\006\126\014\077\016\304\017\131\020" +
    "\135\022\136\046\107\050\100\054\102\055\111\056\123" +
    "\057\130\060\113\061\134\062\125\064\103\070\132\073" +
    "\110\074\112\075\104\076\120\105\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\155\023\144\024\171\025\167\026\143\027\151\030\310" +
    "\031\170\032\166\033\165\034\164\035\163\036\161\037" +
    "\160\040\157\050\142\056\123\057\130\070\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\313\001" +
    "\001\000\014\065\317\066\321\067\320\077\315\100\316" +
    "\001\001\000\050\006\155\023\144\024\171\025\167\026" +
    "\143\027\151\030\331\031\170\032\166\033\165\034\164" +
    "\035\163\036\161\037\160\040\157\050\142\056\123\057" +
    "\130\070\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\067\327\077" +
    "\326\100\316\001\001\000\002\001\001\000\004\072\324" +
    "\001\001\000\056\006\126\014\077\016\325\017\131\020" +
    "\135\022\136\046\107\050\100\054\102\055\111\056\123" +
    "\057\130\060\113\061\134\062\125\064\103\070\132\073" +
    "\110\074\112\075\104\076\120\105\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\333\001\001\000\056" +
    "\006\126\014\077\016\334\017\131\020\135\022\136\046" +
    "\107\050\100\054\102\055\111\056\123\057\130\060\113" +
    "\061\134\062\125\064\103\070\132\073\110\074\112\075" +
    "\104\076\120\105\116\001\001\000\002\001\001\000\050" +
    "\006\155\023\144\024\171\025\167\026\143\027\151\030" +
    "\336\031\170\032\166\033\165\034\164\035\163\036\161" +
    "\037\160\040\157\050\142\056\123\057\130\070\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\341" +
    "\001\001\000\056\006\126\014\077\016\342\017\131\020" +
    "\135\022\136\046\107\050\100\054\102\055\111\056\123" +
    "\057\130\060\113\061\134\062\125\064\103\070\132\073" +
    "\110\074\112\075\104\076\120\105\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\345\001\001\000" +
    "\002\001\001\000\050\006\155\023\144\024\171\025\167" +
    "\026\143\027\151\030\357\031\170\032\166\033\165\034" +
    "\164\035\163\036\161\037\160\040\157\050\142\056\123" +
    "\057\130\070\132\001\001\000\050\006\155\023\144\024" +
    "\171\025\167\026\143\027\151\030\356\031\170\032\166" +
    "\033\165\034\164\035\163\036\161\037\160\040\157\050" +
    "\142\056\123\057\130\070\132\001\001\000\050\006\155" +
    "\023\144\024\171\025\167\026\143\027\151\030\355\031" +
    "\170\032\166\033\165\034\164\035\163\036\161\037\160" +
    "\040\157\050\142\056\123\057\130\070\132\001\001\000" +
    "\050\006\155\023\144\024\171\025\167\026\143\027\151" +
    "\030\354\031\170\032\166\033\165\034\164\035\163\036" +
    "\161\037\160\040\157\050\142\056\123\057\130\070\132" +
    "\001\001\000\050\006\155\023\144\024\171\025\167\026" +
    "\143\027\151\030\353\031\170\032\166\033\165\034\164" +
    "\035\163\036\161\037\160\040\157\050\142\056\123\057" +
    "\130\070\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\006\155\023\144" +
    "\024\171\025\167\026\143\027\151\030\234\031\170\032" +
    "\166\033\165\034\164\035\163\036\161\037\160\040\157" +
    "\050\142\051\363\052\235\053\236\056\123\057\130\070" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\370\001\001\000" +
    "\056\006\126\014\077\016\371\017\131\020\135\022\136" +
    "\046\107\050\100\054\102\055\111\056\123\057\130\060" +
    "\113\061\134\062\125\064\103\070\132\073\110\074\112" +
    "\075\104\076\120\105\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\155\023\144" +
    "\024\171\025\167\026\143\027\151\030\375\031\170\032" +
    "\166\033\165\034\164\035\163\036\161\037\160\040\157" +
    "\050\142\056\123\057\130\070\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0102\101\u0100\001\001" +
    "\000\002\001\001\000\004\006\u010a\001\001\000\002\001" +
    "\001\000\050\006\155\023\144\024\171\025\167\026\143" +
    "\027\151\030\u0104\031\170\032\166\033\165\034\164\035" +
    "\163\036\161\037\160\040\157\050\142\056\123\057\130" +
    "\070\132\001\001\000\002\001\001\000\050\006\155\023" +
    "\144\024\171\025\167\026\143\027\151\030\u0106\031\170" +
    "\032\166\033\165\034\164\035\163\036\161\037\160\040" +
    "\157\050\142\056\123\057\130\070\132\001\001\000\002" +
    "\001\001\000\004\006\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\155\023\144" +
    "\024\171\025\167\026\143\027\151\030\u010c\031\170\032" +
    "\166\033\165\034\164\035\163\036\161\037\160\040\157" +
    "\050\142\056\123\057\130\070\132\001\001\000\002\001" +
    "\001\000\050\006\155\023\144\024\171\025\167\026\143" +
    "\027\151\030\u010e\031\170\032\166\033\165\034\164\035" +
    "\163\036\161\037\160\040\157\050\142\056\123\057\130" +
    "\070\132\001\001\000\002\001\001\000\004\006\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\u0114\001\001\000\056\006\126\014\077\016" +
    "\u0115\017\131\020\135\022\136\046\107\050\100\054\102" +
    "\055\111\056\123\057\130\060\113\061\134\062\125\064" +
    "\103\070\132\073\110\074\112\075\104\076\120\105\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0121\042\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\155\023" +
    "\144\024\171\025\167\026\143\027\151\030\u0123\031\170" +
    "\032\166\033\165\034\164\035\163\036\161\037\160\040" +
    "\157\050\142\056\123\057\130\070\132\001\001\000\002" +
    "\001\001\000\014\006\062\013\064\015\u0125\022\065\043" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\u0128\001\001\000\056\006\126\014\077\016\u0129\017" +
    "\131\020\135\022\136\046\107\050\100\054\102\055\111" +
    "\056\123\057\130\060\113\061\134\062\125\064\103\070" +
    "\132\073\110\074\112\075\104\076\120\105\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\u0130\001\001\000\022\010\036\011\u0131\012\040\021" +
    "\037\041\033\047\035\071\013\103\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	public void report_error(String message, Object info){
		Err err = new Err(TErr.SINTACTICO,message,info);
        System.err.println(err);
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // app ::= stmts 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict start_val = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // app ::= nl_list stmts 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt_list stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList<Dict>(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= imports 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList<Dict>(){{
						add(x);
					}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // imports ::= KW_IMPORT LTHAN string BTHAN 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.IMPORT,null,null,x,null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= stmt_class nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= error 
            {
              Dict RESULT =null;
		RESULT = new Dict();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_class ::= modifiers KW_CLASS id LL nl_list class_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo", new Node(TOperation.DEF_CLASS,null,null,new Dict(){{
						set("modifiers",l);
						set("name",x);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_class",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_class ::= modifiers KW_CLASS id KW_EXTENDS id LL nl_list class_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo", new Node(TOperation.DEF_CLASS,null,null,new Dict(){{
						set("modifiers",l);
						set("name",x);
						set("extends",x2);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_class",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_stmts ::= class_stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_stmt_list ::= class_stmt_list class_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_stmt_list ::= class_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("list",new ArrayList<Dict>(){{
							add(x);
						}});
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_stmt ::= class_def_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_stmt ::= def_method nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_def_var ::= modifiers def_var 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("modifiers",l);
						RESULT = new Dict("nodo",new Node(TOperation.DEF_VAR,null,null,x,null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_def_var",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_method ::= modifiers id PL method_params PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,new Dict(){{
						set("modifiers",l);
						// set("type",t);
						set("name",x);
						set("params",l2);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_method",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_method ::= modifiers type id PL method_params PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,new Dict(){{
						set("modifiers",l);
						set("type",t);
						set("name",x);
						set("params",l2);
						set("stmts",ss);
					}},null));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_method",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_params ::= method_param_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_params ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_param_list ::= method_param_list COMA method_param 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_param_list ::= method_param 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_param ::= type id 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("ref",true);
							set("type",t);
							set("name",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_param ::= REF type id 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("ref",true);
							set("type",t);
							set("name",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_stmts ::= method_stmt_list method_return 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.set("return",x );
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_stmts ::= method_return 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("return",x);
							set("list",new ArrayList<Dict>());
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_stmts ::= 
            {
              Dict RESULT =null;
		
						RESULT = new Dict("list",new ArrayList<Dict>());
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_return ::= KW_RETURN expr nl_list 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("expr",e);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_return",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_stmt_list ::= method_stmt_list method_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_stmt_list ::= method_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_stmt ::= method_def_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_stmt ::= method_call nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_stmt ::= set_var nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_stmt ::= loops nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_stmt ::= conds nl_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_stmt ::= KW_BREAK nl_list 
            {
              Dict RESULT =null;
		RESULT = new Dict("nodo",new Node(TOperation.BREAK,null,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_stmt ::= KW_CONTINUE nl_list 
            {
              Dict RESULT =null;
		RESULT = new Dict("nodo",new Node(TOperation.BREAK,null,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // loops ::= loop_while 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loops",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loops ::= loop_for 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loops",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // loop_while ::= KW_WHILE PL expr PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_WHILE,null,null,new Dict("stmts",ss,"expr",e),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_while",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // loop_while ::= KW_DO LL nl_list method_stmts LR KW_WHILE PL expr PR 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_DO_WHILE,null,null,new Dict("stmts",ss,"expr",e),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_while",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // loop_for ::= KW_FOR PL for_def PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						x.set("stmts",ss);
						RESULT = new Dict("nodo",new Node(TOperation.STMT_FOR,null,null,x,null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_def ::= id EQUAL expr COMA expr COMA id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("var",x,"init",e,"term",e2,"increment",x2);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_def ::= KW_INT id EQUAL expr COMA expr COMA id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("var",x,"init",e,"term",e2,"increment",x2);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conds ::= cond_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conds",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conds ::= cond_switch 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conds",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond_switch ::= KW_SWITCH PL expr PR LL nl_list switch_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_SWITCH,null,null,new Dict("stmts",ss,"expr",e),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_switch",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond_if ::= cond_if_else_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,null,null,new Dict("if_elseif",x),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond_if ::= cond_if_else_list cond_if_else 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,null,null,new Dict("if_elseif",x,"else",x2),null));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // switch_stmts ::= switch_stmt_list switch_default 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.set("default",x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switch_stmts ::= switch_default 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("default",x,"list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switch_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmts",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // switch_default ::= KW_DEFAULT DPUNTOS nl_list method_stmts 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("stmts",ss);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_default",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // switch_stmt_list ::= switch_stmt_list switch_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // switch_stmt_list ::= switch_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // switch_stmt ::= switch_case 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // switch_case ::= KW_CASE expr DPUNTOS nl_list method_stmts 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict("expr",e,"stmts",ss);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond_if_else_list ::= cond_if_else_list KW_ELSE cond_if_if 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							l.getDictArrayList("list").add(x);
							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond_if_else_list ::= cond_if_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Dict("list",new ArrayList<Dict>(){{
								add(x);
							}});
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond_if_if ::= KW_IF PL expr PR LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("expr",e,"stmts",ss);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_if",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond_if_else ::= KW_ELSE LL nl_list method_stmts LR 
            {
              Dict RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("stmts",ss);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_if_else",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // set_var ::= var EQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // set_var ::= var PEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // set_var ::= var MIEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // set_var ::= var MUEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // set_var ::= var DIEQUAL expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,new Dict("var",x,"expr",e),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_var",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("name",x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("name",x,"dimension",l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // new_obj ::= KW_NEW id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.STMT_NEW_OBJECT,null,null,new Dict("type",x,"params",l)));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_obj",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // method_call ::= method_call_obj_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // method_call ::= id DPLUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // method_call ::= id DMINUS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // method_call_obj_list ::= method_call_obj_list PUNTO method_call_obj 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // method_call_obj_list ::= method_call_obj 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // method_call_obj_list ::= new_obj 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // method_call_obj_list ::= PL expr PR Q LL expr LR DPUNTOS LL expr LR 
            {
              Dict RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict e2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict e3 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // method_call_obj_list ::= PL KW_INT PR 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // method_call_obj ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // method_call_obj ::= id di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // method_call_obj ::= id PL method_call_params PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // method_call_obj ::= id PL method_call_params PR di_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_obj",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // method_call_params ::= method_call_param_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_params",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // method_call_params ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_params",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // method_call_param_list ::= method_call_param_list COMA method_call_param 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // method_call_param_list ::= method_call_param 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // method_call_param ::= expr 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call_param",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // method_def_var ::= def_var 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_def_var",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // def_var ::= type id_list 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("tipo",t);
							set("var",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // def_var ::= type id EQUAL expr 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("tipo",t);
							set("var",x);
							set("expr",e);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // def_var ::= type LTHAN type BTHAN id_list 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict t2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("tipo",t);
							set("tipo2",t2);
							set("var",x);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // def_var ::= type LTHAN type BTHAN id EQUAL expr 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Dict t2 = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict e = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							set("tipo",t);
							set("tipo2",t2);
							set("var",x);
							set("expr",e);
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // def_var_array ::= LTHAN type BTHAN 
            {
              Dict RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict t = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var_array",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // def_var_array ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_var_array",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // modifiers ::= modifier_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifiers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // modifiers ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<Dict>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifiers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // modifier_list ::= modifier_list modifier 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getDictArrayList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_list",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // modifier_list ::= modifier 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new Dict(){{
							put("list",new ArrayList<Dict>(){{add(x);}});
						}};
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_list",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // modifier ::= KW_PRIVATE 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.PRIVATE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // modifier ::= KW_PUBLIC 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.PUBLIC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // modifier ::= KW_STATIC 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TModifier.STATIC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= KW_INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.INT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type ::= KW_FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.FLOAT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type ::= KW_CHAR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type ::= KW_STRING 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type ::= KW_BOOL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type ::= KW_VOID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",TType.VOID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("val",x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= expr OR expr2 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.OR,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= expr2 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr2 ::= expr2 AND expr3 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.AND,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr2 ::= expr3 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr3 ::= NOT expr4 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					x.set("nodo",new Node(Sym.NOT,x.getNode("nodo"),null,info));
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr3 ::= expr4 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr4 ::= expr4 DEQUAL expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.DEQUAL,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr4 ::= expr4 NEQUAL expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.NEQUAL,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr4 ::= expr4 BTHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.BTHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr4 ::= expr4 BETHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.BETHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr4 ::= expr4 LTHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.LTHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr4 ::= expr4 LETHAN expr5 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.LETHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr4 ::= expr5 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr5 ::= expr5 PLUS expr6 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.PLUS,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr5 ::= expr5 MINUS expr6 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.MINUS,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr5 ::= expr6 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr6 ::= expr6 MULT expr7 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.MULT,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr6 ::= expr6 DIV expr7 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.DIV,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr6 ::= expr7 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr7 ::= expr7 EXP expr8 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.EXP,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr7 ::= expr8 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr8 ::= MINUS expr9 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					// new Node(<operacion>,<left>,<right>,<info>)  //nodos no hojas...
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					x.set("nodo",new Node(Sym.MINUS,x.getNode("nodo"),null,info));
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr8 ::= expr9 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr9 ::= int 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr9 ::= float 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr9 ::= char 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr9 ::= string 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr9 ::= bool 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr9 ::= method_call 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr9 ::= PL expr PR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // id_list ::= id_list COMA id 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // id_list ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // di_list ::= di_list di 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // di_list ::= di 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // nl_list ::= nl_list NEWLINE 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nl_list",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // nl_list ::= NEWLINE 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nl_list",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // di ::= QL expr5 QR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("di",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // id ::= ID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.ID,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.ID);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // int ::= INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.INT,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.INT);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // float ::= FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.FLOAT,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.FLOAT);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // char ::= CHAR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.CHAR,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.CHAR);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // string ::= STRING 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.STRING,null,null,this));
						put("info",CUP$Parser$stack.peek());
						put("tipo",Sym.STRING);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bool ::= BOOL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.BOOL,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.BOOL);
						put("val",x);
					}};
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

