package com.github.ceFractal.compiler.fractal;

import com.github.gg.Dict;
import com.github.gg.TOperation;
import com.github.gg.Node;
import com.github.gg.Err;
import com.github.gg.TErr;
import com.github.gg.TType;
import com.github.gg.TModifier;
import java.util.ArrayList;

//===============================================================================================//
//===============================================================================================//

parser code{:
	Object info = null;

	public void report_error(String message, Object info){
		// Err err = new Err(TErr.SINTACTICO,message,info);
		this.info = info;
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        Err err = new Err(TErr.SINTACTICO,message,info);
        System.err.println(err);
    }
:}

action code{::}
   
//===============================================================================================//
//===============================================================================================//
terminal        String 		KW_INT,KW_FLOAT,KW_CHAR,KW_STRING,KW_BOOL,KW_NEW,KW_WHILE,KW_DO,
							KW_FOR,KW_CONTINUE,KW_BREAK,KW_IF,KW_ELSE,KW_SWITCH,KW_CASE,KW_DEFAULT,KW_CLASS,
							KW_PUBLIC,KW_PRIVATE,KW_EXTENDS,KW_IMPORT,EQUAL,PEQUAL,MIEQUAL,MUEQUAL,DIEQUAL,
							DEQUAL,BTHAN,BETHAN,LTHAN,LETHAN,NEQUAL,AND,OR,NOT,DPLUS,PLUS,DMINUS,MINUS,MULT,
							DIV,EXP,QL,QR,PL,PR,COMA,DPUNTOS,PUNTO,REF,INT,FLOAT,CHAR,BOOL,
							ID,STRING,LL,LR,KW_VOID,KW_RETURN,Q,KW_STATIC,NEWLINE,ERROR,KW_ARRAY,
							KW_THIS,KW_SUPER,NULL
							;
non terminal    Dict        app,stmt,stmt_list,imports,id,stmt_class,class_stmt,class_stmts,class_stmt_list,
							method_param,method_stmt,method_params,method_stmts,method_stmt_list,def_var,modifiers,type,
							int,float,char,string,bool,expr,expr2,expr3,expr4,expr5,expr6,expr7,expr8,expr9,
							def_method,id_list,method_param_list,di,di_list,method_def_var,class_def_var,
							method_call,method_call_params,method_call_param_list,method_call_param,set_var,
							method_return,method_call_obj,method_call_obj_list,loops,conds,cond_if_else_list,
							cond_if_else,cond_if,switch_stmts,switch_stmt_list,switch_stmt,new_obj,modifier,
							nl_list,cond_switch,loop_while,loop_for,cond_if_if,switch_default,switch_case,
							for_def,def_var_array,modifier_list,stmts,var,error_lexico,error_sintactico,err,
							import_list,importar,type_primitive,expr10,expr11,expr12,expr13,expr14,obj,obj2,
							casteo,ternario,Assignment,expr_assign_oper,expr_prim,expr_cond,expr_assign,
							UnaryExpression,Literal,IntegerLiteral,expr_cond_or,expr_cond_and,
							expr_add,expr_mul,expr_expnte,expr_eq,expr_rel,expr_unary,expr_unary_pre,expr_unary_post,
							expr_prim_lit,expr_name,expr_name_simple,expr_name_complex,block,expr_unary_pre1,
							expr_unary1,expr_call_simple,expr_call_complex,expr_call,expr_nc_complex,expr_nc_simple,
							expr_nc,method_param_ref,null,this,kw_super
							;


//===============================================================================================//
//===============================================================================================//
app 		::=	stmts:x 			{:RESULT = x;:}
				|nl_list stmts:x 	{:RESULT = x;:}
				;

stmts		::=	stmt_list:x {:RESULT = x;:}
				| 			{:RESULT = new Dict("list",new ArrayList<Dict>());:}		
				;

stmt_list 	::=	stmt_list:l stmt:x 	
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|stmt:x
				{:
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				:}
				|import_list:x
				{:
					RESULT = x;
				:}
				;

stmt 		::= stmt_class:x nl_list 	{:RESULT = x;:}
				|err:x nl_list			{:RESULT = x;:}
				;

// ****************************
// IMPORTS
// ****************************
import_list	::=	import_list:l importar:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|importar:x
				{:
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				:}
				;

importar 	::=	KW_IMPORT LTHAN string:x BTHAN nl_list
				{:
					RESULT = new Dict("nodo",new Node(TOperation.IMPORT,null,null,new Dict("path",x)));
				:}
				;

// ****************************
// CLASE 
// ****************************
stmt_class	::=	modifiers:l KW_CLASS id:x LL nl_list class_stmts:ss LR 
				{:
					RESULT = new Dict("nodo",new Node(
						TOperation.DEF_CLASS
						,null
						,null
						,new Dict(
							"modifiers",l
							,"name",x
							,"stmts",ss
							)));
				:}
				|modifiers:l KW_CLASS id:x KW_EXTENDS id:x2 LL nl_list class_stmts:ss LR
				{:
					RESULT = new Dict("nodo",new Node(
						TOperation.DEF_CLASS
						,null
						,null
						,new Dict(
							"modifiers",l
							,"name",x
							,"super",x2
							,"stmts",ss
							)));
				:}
				;

class_stmts	::=	class_stmt_list:x 	{:RESULT = x;:}
				| 					{:RESULT = new Dict("list",new ArrayList<Dict>());:}
				;

class_stmt_list	::=	class_stmt_list:l class_stmt:x
					{:
						l.getDictArrayList("list").add(x);
						RESULT = l;
					:}
					|class_stmt:x
					{:
						RESULT = new Dict("list",new ArrayList(){{
							add(x);
						}});
					:}
					;

class_stmt 	::=	class_def_var:x nl_list	{:RESULT = x;:}
				|def_method:x nl_list	{:RESULT = x;:}	
				|err:x nl_list			{:RESULT = x;:}
				;

class_def_var 	::=	modifiers:l def_var:x
					{:
						x.set("modifiers",l);
						RESULT = new Dict("nodo",new Node(TOperation.DEF_FIELD,null,null,x,null));
					:}
					;


def_method 	::= modifiers:l id:x PL method_params:l2 PR LL nl_list method_stmts:ss LR 
				{:
					RESULT = new Dict("nodo",new Node(TOperation.DEF_CONSTRUCT,null,null,new Dict(){{
						set("modifiers",l);
						set("name",x);
						set("params",l2);
						set("stmts",new Dict("list",new ArrayList<Dict>()));
						set("stmts",ss);
					}},null));
				:}
				|modifiers:l type:t id:x PL method_params:l2 PR LL nl_list method_stmts:ss LR
				{:
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,new Dict(){{
						set("modifiers",l);
						set("type",t);
						set("name",x);
						set("params",l2);
						// set("stmts",new Dict("list",new ArrayList<Dict>()));
						set("stmts",ss);
					}},null));
				:}
				;

method_params 	::=	method_param_list:x 	{:RESULT = x;:}
					|						{:RESULT = new Dict("list",new ArrayList<Dict>());:}
					;

method_param_list ::=	method_param_list:l COMA method_param:x
						{:
							l.getDictArrayList("list").add(x);
							RESULT = l;
						:}
						|method_param:x
						{:
							RESULT = new Dict("list",new ArrayList(){{
								add(x);
							}});
						:}
						;


method_param 	::=	method_param_ref:r type:t id:x
					{:
						RESULT = new Dict(){{
							set("ref",r);
							set("type",t);
							set("name",x);
							set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
						}};
					:}
					|method_param_ref:r KW_ARRAY LTHAN type:t BTHAN id:x
					{:
						RESULT = new Dict(){{
							set("array",true);
							set("ref",r);
							set("type",t);
							set("name",x);
							set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
						}};
					:}
					// |REF type:t id:x 
					// {:
					// 	RESULT = new Dict(){{
					// 		set("ref",new Dict("val",true));
					// 		set("type",t);
					// 		set("name",x);
					// 		set("nodo",new Node(TOperation.DEF_PARAMETER,null,null,this,null));
					// 	}};
					// :}	
					;

method_param_ref 	::=	REF 	{:RESULT = new Dict("val",true);:}
						|		{:RESULT = new Dict("val",false);:}
						;

block 			::=	LL nl_list method_stmts LR
					;


method_stmts 	::=	method_stmt_list:l method_return:x 	
					{:
						l.getDictArrayList("list").add(x);
						RESULT = l;
					:}
					|method_stmt_list:l 	{:RESULT = l;:}
					|method_return:x 		{:RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});:}
					|						{:RESULT = new Dict("list",new ArrayList<Dict>());:}
					;

method_return 	::=	KW_RETURN expr:e nl_list
					{:
						RESULT = new Dict("nodo",new Node(TOperation.RETURN,null,null,new Dict("return",e)));
					:}
					;

method_stmt_list 	::=	method_stmt_list:l method_stmt:x
						{:
							l.getDictArrayList("list").add(x);
							RESULT = l;
						:}
						|method_stmt:x
						{:
							RESULT = new Dict("list",new ArrayList(){{
								add(x);
							}});
						:}
						;

method_stmt 	::=	expr:x nl_list				{:RESULT = x;:} 
					|method_def_var:x nl_list	{:RESULT = x;:}
					//|method_call:x nl_list		
					// |set_var:x nl_list 			
					|loops:x nl_list 			{:RESULT = x;:}
					|conds:x nl_list 			{:RESULT = x;:}
					|KW_BREAK nl_list			{:RESULT = new Dict("nodo",new Node(TOperation.BREAK,null,null,null));:}
					|KW_CONTINUE nl_list		{:RESULT = new Dict("nodo",new Node(TOperation.CONTINUE,null,null,null));:}
					|err:x nl_list				{:RESULT = x;:}
					;

loops 			::= loop_while:x 	{:RESULT = x;:}
					|loop_for:x 	{:RESULT = x;:}
					;


loop_while 		::=	KW_WHILE PL expr:e PR LL nl_list method_stmts:ss LR
					{:
						Dict ref = new Dict("condition",e,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-7));
						RESULT = new Dict("nodo",new Node(TOperation.STMT_WHILE,null,null,ref));
					:}
					|KW_DO LL nl_list method_stmts:ss LR KW_WHILE PL expr:e PR
					{:
						Dict ref = new Dict("condition",e,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-8));
						RESULT = new Dict("nodo",new Node(TOperation.STMT_DOWHILE,null,null,ref));
					:}
					;

loop_for 		::= KW_FOR PL for_def:x PR LL nl_list method_stmts:ss LR
					{:
						x.put("stmts",ss);
						x.put("info",CUP$Parser$stack.elementAt(CUP$Parser$top-7));
						RESULT = new Dict("nodo",new Node(TOperation.STMT_FOR,null,null,x));
					:}
					;

for_def 		::=	id:x EQUAL expr:e COMA expr:e2 COMA id:x2 DPLUS
					{:
						RESULT = new Dict(
							"def_var",false,
							"contador",x,
							"inicio",e,
							"condition",e2,
							"++",x2
							);
					:}
					|KW_INT id:x EQUAL expr:e COMA expr:e2 COMA id:x2 DPLUS
					{:
						RESULT = new Dict(
							"def_var",true,
							"contador",x,
							"inicio",e,
							"condition",e2,
							"++",x2
							);
					:}
					;

conds 			::=	cond_if:x 		{:RESULT = x;:} 		
					|cond_switch:x 	{:RESULT = x;:}
					;

cond_switch 	::=	KW_SWITCH PL expr:e PR LL nl_list switch_stmts:ss LR
					{:
						Dict ref = new Dict("base",e,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-7));
						RESULT = new Dict("nodo",new Node(TOperation.STMT_SWITCH,null,null,ref));
					:}
					;

cond_if 		::=	cond_if_else_list:x
					{:
						Dict ref = new Dict("if",x);
						RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,null,null,ref));
					:}
					|cond_if_else_list:x cond_if_else:x2
					{:
						Dict ref = new Dict("if",x,"else",x2);
						RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,null,null,ref));
					:}
					;

switch_stmts 	::=	switch_stmt_list:l switch_default:x 
					{:
						l.getDictArrayList("list").add(x);
						RESULT = l;
					:}
					|switch_stmt_list:x {:RESULT = x;:}
					|switch_default:x 	{:RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});:}
					|					{:RESULT = new Dict("list",new ArrayList<>());:}
					;

switch_default 	::=	KW_DEFAULT DPUNTOS nl_list method_stmts:ss
					{:
						RESULT = new Dict("stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
					:} 	
					;

switch_stmt_list 	::=	switch_stmt_list:l switch_stmt:x
						{:
							l.getDictArrayList("list").add(x);
							RESULT = l;
						:}
						|switch_stmt:x
						{:
							RESULT = new Dict("list",new ArrayList(){{
								add(x);
							}});
						:}
						;

switch_stmt ::=	switch_case:x {:RESULT = x;:}
				;

switch_case 	::=	KW_CASE expr:e DPUNTOS nl_list method_stmts:ss //KW_BREAK  // BREAK -> LO MISMO QUE EL DO-WHILE, YA VIENE EN method_stmts
					{:
						RESULT = new Dict("condition",e,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4));
					:}
					;

cond_if_else_list 	::=	cond_if_else_list:l KW_ELSE cond_if_if:x
						{:
							l.getDictArrayList("list").add(x);
							RESULT = l;
						:}
						|cond_if_if:x
						{:
							RESULT = new Dict("list",new ArrayList(){{
								add(x);
							}});
						:}
						;
cond_if_if 		::=	KW_IF PL expr:e PR LL nl_list method_stmts:ss LR
					{:
						RESULT = new Dict("condition",e,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-7));
					:}
					;

cond_if_else 	::= KW_ELSE LL nl_list method_stmts:ss LR
					{:
						RESULT = new Dict("stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4));
					:}
					;

set_var 		::= var:x EQUAL expr:e 		
					|var:x PEQUAL expr:e 	
					|var:x MIEQUAL expr:e 	
					|var:x MUEQUAL expr:e 	
					|var:x DIEQUAL expr:e 	
					;

var 			::=	id:x 			
					|id:x di_list:l 
					;

new_obj 		::=	KW_NEW id:x PL method_call_params:l PR
					
					;

method_call		::= method_call_obj_list:x 	
					|id:x DPLUS 			
					|id:x DMINUS 			
					;

method_call_obj_list 	::=	method_call_obj_list:l PUNTO method_call_obj:x 		
							|method_call_obj:x 									
							|new_obj:x 											
							|PL expr:e  Q  expr:e2  DPUNTOS  expr:e3  PR
							|PL PL type PR expr PR								
							;


method_call_obj 	::=	id:x 										
						|id:x di_list:l
						|id:x PL method_call_params:l PR 
						|id:x PL method_call_params:l PR di_list:l2
						;

method_call_params 	::=	method_call_param_list:x 	{:RESULT = x;:}
						| 							{:RESULT = new Dict("list",new ArrayList<Dict>());:}
						;
method_call_param_list 	::=	method_call_param_list:l COMA method_call_param:x
							{:
								l.getDictArrayList("list").add(x);
								RESULT = l;
							:}
							|method_call_param:x
							{:
								RESULT = new Dict("list",new ArrayList(){{
									add(x);
								}});
							:}
							;
method_call_param 	::=	expr:x 	{:RESULT = x;:}
						;

method_def_var 	::=	def_var:x 	
					{:
						RESULT = new Dict("nodo",new Node(TOperation.DEF_LOCALVAR,null,null,x));
					:}
					;

def_var 		::= type:t id_list:x
					{:
						RESULT = new Dict(){{
							set("type",t);
							set("name",x);
						}};
					:}
					|type:t id:x EQUAL expr:e
					{:
						RESULT = new Dict(){{
							set("type",t);
							set("name",new Dict("list",new ArrayList<Dict>(){{add(x);}}));
							set("val",e);
						}};
					:}
					|KW_ARRAY LTHAN type:t BTHAN id_list:x
					{:
						RESULT = new Dict(){{
							set("array",true);
							set("type",t);
							set("name",x);
						}};
					:}
					|KW_ARRAY LTHAN type:t BTHAN id:x EQUAL expr:e
					{:
						RESULT = new Dict(){{
							set("array",true);
							set("type",t);
							set("name",new Dict("list",new ArrayList<Dict>(){{add(x);}}));
							set("val",e);
						}};
					:}
					;

def_var_array 	::=	LTHAN type:t BTHAN
					|
					;

modifiers 	::=	modifier_list:x 	{:RESULT = x;:}
				|					{:RESULT = new Dict("list",new ArrayList<Dict>());:}
				;


modifier_list 	::=	modifier_list:l modifier:x
					{:
						l.getDictArrayList("list").add(x);
						RESULT = l;
					:}
					|modifier:x
					{:
						RESULT = new Dict("list",new ArrayList(){{
							add(x);
						}});
					:}
					;

modifier	::=	KW_PRIVATE:x	{:RESULT = new Dict("val",TModifier.PRIVATE);:}
				|KW_PUBLIC:x	{:RESULT = new Dict("val",TModifier.PUBLIC);:}
				|KW_STATIC:x	{:RESULT = new Dict("val",TModifier.STATIC);:}
				;

type 		::=	type_primitive:x 	{:RESULT = x;:}
				|id:x				{:RESULT = x;:}
				;

type_primitive	::=	KW_INT:x		{:RESULT = new Dict("val",TType.INT);:}
					|KW_FLOAT:x		{:RESULT = new Dict("val",TType.FLOAT);:}
					|KW_CHAR:x		{:RESULT = new Dict("val",TType.CHAR);:}
					|KW_STRING:x	{:RESULT = new Dict("val",TType.STRING);:}
					|KW_BOOL:x		{:RESULT = new Dict("val",TType.BOOLEAN);:}
					|KW_VOID:x		{:RESULT = new Dict("val",TType.VOID);:}
					;

expr_assign_oper	::=	EQUAL:x 	{:RESULT = new Dict("val",x,"info",CUP$Parser$stack.peek());:}
						|PEQUAL:x 	{:RESULT = new Dict("val",x,"info",CUP$Parser$stack.peek());:}
						|MIEQUAL:x 	{:RESULT = new Dict("val",x,"info",CUP$Parser$stack.peek());:}
						|MUEQUAL:x 	{:RESULT = new Dict("val",x,"info",CUP$Parser$stack.peek());:}
						|DIEQUAL:x 	{:RESULT = new Dict("val",x,"info",CUP$Parser$stack.peek());:}
						;

expr_name 			::= expr_name_simple:x 		{:RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});:}
						|expr_name_complex:x 	{:RESULT = x;:}
						;	

expr_name_simple 	::=	id:x 					{:RESULT = x;:}
						|id:x di_list:l 	
						{:
							x.put("dims",l);
							RESULT = x;
						:}
						|this:x 				{:RESULT = x;:}
						|kw_super:x 			{:RESULT = x;:}
						;
expr_name_complex 	::=	expr_name:l PUNTO expr_name_simple:x
						{:
							l.getDictArrayList("list").add(x);
							RESULT = l;
						:}
						;

expr_call 			::=	expr_call_simple:x
						|expr_call_complex:x
						;

expr_call_simple 	::=	id PL method_call_params PR
						|id PL method_call_params PR di_list
						;

expr_call_complex	::= expr_call PUNTO expr_call_simple
						;

expr_nc 			::=	expr_nc_simple
						|expr_nc_complex
						;
expr_nc_simple 		::=	expr_call
						|expr_name
						;
expr_nc_complex 	::=	expr_nc PUNTO expr_nc_simple
						;
// ****************************
// Expression
// ****************************
expr 		::=	expr_assign:x 	{:RESULT = x;:}
				|expr_cond:x 	{:RESULT = x;:}
				;

expr_assign ::=	expr_name:x expr_assign_oper:a expr:v
				{:
					Dict ref = new Dict("name",x,"operator",a,"val",v);
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,null,null,ref));
				:}
				;

expr_cond 	::=	expr_cond_or:x 	{:RESULT = x;:}
				|expr_cond_or:x Q expr:vt DPUNTOS expr:vf
				{:
					Dict ref = new Dict("condition",x,"vtrue",vt,"vfalse",vf);
					RESULT = new Dict(TOperation.TERNARY,null,null,ref);
				:}
				;

expr_cond_or 	::=	expr_cond_or:l OR expr_cond_and:x
					{:
					l.put(
						"nodo",
						new Node(
							TOperation.OR,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								){{setAutoexec(false);}});
					RESULT = l;
				:}
					|expr_cond_and:x {:RESULT = x;:}
					;

expr_cond_and 	::=	expr_cond_and:l AND expr_eq:x
					{:
					l.put(
						"nodo",
						new Node(
							TOperation.AND,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								){{setAutoexec(false);}});
					RESULT = l;
				:}
					|expr_eq:x 	{:RESULT = x;:}
					;

expr_eq 	::=	expr_eq:l DEQUAL expr_rel:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.DEQUAL,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_eq:l NEQUAL expr_rel:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.NEQUAL,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_rel:x 	{:RESULT = x;:}
				;

expr_rel 	::=	expr_rel:l LTHAN expr_add:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.LTHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_rel:l LETHAN expr_add:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.LETHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_rel:l BTHAN expr_add:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.BTHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_rel:l BETHAN expr_add:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.BETHAN,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_add:x 	{:RESULT = x;:}
				;
					
expr_add 	::=	expr_add:l PLUS expr_mul:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.PLUS,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_add:l MINUS expr_mul:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.MINUS,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_mul:x 	{:RESULT = x;:}
				;

expr_mul 	::=	expr_mul:l MULT expr_expnte:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.MULT,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_mul:l DIV expr_expnte:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.DIV,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_expnte:x 	{:RESULT = x;:}
				;

expr_expnte	::=	expr_expnte:l EXP expr_unary:x
				{:
					l.put(
						"nodo",
						new Node(
							TOperation.EXP,
							l.getNode("nodo"),
							x.getNode("nodo"),
							new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))
								));
					RESULT = l;
				:}
				|expr_unary:x 	{:RESULT = x;:}
				;

expr_unary 	::=	DPLUS expr_unary:x 		{:RESULT = new Dict("nodo",new Node(TOperation.LLPLUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));:}
				|DMINUS expr_unary:x 	{:RESULT = new Dict("nodo",new Node(TOperation.LLMINUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));:}
				|PLUS expr_unary:x 		{:RESULT = new Dict("nodo",new Node(TOperation.LPLUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));:}
				|MINUS expr_unary:x 	{:RESULT = new Dict("nodo",new Node(TOperation.LMINUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))));:}
				|expr_unary1:x 			{:RESULT = x;:}
 				;

expr_unary1		::=	NOT expr_unary:x 						{:RESULT = new Dict("nodo",new Node(TOperation.NOT,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1))){{setAutoexec(false);}});:}
					|PL type_primitive:t PR expr_unary:x 	{:RESULT = new Dict("nodo",new Node(TOperation.CAST,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1),"type",t)));:}
					|PL expr:t PR expr_unary1:x  			{:RESULT = new Dict("nodo",new Node(TOperation.CAST,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1),"type",t)));:}
					|expr_unary_post:x 						{:RESULT = x;:}
					;
expr_unary_post ::=	expr_prim:x 		 		{:RESULT = x;:}
					|expr_unary_post:x DPLUS 	{:RESULT = new Dict("nodo",new Node(TOperation.RRPLUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top))));:}
					|expr_unary_post:x DMINUS 	{:RESULT = new Dict("nodo",new Node(TOperation.RRMINUS,x.getNode("nodo"),null,new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top))));:}
					;


expr_prim	::= expr_prim_lit:x 							{:RESULT = x;:}
				// par_expr
  				|PL expr:x PR 								{:RESULT = x;:}
  				// new object
  				|KW_NEW id:x PL method_call_params:l PR 	
  				{:
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.NEW
  							,null
  							,null
  							,new Dict(
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4),
  								"type",x,
  								"params",l
  								)
  							)
  						);
				:}
  				|KW_NEW KW_ARRAY PL method_call_params:l PR
  				{:
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.NEW
  							,null
  							,null
  							,new Dict(
  								"array",true,
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4),
  								"params",l
  								)
  							)
  						);
				:}
  				//	
  				// |expr_nc
  				|expr_name:x 			
  				{:
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.LEAF
  							,null
  							,null
  							,new Dict(
  								"val",x,
  								"type",TType.REF
  								)
  							)
  						);
				:}	
  				// array access
  				// |expr_name di_list
  				//method call
  				// |expr_call
  				|expr_name:x PL method_call_params:l PR 
  				{:
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.METHOD_CALL
  							,null
  							,null
  							,new Dict(
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3),
  								"name",x,
  								"params",l
  								)
  							)
  						);
				:}	
  				|expr_name:x PL method_call_params:l PR di_list:d
  				{:
  					RESULT = new Dict(
  						"nodo",new Node(
  							TOperation.METHOD_CALL
  							,null
  							,null
  							,new Dict(
								"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4),
  								"name",x,
  								"params",l,
  								"dims",d
  								)
  							)
  						);
				:}
  				//field access
  				// |expr_prim PUNTO id
  				// |expr_prim PUNTO id
  				// |
    		// |this [Arguments]
    		// |super SuperSuffix
    		// |new Creator
		    // |Identifier { . Identifier } [IdentifierSuffix]
				;



expr_prim_lit ::=	int:x 		{:RESULT = x;:}
					|float:x 	{:RESULT = x;:}
					|char:x 	{:RESULT = x;:}	
					|string:x 	{:RESULT = x;:}
					|bool:x 	{:RESULT = x;:}
					|null:x 	{:RESULT = x;:}
    		// |FloatingPointLiteral
    		// |CharacterLiteral 	
    		// |StringLiteral 	
    		// |BooleanLiteral
    		// |NullLiteral
    				;

// expr 		::=	expr:l OR expr2:x
// 				|expr2:x	
// 				;

// expr2 		::=	expr2:l AND expr3:x
				
// 				|expr3:x	
// 				;
// expr3 		::=	NOT expr4:x
				
// 				|expr4:x 	
// 				;

// expr4 		::=	expr4:l DEQUAL expr5:x
				
// 				|expr4:l NEQUAL expr5:x
				
// 				|expr4:l BTHAN expr5:x
				
// 				|expr4:l BETHAN expr5:x
				
// 				|expr4:l LTHAN expr5:x
				
// 				|expr4:l LETHAN expr5:x
				
// 				|expr5:x	
// 				;

// expr5 		::=	expr5:l PLUS expr6:x
				
// 				|expr5:l MINUS expr6:x
				
// 				|expr6:x	
// 				;

// expr6 		::=	expr6:l MULT expr7:x
				
// 				|expr6:l DIV expr7:x
				
// 				|expr7:x	
// 				;

// expr7 		::=	expr7:l EXP expr8:x
				
// 				|expr8:x	
// 				;

// expr8 		::=	MINUS expr9:x
// 				|expr9:x
				
// 				;

// expr9		::= int:x			
// 				|float:x		
// 				|char:x			
// 				|string:x		
// 				|bool:x			
// 				// |PL expr:x PR	
// 				|expr10:x
// 				;

// expr10 		::=	expr10 PUNTO expr11
// 				|expr11
// 				|PL expr PR
// 				|expr Q expr DPUNTOS expr
// 				|KW_NEW id PR PL
// 				// |PL PL expr PR expr PR
// 				;

// expr11 		::= id
// 				|id di_list
// 				// |id PL method_call_params PR
// 				// |id PL method_call_params PR di_list
// 				;

// obj 		::=	PL method_call_params PR
// 				|
// 				;

// obj2 		::=	di_list
// 				|PL PR
// 				|PL PR di_list
// 				;

// casteo 		::=	PL PL expr PR expr PR 
// 				;

// ternario	::=	PL expr:e  Q  expr:e2  DPUNTOS  expr:e3  PR
// 				;

// expr12 		::=	new_obj:x 											
// 				|PL expr:e  Q  expr:e2  DPUNTOS  expr:e3  PR
// 				;

id_list 	::= id_list:l COMA id:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|id:x
				{:
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				:}
				;

di_list 	::=	di_list:l di:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|di:x
				{:
					RESULT = new Dict("list",new ArrayList(){{
						add(x);
					}});
				:}
				;


nl_list 	::=	nl_list NEWLINE
				|NEWLINE
				;

di 			::=	QL expr:x QR 	{:RESULT = x;:}
				;

id 			::= ID:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.REF);
						put("val",x);
					}};
				:}
				;

int 		::=	INT:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.INT);
						put("val",x);
					}};
				:}
				;

float 		::=	FLOAT:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.FLOAT);
						put("val",x);
					}};
				:}
				;

char 		::= CHAR:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.CHAR);
						put("val",x);
					}};
				:}
				;

string 		::=	STRING:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.STRING);
						put("val",x);
					}};
				:}
				;

bool 		::=	BOOL:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.BOOLEAN);
						put("val",x);
					}};
				:}
				;
null 		::=	NULL:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.NULL);
						put("val",x);
					}};
				:}
				;
this 		::=	KW_THIS:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.REF);
						put("val",x);
					}};
				:}
				;
kw_super 	::=	KW_SUPER:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(TOperation.LEAF,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("type",TType.REF);
						put("val",x);
					}};
				:}
				;



error_lexico	::=	ERROR:x
					{:
						RESULT = new Dict(){{
							put("nodo",new Node(TOperation.ERROR_LEXICO,null,null,this));
							put("info",(CUP$Parser$stack.peek()));
							put("tipo",Sym.ERROR);
							put("val",x);
						}};
					:}
					;

error_sintactico 	::=	error:x
						{:
							RESULT = new Dict(){{
								put("nodo",new Node(TOperation.ERROR_SINTACTICO,null,null,this));
								put("info",parser.info);
								put("type",Sym.error);
							}};
						
						:}
						;


err 	::=	error_sintactico:x 	{:RESULT = x;:}
			|error_lexico:x 	{:RESULT = x;:}
			;