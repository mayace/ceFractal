package com.github.ceFractal.compiler.fractal;

import com.github.gg.Dict;
import com.github.gg.Node;
import java.util.ArrayList;

//===============================================================================================//
//===============================================================================================//

parser code {: 
	public void report_error(String message, Object info){
        System.err.println(message);
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }
:};

action code{:

:}
   
//===============================================================================================//
//===============================================================================================//
terminal        String 		KW_INT,KW_FLOAT,KW_CHAR,KW_STRING,KW_BOOL,KW_NEW,KW_WHILE,KW_DO,
							KW_FOR,KW_CONTINUE,KW_BREAK,KW_IF,KW_ELSE,KW_SWITCH,KW_CASE,KW_DEFAULT,KW_CLASS,
							KW_PUBLIC,KW_PRIVATE,KW_EXTENDS,KW_IMPORT,EQUAL,PEQUAL,MIEQUAL,MUEQUAL,DIEQUAL,
							DEQUAL,BTHAN,BETHAN,LTHAN,LETHAN,NEQUAL,AND,OR,NOT,DPLUS,PLUS,DMINUS,MINUS,MULT,
							DIV,EXP,QL,QR,PL,PR,COMA,DPUNTOS,PUNTO,REF,INT,FLOAT,CHAR,BOOL,
							ID,STRING,LL,LR,KW_VOID,KW_RETURN,Q,KW_STATIC,NEWLINE
							;
non terminal    Dict        app,stmt,stmt_list,imports,id,stmt_class,class_stmt,class_body,class_stmt_list,
							method_param,method_stmt,method_params,method_body,method_stmt_list,def_var,modifiers,type,
							int,float,char,string,bool,expr,expr2,expr3,expr4,expr5,expr6,expr7,expr8,expr9,
							def_method,id_list,method_param_list,di,di_list,method_def_var,class_def_var,
							method_call,method_call_params,method_call_param_list,method_call_param,set_var,
							method_return,method_call_obj,method_call_obj_list,loops,conds,cond_if_else_list,
							cond_if_else,cond_if,switch_stmts,switch_stmt_list,switch_stmt,new_obj,modifier,
							nl_list,cond_switch,loop_while,loop_for,cond_if_if,switch_default,switch_case,
							for_def,def_var_array
							;
//===============================================================================================//
//===============================================================================================//

app			::=	stmt_list
				|
				;

stmt_list 	::=	stmt_list stmt
				|stmt
				|imports stmt
				;

imports 	::=	KW_IMPORT LTHAN BTHAN
				;

stmt 		::= stmt_class
				|NEWLINE
				;

// CLASE 
stmt_class	::=	KW_CLASS id LL nl_list class_body LR 
				|KW_CLASS id KW_EXTENDS id LL nl_list class_body LR
				;

class_body	::=	class_stmt_list
				|
				;

class_stmt_list	::=	class_stmt_list class_stmt
					|class_stmt
					;


class_stmt 	::=	class_def_var nl_list
				|def_method nl_list
				;

class_def_var 	::=	 modifiers:l def_var:x
					{:
						RESULT = new Dict("nodo",new Node());
					:}
					;


def_method 	::= modifiers type id PL  method_params PR LL nl_list method_body LR
				|modifiers id PL method_params PR LL nl_list method_body LR 
				;

method_params 	::=	method_param_list 
					|
					;

method_param_list ::=	method_param_list COMA method_param
						|method_param
						;


method_param 	::=	type id
					|REF type id
					;

method_body 	::=	method_stmt_list method_return
					|method_return
					|
					;

method_return 	::=	KW_RETURN expr nl_list
					;

method_stmt_list 	::=	method_stmt_list method_stmt
						|method_stmt
						;

method_stmt 	::=	method_def_var nl_list
					|method_call nl_list
					|set_var nl_list
					|loops nl_list
					|conds nl_list
					|KW_BREAK nl_list
					|KW_CONTINUE nl_list
					;

loops 			::= loop_while
					|loop_for
					;


loop_while 		::=	KW_WHILE PL conds PR LL nl_list method_body LR
					|KW_DO LL nl_list method_body LR KW_WHILE PL conds PR
					;

loop_for 		::= KW_FOR PL for_def PR LL nl_list method_body LR
					;

for_def 		::=	id EQUAL expr COMA expr COMA id DPLUS
					|KW_INT id EQUAL expr COMA expr COMA id DPLUS
					;

conds 			::=	cond_if
					|cond_switch
					;

cond_switch 	::=	KW_SWITCH PL expr PR LL nl_list switch_stmts  LR
					;

cond_if 		::=	cond_if_else_list 
					|cond_if_else_list cond_if_else
					;

switch_stmts 	::=	switch_stmt_list switch_default
					|switch_default
					|
					;

switch_default 	::=	KW_DEFAULT DPUNTOS nl_list method_body
					;

switch_stmt_list 	::=	switch_stmt_list switch_stmt
						|switch_stmt
						;

switch_stmt ::=	switch_case
				;

switch_case 	::=	KW_CASE expr DPUNTOS nl_list method_body //KW_BREAK  // BREAK -> LO MISMO QUE EL DO-WHILE, YA VIENE EN METHOD_BODY
					;

cond_if_else_list 	::=	cond_if_else_list KW_ELSE cond_if_if
						|cond_if_if
						;
cond_if_if 		::=	KW_IF PL expr PR LL nl_list method_body LR
					;

cond_if_else 	::= KW_ELSE LL nl_list method_body LR
					;

set_var 		::= id EQUAL expr
					|id PEQUAL expr
					|id MIEQUAL expr
					|id MUEQUAL expr
					|id DIEQUAL expr
					;

new_obj 		::=	KW_NEW id PL method_call_params PR
					;

method_call		::= method_call_obj_list
					|id DPLUS
					|id DMINUS
					;

method_call_obj_list 	::=	method_call_obj_list PUNTO method_call_obj
							|method_call_obj
							|new_obj
							|PL expr PR Q LL expr LR DPUNTOS LL expr LR
							|PL KW_INT PR
							;


method_call_obj 	::=	id
						|id di_list
						|id PL method_call_params PR 
						|id PL method_call_params PR di_list
						// -------------
						// ternario
						// -------------
						// existe problemas de reduccion... ya que puede venir algo asi... 
						// <id> <acepta> <ternario> <acepta>
						// Ej: i  ( <expr> ) ? .. : ...
						// El compilador no puede diferenciar entre lo de arriba y esto...
						// <llamda a metodo> <acepta>
						// Ej: id (<params>)
						// Esto debido a que no hay simbolo de finalizacion en las sentencias como el ';'
						// La forma en que pueda diferencias este caso es tomando el salto de linea
						// como finalizacion de sentencias...
						
						//|PL type PR expr
						;

method_call_params 	::=	method_call_param_list
						|
						;
method_call_param_list 	::=	method_call_param_list COMA method_call_param
							|method_call_param
							;
method_call_param 	::=	expr
						;

method_def_var 	::=	def_var:x 	{:RESULT=x;:}
					;

def_var 		::= type:t id_list:x
					{:
						System.err.println(t.getString("val"));
						System.out.println(x.getDictArrayList("list").size());
						RESULT = new Dict(){{
							set("tipo",t);
							set("var",x);
						}};
					:}
					|type:t id:x EQUAL expr:e
					{:
						RESULT = new Dict(){{
							set("tipo",t);
							set("var",x);
							set("expr",e);
						}};
					:}
					|type:t LTHAN type:t2 BTHAN id_list:x
					{:
						RESULT = new Dict(){{
							set("tipo",t);
							set("tipo2",t2);
							set("var",x);
						}};
					:}
					|type:t LTHAN type:t2 BTHAN id:x EQUAL expr:e
					{:
						RESULT = new Dict(){{
							set("tipo",t);
							set("tipo2",t2);
							set("var",x);
							set("expr",e);
						}};
					:}
					
					// type def_var_array id_list
					// |type def_var_array id EQUAL expr
					;

def_var_array 	::=	LTHAN type BTHAN
					|
					;

modifiers 	::=	modifiers:l modifier:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|modifier:x
				{:
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				:}
				;

modifier	::=	KW_PRIVATE:x	{:RESULT = new Dict("val",x);:}
				|KW_PUBLIC:x	{:RESULT = new Dict("val",x);:}
				|KW_STATIC:x	{:RESULT = new Dict("val",x);:}
				;

type 		::=	KW_INT:x		{:RESULT = new Dict("val",x);:}
				|KW_FLOAT:x		{:RESULT = new Dict("val",x);:}
				|KW_CHAR:x		{:RESULT = new Dict("val",x);:}
				|KW_STRING:x	{:RESULT = new Dict("val",x);:}
				|KW_BOOL:x		{:RESULT = new Dict("val",x);:}
				|KW_VOID:x		{:RESULT = new Dict("val",x);:}
				|id:x			{:RESULT = new Dict("val",x);:}
				;
// Expr

expr 		::=	expr:l OR expr2:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.OR,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr2:x	{:RESULT = x;:}
				;

expr2 		::=	expr2:l AND expr3:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.AND,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr3:x	{:RESULT = x;:}
				;
expr3 		::=	NOT expr4:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					x.set("nodo",new Node(Sym.NOT,x.getNode("nodo"),null,info));
					RESULT = x;
				:}
				|expr4:x 	{:RESULT = x;:}
				;

expr4 		::=	expr4:l DEQUAL expr5:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.DEQUAL,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr4:l NEQUAL expr5:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.NEQUAL,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr4:l BTHAN expr5:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.BTHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr4:l BETHAN expr5:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.BETHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr4:l LTHAN expr5:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.LTHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr4:l LETHAN expr5:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.LETHAN,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr5:x	{:RESULT = x;:}
				;

expr5 		::=	expr5:l PLUS expr6:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.PLUS,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr5:l MINUS expr6:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.MINUS,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr6:x	{:RESULT = x;:}
				;

expr6 		::=	expr6:l MULT expr7:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.MULT,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr6:l DIV expr7:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.DIV,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr7:x	{:RESULT = x;:}
				;

expr7 		::=	expr7:l EXP expr8:x
				{:
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					l.set("nodo",new Node(Sym.EXP,l.getNode("nodo"),x.getNode("nodo"),info));
					RESULT = l;
				:}
				|expr8:x	{:RESULT = x;:}
				;

expr8 		::=	MINUS expr9:x
				{:
					// new Node(<operacion>,<left>,<right>,<info>)  //nodos no hojas...
					Object info = CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					x.set("nodo",new Node(Sym.MINUS,x.getNode("nodo"),null,info));
					RESULT = x;
				:}
				|expr9:x
				{:RESULT = x;:}
				;

expr9 		::= int:x			{:RESULT = x;:}
				|float:x		{:RESULT = x;:}
				|char:x			{:RESULT = x;:}
				|string:x		{:RESULT = x;:}
				|bool:x			{:RESULT = x;:}
				//aqui puede traer llamadas a objetos, metodos,identificadores, ternarios...
				|method_call:x	{:RESULT = x;:}
				|PL expr:x PR	{:RESULT = x;:}
				;
//
id_list 	::= id_list:l COMA id:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|id:x
				{:
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				:}
				;

di_list 	::=	di_list:l di:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|di:x
				{:
					RESULT = new Dict(){{
						put("list",new ArrayList<Dict>(){{add(x);}});
					}};
				:}
				;


nl_list 	::=	nl_list NEWLINE
				|NEWLINE
				;

di 			::=	QL expr5:x QR
				{:
					RESULT = x;
				:}
				;

id 			::= ID:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.ID,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.ID);
						put("val",x);
					}};
				:}
				;

int 		::=	INT:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.INT,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.INT);
						put("val",x);
					}};
				:}
				;

float 		::=	FLOAT:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.FLOAT,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.FLOAT);
						put("val",x);
					}};
				:}
				;

char 		::= CHAR:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.CHAR,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.CHAR);
						put("val",x);
					}};
				:}
				;

string 		::=	STRING:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.STRING,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.STRING);
						put("val",x);
					}};
				:}
				;

bool 		::=	BOOL:x
				{:
					RESULT = new Dict(){{
						put("nodo",new Node(Sym.BOOL,null,null,this));
						put("info",(CUP$Parser$stack.peek()));
						put("tipo",Sym.BOOL);
						put("val",x);
					}};
				:}
				;