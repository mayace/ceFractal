/* The following code was generated by JFlex 1.5.1 */

package com.github.ceFractal.compiler.fractal;

import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>./src/scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\12\1\1\2\0\1\2\16\5\4\0\1\3\1\52\1\67"+
    "\1\41\1\4\1\0\1\53\1\10\1\60\1\61\1\46\1\44\1\64"+
    "\1\45\1\7\1\47\12\6\1\66\1\0\1\51\1\43\1\50\1\65"+
    "\1\0\32\4\1\56\1\11\1\57\1\55\1\4\1\0\1\20\1\31"+
    "\1\26\1\35\1\16\1\17\1\30\1\27\1\23\1\4\1\36\1\21"+
    "\1\42\1\24\1\25\1\33\1\4\1\14\1\22\1\13\1\15\1\37"+
    "\1\34\1\40\1\32\1\4\1\62\1\54\1\63\1\0\41\5\2\0"+
    "\4\4\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0"+
    "\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0"+
    "\1\4\1\0\1\4\21\0\160\5\5\4\1\0\2\4\2\0\4\4"+
    "\10\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\123\4"+
    "\1\0\213\4\1\0\5\5\2\0\236\4\11\0\46\4\2\0\1\4"+
    "\7\0\47\4\7\0\1\4\1\0\55\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\1\5\10\0\33\4\5\0\3\4\15\0\5\5"+
    "\6\0\1\4\4\0\13\5\5\0\53\4\37\5\4\0\2\4\1\5"+
    "\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5"+
    "\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4"+
    "\33\5\2\0\131\4\13\5\1\4\16\0\12\5\41\4\11\5\2\4"+
    "\4\0\1\4\5\0\26\4\4\5\1\4\11\5\1\4\3\5\1\4"+
    "\5\5\22\0\31\4\3\5\104\0\1\4\1\0\13\4\67\0\33\5"+
    "\1\0\4\5\66\4\3\5\1\4\22\5\1\4\7\5\12\4\2\5"+
    "\2\0\12\5\1\0\7\4\1\0\7\4\1\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\1\4\10\0"+
    "\1\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4\7\0"+
    "\1\4\5\0\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0"+
    "\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0"+
    "\1\4\7\0\14\5\3\4\1\5\13\0\3\5\1\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0"+
    "\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\10\0\2\5"+
    "\4\0\2\4\1\0\3\4\2\5\2\0\12\5\1\0\1\4\20\0"+
    "\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4"+
    "\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4"+
    "\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\1\5"+
    "\16\0\12\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\1\0\2\4\6\0\2\4\2\5"+
    "\2\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5"+
    "\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4\2\5\2\0"+
    "\12\5\1\0\2\4\17\0\2\5\1\0\10\4\1\0\3\4\1\0"+
    "\51\4\2\0\1\4\7\5\1\0\3\5\1\0\4\5\1\4\10\0"+
    "\1\5\10\0\2\4\2\5\2\0\12\5\12\0\6\4\2\0\2\5"+
    "\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4"+
    "\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5"+
    "\15\0\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5"+
    "\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4"+
    "\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4"+
    "\2\0\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0\4\4"+
    "\40\0\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\10\4\1\0\44\4\4\0\24\5\1\0"+
    "\2\5\5\4\13\5\1\0\44\5\11\0\1\5\71\0\53\4\24\5"+
    "\1\4\12\5\6\0\6\4\4\5\4\4\3\5\1\4\3\5\2\4"+
    "\7\5\3\4\4\5\15\4\14\5\1\4\17\5\2\0\46\4\1\0"+
    "\1\4\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0"+
    "\41\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\17\4\1\0\71\4\1\0\4\4\2\0\103\4\2\0\3\5\40\0"+
    "\20\4\20\0\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0"+
    "\113\4\3\0\3\4\17\0\15\4\1\0\4\4\3\5\13\0\22\4"+
    "\3\5\13\0\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5"+
    "\14\0\64\4\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\5"+
    "\41\0\3\5\2\0\12\5\6\0\130\4\10\0\51\4\1\5\1\4"+
    "\5\0\106\4\12\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5"+
    "\36\4\2\0\5\4\13\0\54\4\4\0\21\5\7\4\2\5\6\0"+
    "\12\5\46\0\27\4\5\5\4\0\65\4\12\5\1\0\35\5\2\0"+
    "\13\5\6\0\12\5\15\0\1\4\130\0\5\5\57\4\21\5\7\4"+
    "\4\0\12\5\21\0\11\5\14\0\3\5\36\4\15\5\2\4\12\5"+
    "\54\4\16\5\14\0\44\4\24\5\10\0\12\5\3\0\3\4\12\5"+
    "\44\4\122\0\3\5\1\0\25\5\4\4\1\5\4\4\3\5\2\4"+
    "\11\0\300\4\47\5\25\0\4\5\u0116\4\2\0\6\4\2\0\46\4"+
    "\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4"+
    "\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4"+
    "\1\0\7\4\16\0\5\5\32\0\5\5\20\0\2\4\23\0\1\4"+
    "\13\0\5\5\5\0\6\5\1\0\1\4\15\0\1\4\20\0\15\4"+
    "\3\0\33\4\25\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4"+
    "\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4"+
    "\5\0\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4"+
    "\1\0\205\4\6\0\4\4\3\5\2\4\14\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\70\4\7\0\1\4\17\0\1\5\27\4\11\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\40\5\57\0\1\4\u01d5\0"+
    "\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4"+
    "\2\0\2\5\2\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4"+
    "\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4"+
    "\63\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4"+
    "\24\0\57\4\1\5\4\0\12\5\1\0\31\4\7\0\1\5\120\4"+
    "\2\5\45\0\11\4\2\0\147\4\2\0\4\4\1\0\4\4\14\0"+
    "\13\4\115\0\12\4\1\5\3\4\1\5\4\4\1\5\27\4\5\5"+
    "\20\0\1\4\7\0\64\4\14\0\2\5\62\4\21\5\13\0\12\5"+
    "\6\0\22\5\6\4\3\0\1\4\4\0\12\5\34\4\10\5\2\0"+
    "\27\4\15\5\14\0\35\4\3\0\4\5\57\4\16\5\16\0\1\4"+
    "\12\5\46\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5\2\0"+
    "\12\5\6\0\27\4\3\0\1\4\1\5\4\0\60\4\1\5\1\4"+
    "\3\5\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4"+
    "\2\0\13\4\5\5\2\0\3\4\2\5\12\0\6\4\2\0\6\4"+
    "\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4\10\5\1\0"+
    "\2\5\2\0\12\5\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0"+
    "\u016e\4\2\0\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5"+
    "\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0"+
    "\15\4\3\0\20\5\20\0\7\5\14\0\2\4\30\0\3\4\31\0"+
    "\1\4\6\0\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0"+
    "\12\5\7\0\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0"+
    "\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0"+
    "\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\16\4\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\0\14\4\1\36\15\4\1\37\1\4"+
    "\1\0\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\7\4\1\62\5\4\1\63\1\4"+
    "\1\64\13\4\1\0\1\65\1\66\1\4\1\67\7\4"+
    "\1\70\1\71\2\4\1\72\1\4\1\73\4\4\1\74"+
    "\1\0\2\4\1\75\1\76\2\4\1\77\1\4\1\100"+
    "\1\4\1\101\2\4\1\102\1\4\1\0\1\103\1\4"+
    "\1\104\1\105\1\106\2\4\1\107\1\4\1\0\1\110"+
    "\1\4\1\111\1\112\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\160\0\160\0\340\0\u0118"+
    "\0\160\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\u0700\0\u0738"+
    "\0\160\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\340"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\340\0\u0d58\0\u0d90"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\160\0\160"+
    "\0\u0770\0\160\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\340\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\340"+
    "\0\u1068\0\340\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8"+
    "\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\340\0\340"+
    "\0\u1340\0\340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\340\0\340\0\u1500\0\u1538\0\340\0\u1570\0\340"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\340\0\u1688\0\u16c0\0\u16f8"+
    "\0\340\0\340\0\u1730\0\u1768\0\340\0\u17a0\0\340\0\u17d8"+
    "\0\340\0\u1810\0\u1848\0\340\0\u1880\0\u18b8\0\340\0\u18f0"+
    "\0\340\0\340\0\340\0\u1928\0\u1960\0\340\0\u1998\0\u19d0"+
    "\0\340\0\u1a08\0\340\0\340\0\160\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\3\1\6\1\13\1\14\1\7\1\15\1\16"+
    "\1\17\1\7\1\20\1\21\1\22\1\7\1\23\2\7"+
    "\1\24\1\7\1\25\1\26\1\27\1\7\1\30\1\7"+
    "\1\31\1\7\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\2\3\6\57\1\60\55\57\1\61\72\0\1\5\71\0"+
    "\3\7\4\0\26\7\1\0\1\7\33\0\1\10\1\62"+
    "\60\0\1\63\2\0\6\63\2\0\55\63\4\0\3\7"+
    "\4\0\1\7\1\64\12\7\1\65\11\7\1\0\1\7"+
    "\31\0\3\7\4\0\3\7\1\66\22\7\1\0\1\7"+
    "\31\0\3\7\4\0\6\7\1\67\16\7\1\70\1\0"+
    "\1\7\31\0\3\7\4\0\5\7\1\71\1\72\3\7"+
    "\1\73\13\7\1\0\1\7\31\0\3\7\4\0\1\7"+
    "\1\74\24\7\1\0\1\7\31\0\3\7\4\0\1\75"+
    "\1\7\1\76\16\7\1\77\4\7\1\0\1\7\31\0"+
    "\3\7\4\0\4\7\1\100\4\7\1\101\14\7\1\0"+
    "\1\7\31\0\3\7\4\0\2\7\1\102\1\103\22\7"+
    "\1\0\1\7\31\0\3\7\4\0\5\7\1\104\1\105"+
    "\3\7\1\106\1\7\1\107\11\7\1\0\1\7\31\0"+
    "\3\7\4\0\1\7\1\110\10\7\1\111\13\7\1\0"+
    "\1\7\31\0\3\7\4\0\1\7\1\112\1\113\23\7"+
    "\1\0\1\7\31\0\3\7\4\0\14\7\1\114\11\7"+
    "\1\0\1\7\31\0\3\7\4\0\3\7\1\115\6\7"+
    "\1\116\13\7\1\0\1\7\31\0\3\7\4\0\12\7"+
    "\1\117\13\7\1\0\1\7\50\0\1\120\107\0\1\121"+
    "\67\0\1\122\1\123\66\0\1\124\1\0\1\125\65\0"+
    "\1\126\67\0\1\127\67\0\1\130\67\0\1\131\67\0"+
    "\1\132\77\0\1\133\70\0\1\134\13\0\1\57\2\0"+
    "\6\57\1\0\55\57\14\0\1\135\1\136\7\0\1\137"+
    "\42\0\1\140\6\0\1\141\71\0\1\142\63\0\3\7"+
    "\4\0\2\7\1\143\23\7\1\0\1\7\31\0\3\7"+
    "\4\0\10\7\1\144\15\7\1\0\1\7\31\0\3\7"+
    "\4\0\1\145\25\7\1\0\1\7\31\0\3\7\4\0"+
    "\7\7\1\146\16\7\1\0\1\7\31\0\3\7\4\0"+
    "\1\147\25\7\1\0\1\7\31\0\3\7\4\0\6\7"+
    "\1\150\17\7\1\0\1\7\31\0\3\7\4\0\12\7"+
    "\1\151\13\7\1\0\1\7\31\0\3\7\4\0\1\7"+
    "\1\152\24\7\1\0\1\7\31\0\3\7\4\0\1\7"+
    "\1\153\24\7\1\0\1\7\31\0\3\7\4\0\1\7"+
    "\1\154\3\7\1\155\20\7\1\0\1\7\31\0\3\7"+
    "\4\0\20\7\1\156\5\7\1\0\1\7\31\0\3\7"+
    "\4\0\10\7\1\157\15\7\1\0\1\7\31\0\3\7"+
    "\4\0\1\160\25\7\1\0\1\7\31\0\3\7\4\0"+
    "\6\7\1\161\17\7\1\0\1\7\31\0\3\7\4\0"+
    "\21\7\1\162\4\7\1\0\1\7\31\0\3\7\4\0"+
    "\7\7\1\163\16\7\1\0\1\7\31\0\3\7\4\0"+
    "\5\7\1\164\20\7\1\0\1\7\31\0\3\7\4\0"+
    "\11\7\1\165\14\7\1\0\1\7\31\0\3\7\4\0"+
    "\5\7\1\166\20\7\1\0\1\7\31\0\3\7\4\0"+
    "\3\7\1\167\22\7\1\0\1\7\31\0\3\7\4\0"+
    "\12\7\1\170\13\7\1\0\1\7\31\0\3\7\4\0"+
    "\10\7\1\171\15\7\1\0\1\7\31\0\3\7\4\0"+
    "\16\7\1\172\7\7\1\0\1\7\31\0\3\7\4\0"+
    "\10\7\1\173\15\7\1\0\1\7\31\0\3\7\4\0"+
    "\4\7\1\174\21\7\1\0\1\7\31\0\3\7\4\0"+
    "\10\7\1\175\15\7\1\0\1\7\67\0\1\176\31\0"+
    "\3\7\4\0\3\7\1\177\22\7\1\0\1\7\31\0"+
    "\3\7\4\0\7\7\1\200\16\7\1\0\1\7\31\0"+
    "\3\7\4\0\2\7\1\201\23\7\1\0\1\7\31\0"+
    "\3\7\4\0\3\7\1\202\22\7\1\0\1\7\31\0"+
    "\3\7\4\0\3\7\1\203\22\7\1\0\1\7\31\0"+
    "\3\7\4\0\7\7\1\143\16\7\1\0\1\7\31\0"+
    "\3\7\4\0\5\7\1\204\20\7\1\0\1\7\31\0"+
    "\3\7\4\0\5\7\1\205\20\7\1\0\1\7\31\0"+
    "\3\7\4\0\10\7\1\206\15\7\1\0\1\7\31\0"+
    "\3\7\4\0\1\207\25\7\1\0\1\7\31\0\3\7"+
    "\4\0\3\7\1\210\22\7\1\0\1\7\31\0\3\7"+
    "\4\0\1\211\25\7\1\0\1\7\31\0\3\7\4\0"+
    "\6\7\1\212\17\7\1\0\1\7\31\0\3\7\4\0"+
    "\3\7\1\213\22\7\1\0\1\7\31\0\3\7\4\0"+
    "\7\7\1\214\16\7\1\0\1\7\31\0\3\7\4\0"+
    "\1\215\25\7\1\0\1\7\31\0\3\7\4\0\1\7"+
    "\1\216\24\7\1\0\1\7\31\0\3\7\4\0\5\7"+
    "\1\217\20\7\1\0\1\7\31\0\3\7\4\0\6\7"+
    "\1\220\17\7\1\0\1\7\31\0\3\7\4\0\24\7"+
    "\1\221\1\7\1\0\1\7\31\0\3\7\4\0\6\7"+
    "\1\222\17\7\1\0\1\7\31\0\3\7\4\0\6\7"+
    "\1\223\17\7\1\0\1\7\31\0\3\7\4\0\5\7"+
    "\1\224\20\7\1\0\1\7\31\0\3\7\4\0\22\7"+
    "\1\225\3\7\1\0\1\7\60\0\1\226\40\0\3\7"+
    "\4\0\1\7\1\227\24\7\1\0\1\7\31\0\3\7"+
    "\4\0\11\7\1\230\14\7\1\0\1\7\31\0\3\7"+
    "\4\0\1\231\25\7\1\0\1\7\31\0\3\7\4\0"+
    "\17\7\1\232\6\7\1\0\1\7\31\0\3\7\4\0"+
    "\11\7\1\233\14\7\1\0\1\7\31\0\3\7\4\0"+
    "\10\7\1\234\15\7\1\0\1\7\31\0\3\7\4\0"+
    "\1\7\1\235\24\7\1\0\1\7\31\0\3\7\4\0"+
    "\13\7\1\236\12\7\1\0\1\7\31\0\3\7\4\0"+
    "\7\7\1\237\16\7\1\0\1\7\31\0\3\7\4\0"+
    "\10\7\1\240\15\7\1\0\1\7\31\0\3\7\4\0"+
    "\23\7\1\241\2\7\1\0\1\7\31\0\3\7\4\0"+
    "\5\7\1\242\20\7\1\0\1\7\31\0\3\7\4\0"+
    "\10\7\1\243\15\7\1\0\1\7\31\0\3\7\4\0"+
    "\3\7\1\244\22\7\1\0\1\7\31\0\3\7\4\0"+
    "\2\7\1\245\23\7\1\0\1\7\52\0\1\246\46\0"+
    "\3\7\4\0\11\7\1\247\14\7\1\0\1\7\31\0"+
    "\3\7\4\0\22\7\1\250\3\7\1\0\1\7\31\0"+
    "\3\7\4\0\15\7\1\251\10\7\1\0\1\7\31\0"+
    "\3\7\4\0\13\7\1\252\12\7\1\0\1\7\31\0"+
    "\3\7\4\0\14\7\1\253\11\7\1\0\1\7\31\0"+
    "\3\7\4\0\11\7\1\254\14\7\1\0\1\7\31\0"+
    "\3\7\4\0\1\255\25\7\1\0\1\7\31\0\3\7"+
    "\4\0\13\7\1\256\12\7\1\0\1\7\31\0\3\7"+
    "\4\0\6\7\1\257\17\7\1\0\1\7\41\0\1\260"+
    "\57\0\3\7\4\0\7\7\1\261\16\7\1\0\1\7"+
    "\31\0\3\7\4\0\2\7\1\262\23\7\1\0\1\7"+
    "\31\0\3\7\4\0\3\7\1\263\22\7\1\0\1\7"+
    "\31\0\3\7\4\0\1\264\25\7\1\0\1\7\40\0"+
    "\1\265\60\0\3\7\4\0\3\7\1\266\22\7\1\0"+
    "\1\7\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\2\1\1\11\32\1\13\11"+
    "\2\1\1\11\2\0\34\1\1\0\20\11\1\1\1\11"+
    "\33\1\1\0\27\1\1\0\17\1\1\0\11\1\1\0"+
    "\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public static class SSymbol extends Symbol{
    public int offset;
    public int length;
    public SSymbol(int id, int l, int r, Object o) {
        super(id, l, r, o);
    }
  }

  StringBuffer string = new StringBuffer();
  int string_offset = 0;
  int string_length = 0;

  private SSymbol symbol(int type) {
    return symbol(type,yytext());
  }
  private SSymbol symbol(int type, Object value) {

    int offset = yychar;
    int length = yylength();

    if (type == Sym.STRING){
      offset = string_offset;
      length = value.toString().length() + 2;
    }

    final int o = offset;
    final int l = length;

    return new SSymbol(type, yyline, yycolumn, value){{
      this.offset = o;
      this.length = l;
    }};
  }

  private void process_error(){
    throw new Error("Illegal character <" + yytext() + ">");
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public SSymbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(Sym.ERROR,yytext());
          }
        case 77: break;
        case 2: 
          { return symbol(Sym.NEWLINE);
          }
        case 78: break;
        case 3: 
          { 
          }
        case 79: break;
        case 4: 
          { return symbol(Sym.ID,yytext());
          }
        case 80: break;
        case 5: 
          { return symbol(Sym.INT,yytext());
          }
        case 81: break;
        case 6: 
          { return symbol(Sym.PUNTO);
          }
        case 82: break;
        case 7: 
          { return symbol(Sym.EQUAL);
          }
        case 83: break;
        case 8: 
          { return symbol(Sym.PLUS);
          }
        case 84: break;
        case 9: 
          { return symbol(Sym.MINUS);
          }
        case 85: break;
        case 10: 
          { return symbol(Sym.MULT);
          }
        case 86: break;
        case 11: 
          { return symbol(Sym.DIV);
          }
        case 87: break;
        case 12: 
          { return symbol(Sym.BTHAN);
          }
        case 88: break;
        case 13: 
          { return symbol(Sym.LTHAN);
          }
        case 89: break;
        case 14: 
          { return symbol(Sym.NOT);
          }
        case 90: break;
        case 15: 
          { return symbol(Sym.REF);
          }
        case 91: break;
        case 16: 
          { return symbol(Sym.EXP);
          }
        case 92: break;
        case 17: 
          { return symbol(Sym.QL);
          }
        case 93: break;
        case 18: 
          { return symbol(Sym.QR);
          }
        case 94: break;
        case 19: 
          { return symbol(Sym.PL);
          }
        case 95: break;
        case 20: 
          { return symbol(Sym.PR);
          }
        case 96: break;
        case 21: 
          { return symbol(Sym.LL);
          }
        case 97: break;
        case 22: 
          { return symbol(Sym.LR);
          }
        case 98: break;
        case 23: 
          { return symbol(Sym.COMA);
          }
        case 99: break;
        case 24: 
          { return symbol(Sym.Q);
          }
        case 100: break;
        case 25: 
          { return symbol(Sym.DPUNTOS);
          }
        case 101: break;
        case 26: 
          { string_offset=yychar; string.setLength(0); yybegin(STRING);
          }
        case 102: break;
        case 27: 
          { string.append( yytext() );
          }
        case 103: break;
        case 28: 
          { string.append('\\');
          }
        case 104: break;
        case 29: 
          { yybegin(YYINITIAL);return symbol(Sym.STRING, string.toString());
          }
        case 105: break;
        case 30: 
          { return symbol(Sym.KW_IF);
          }
        case 106: break;
        case 31: 
          { return symbol(Sym.KW_DO);
          }
        case 107: break;
        case 32: 
          { return symbol(Sym.DEQUAL);
          }
        case 108: break;
        case 33: 
          { return symbol(Sym.PEQUAL);
          }
        case 109: break;
        case 34: 
          { return symbol(Sym.DPLUS);
          }
        case 110: break;
        case 35: 
          { return symbol(Sym.MIEQUAL);
          }
        case 111: break;
        case 36: 
          { return symbol(Sym.DMINUS);
          }
        case 112: break;
        case 37: 
          { return symbol(Sym.MUEQUAL);
          }
        case 113: break;
        case 38: 
          { return symbol(Sym.DIEQUAL);
          }
        case 114: break;
        case 39: 
          { return symbol(Sym.BETHAN);
          }
        case 115: break;
        case 40: 
          { return symbol(Sym.LETHAN);
          }
        case 116: break;
        case 41: 
          { return symbol(Sym.NEQUAL);
          }
        case 117: break;
        case 42: 
          { return symbol(Sym.AND);
          }
        case 118: break;
        case 43: 
          { return symbol(Sym.OR);
          }
        case 119: break;
        case 44: 
          { string.append('\t');
          }
        case 120: break;
        case 45: 
          { string.append('\r');
          }
        case 121: break;
        case 46: 
          { string.append('\n');
          }
        case 122: break;
        case 47: 
          { string.append('\"');
          }
        case 123: break;
        case 48: 
          { return symbol(Sym.FLOAT,yytext());
          }
        case 124: break;
        case 49: 
          { return symbol(Sym.CHAR,yytext());
          }
        case 125: break;
        case 50: 
          { return symbol(Sym.KW_FOR);
          }
        case 126: break;
        case 51: 
          { return symbol(Sym.KW_INT);
          }
        case 127: break;
        case 52: 
          { return symbol(Sym.KW_NEW);
          }
        case 128: break;
        case 53: 
          { return symbol(Sym.BOOL,yytext());
          }
        case 129: break;
        case 54: 
          { return symbol(Sym.KW_THIS);
          }
        case 130: break;
        case 55: 
          { return symbol(Sym.KW_ELSE);
          }
        case 131: break;
        case 56: 
          { return symbol(Sym.NULL);
          }
        case 132: break;
        case 57: 
          { return symbol(Sym.KW_CASE);
          }
        case 133: break;
        case 58: 
          { return symbol(Sym.KW_CHAR);
          }
        case 134: break;
        case 59: 
          { return symbol(Sym.KW_BOOL);
          }
        case 135: break;
        case 60: 
          { return symbol(Sym.KW_VOID);
          }
        case 136: break;
        case 61: 
          { return symbol(Sym.KW_FLOAT);
          }
        case 137: break;
        case 62: 
          { return symbol(Sym.KW_ARRAY);
          }
        case 138: break;
        case 63: 
          { return symbol(Sym.KW_SUPER);
          }
        case 139: break;
        case 64: 
          { return symbol(Sym.KW_CLASS);
          }
        case 140: break;
        case 65: 
          { return symbol(Sym.KW_BREAK);
          }
        case 141: break;
        case 66: 
          { return symbol(Sym.KW_WHILE);
          }
        case 142: break;
        case 67: 
          { return symbol(Sym.KW_RETURN);
          }
        case 143: break;
        case 68: 
          { return symbol(Sym.KW_STRING);
          }
        case 144: break;
        case 69: 
          { return symbol(Sym.KW_STATIC);
          }
        case 145: break;
        case 70: 
          { return symbol(Sym.KW_SWITCH);
          }
        case 146: break;
        case 71: 
          { return symbol(Sym.KW_PUBLIC);
          }
        case 147: break;
        case 72: 
          { return symbol(Sym.KW_EXTENDS);
          }
        case 148: break;
        case 73: 
          { return symbol(Sym.KW_PRIVATE);
          }
        case 149: break;
        case 74: 
          { return symbol(Sym.KW_DEFAULT);
          }
        case 150: break;
        case 75: 
          { return symbol(Sym.KW_IMPORT);
          }
        case 151: break;
        case 76: 
          { return symbol(Sym.KW_CONTINUE);
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
