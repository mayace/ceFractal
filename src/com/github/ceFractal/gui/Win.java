package com.github.ceFractal.gui;

import com.github.ceFractal.compiler.fractal.Scanner.SSymbol;
import com.github.ceFractal.compiler.fractal.Sym;
import com.github.ceFractal.compiler.pj.Parser;
import com.github.ceFractal.compiler.pj.Scanner;
import com.github.ceFractal.graphic.ConsShape;
import com.github.gg.CC;
import com.github.gg.Dict;
import com.github.gg.Err;
import com.github.gg.Node;
import com.github.gg.Operation;
import com.github.gg.Opt;
import com.github.gg.OptAssign;
import com.github.gg.OptExpr;
import com.github.gg.OptGoto;
import com.github.gg.OptIf;
import com.github.gg.OptMCall;
import com.github.gg.OptMemory;
import com.github.gg.Sim;
import com.github.gg.TErr;
import com.github.gg.TModifier;
import com.github.gg.TOperation;
import com.github.gg.TType;
import com.github.gg.TagSet;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.text.TabSet;
import javax.swing.text.TabStop;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author ce
 */
public class Win extends javax.swing.JFrame {

    private static int actualEtq = 0;

    private static String nuevaEtq() {
        return "etqY" + (++actualEtq);
    }

    /**
     * Creates new form Win
     */
    public Win() {
        initComponents();
        myinit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpumenu_pumenu = new javax.swing.JPopupMenu();
        jmitem_setactive = new javax.swing.JMenuItem();
        jsplitp_base1 = new javax.swing.JSplitPane();
        jsplitp_base2 = new javax.swing.JSplitPane();
        jtabbedp_tab = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepane_console = new javax.swing.JEditorPane();
        jsp_tree_scroll = new javax.swing.JScrollPane();
        jtree_tree = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProMenuItem = new javax.swing.JMenuItem();
        newMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openProMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        comilerMenu = new javax.swing.JMenu();
        jmitem_compile = new javax.swing.JMenuItem();
        jmitem_exec = new javax.swing.JMenuItem();
        jmitem_opt = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmitem_tabsim = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmitem_errores = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();

        jmitem_setactive.setText("SET ACTIVE");
        jmitem_setactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmitem_setactiveActionPerformed(evt);
            }
        });
        jpumenu_pumenu.add(jmitem_setactive);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jsplitp_base2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jsplitp_base2.setTopComponent(jtabbedp_tab);

        jScrollPane1.setViewportView(jepane_console);

        jsplitp_base2.setRightComponent(jScrollPane1);

        jsplitp_base1.setRightComponent(jsplitp_base2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("PJ");
        jtree_tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jsp_tree_scroll.setViewportView(jtree_tree);

        jsplitp_base1.setLeftComponent(jsp_tree_scroll);

        getContentPane().add(jsplitp_base1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newProMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        newProMenuItem.setText("New Project");
        newProMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newProMenuItem);

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);
        fileMenu.add(jSeparator1);

        openProMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openProMenuItem.setMnemonic('o');
        openProMenuItem.setText("Open Project");
        openProMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openProMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator3);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        comilerMenu.setText("Compiler");

        jmitem_compile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jmitem_compile.setText("Compilar");
        jmitem_compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmitem_compileActionPerformed(evt);
            }
        });
        comilerMenu.add(jmitem_compile);

        jmitem_exec.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jmitem_exec.setText("Ejecutar");
        jmitem_exec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmitem_execActionPerformed(evt);
            }
        });
        comilerMenu.add(jmitem_exec);

        jmitem_opt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jmitem_opt.setText("Optimizar");
        jmitem_opt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmitem_optActionPerformed(evt);
            }
        });
        comilerMenu.add(jmitem_opt);
        comilerMenu.add(jSeparator5);

        jmitem_tabsim.setText("Tabla de Simbolos");
        jmitem_tabsim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmitem_tabsimActionPerformed(evt);
            }
        });
        comilerMenu.add(jmitem_tabsim);
        comilerMenu.add(jSeparator4);

        jmitem_errores.setText("Errores");
        jmitem_errores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmitem_erroresActionPerformed(evt);
            }
        });
        comilerMenu.add(jmitem_errores);

        jMenuItem5.setText("Errores Lexicos");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        comilerMenu.add(jMenuItem5);

        jMenuItem6.setText("Error Sintacticos");
        comilerMenu.add(jMenuItem6);

        jMenuItem7.setText("Error Sematicos");
        comilerMenu.add(jMenuItem7);

        menuBar.add(comilerMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jmitem_tabsimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmitem_tabsimActionPerformed
        // TODO add your handling code here:

        WinTableDialog wintable = new WinTableDialog(this, false);
        final JTable table = wintable.getJtable_table();

        wintable.getJbutton_refresh().addActionListener((ActionEvent e) -> {
            refresh_symtable(table);
        });

        refresh_symtable(table);

//        wintable.setJtable_table(new JTable(data, headers));
        wintable.setVisible(true);


    }//GEN-LAST:event_jmitem_tabsimActionPerformed

    private void refresh_symtable(final JTable table) {
        Object[][] data = getSimData();
        Object[] headers = getSimHeaders();

        refresh_table(table, data, headers);
    }

    private void refresh_table(final JTable table, Object[][] data, Object[] headers) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setDataVector(data, headers);
    }

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void newProMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProMenuItemActionPerformed
        JFileChooser fchooser = getFChooser();
        fchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fchooser.setSelectedFile(null);

        int res = fchooser.showSaveDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            Path dselected = fchooser.getSelectedFile().toPath();
            if (Files.notExists(dselected) || !Files.isDirectory(dselected)) {
                // CREAR PROYECTO...
                String ruta = dselected.toString();
                String nombre = dselected.getFileName().toString();
                String fproject_str = String.format("<proyecto nombre=\"%1$s\" ruta = \"%2$s\"></proyecto>", nombre, ruta);

                try {
                    // Crear directorio
                    Files.createDirectory(dselected);

                    // Crear dir watch
                    //<editor-fold defaultstate="collapsed" desc="thread">
//                    new Thread(() -> {
//                        //??
////                        DefaultTreeModel model = (DefaultTreeModel) jtree_tree.getModel();
////                        synchronized (model) {
////                            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
////                            DefaultMutableTreeNode child = new DefaultMutableTreeNode(dselected.getFileName());
////                            root.add(child);
////                            model.reload();
////                        }
//
//                        // crear watch
//                        try {
//                            WatchService watcher = FileSystems.getDefault().newWatchService();
//                            dselected.register(watcher, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
//
//                            for (;;) {
//                                // 1.
//                                // wait for key to be signaled
//                                WatchKey key = watcher.take();
//
//                                // 2.
//                                // process
//                                for (WatchEvent<?> event : key.pollEvents()) {
//                                    WatchEvent.Kind<?> kind = event.kind();
//
//                                    // The filename is the
//                                    // context of the event.
//                                    WatchEvent<Path> pevent = (WatchEvent<Path>) event;
//                                    Path p = pevent.context();
//
//                                    boolean endsWith_pj = p.toString().endsWith(".pj");
//                                    boolean endsWith_frc = p.endsWith(".frc");
//
//                                    if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
////                                        if (endsWith_pj) {
////                                            pj_compile(dselected.resolve(p));
////                                        } else if (endsWith_frc) {
////                                        } else {
////                                        }
//                                    } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
//                                    } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
//                                        if (endsWith_pj) {
//                                            pj_compile(dselected.resolve(p));
//                                        } else if (endsWith_frc) {
//                                        } else {
//                                        }
//                                    } else {
//                                        // operation not supported...
//                                        System.err.println(p.toAbsolutePath().toString());
//                                        System.err.println(kind.name());
//                                        continue;
//                                    }
//
//                                }
//
//                                // 3.
//                                // Reset the key -- this step is critical if you want to
//                                // receive further watch events.  If the key is no longer valid,
//                                // the directory is inaccessible so exit the loop.
//                                boolean valid = key.reset();
//                                if (!valid) {
//                                    break;
//                                }
//                            }
//                        } catch (IOException ex) {//compiler
//                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (InterruptedException ex) {//watch takekey
//                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (Exception ex) {
//                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//
//                    }).start();
                    //</editor-fold>
                    try {
                        System.out.println("Project - creating...");
                        Thread.sleep(500);
                        System.out.println("Project - created...");
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    // Crear .pj file
                    final Path fproyecto = dselected.resolve(nombre + ".pj");
                    Files.createFile(fproyecto);

                    // Escribir en .pj file
                    Files.write(fproyecto, fproject_str.getBytes("utf8"));

                    pj_open(fproyecto);

                } catch (IOException ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }//GEN-LAST:event_newProMenuItemActionPerformed

    private static JFileChooser getFChooser() {
        return new JFileChooser();
    }

    private void openProMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser fChooser = getFChooser();

        fChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fChooser.setFileFilter(new FileNameExtensionFilter("Project File", "pj"));
        fChooser.setMultiSelectionEnabled(true);
        int res = fChooser.showOpenDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            File[] fselected = fChooser.getSelectedFiles();
            for (File f : fselected) {
                try {
                    pj_open(f.toPath());
                } catch (Exception ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_openProMenuItemActionPerformed

    private void jmitem_setactiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmitem_setactiveActionPerformed
        TreeModel model = getTreeModel();
        synchronized (model) {
            try {
                model.getClass().getField("active").set(model, jtree_tree.getLastSelectedPathComponent());
            } catch (NoSuchFieldException ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SecurityException ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jmitem_setactiveActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        DefaultTreeModel model = getTreeModel();
        // TODO add your handling code here:
        try {

            DefaultMutableTreeNode nodo = tree_project_nodo_active(jtree_tree);
            Pj pj = nodo_project(nodo);

            String res = JOptionPane.showInputDialog("Nombre del archivo .frc:");
            if (!res.trim().isEmpty()) {
                //crear archivo
                Path pnew = Paths.get(pj.getRuta(), res + ".frc");
//                System.err.println(pnew.toString());
                pj.getArchivos().add(pnew.toString());
                Files.createFile(pnew);
                Files.write(Paths.get(pj.getSource()), pj.getXml().getBytes("utf8"));

                synchronized (model) {
                    nodo.add(new DefaultMutableTreeNode(pnew.getFileName().toString()));
                    model.reload(nodo);
                }
            }
        } catch (SecurityException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newMenuItemActionPerformed

    private static Pj nodo_project(DefaultMutableTreeNode nodo) {
        return (Pj) nodo.getUserObject();
    }

    private DefaultMutableTreeNode tree_project_nodo_active(JTree tree) {
        DefaultMutableTreeNode nodo = null;
        try {
            TreeModel model = tree.getModel();
            final Object obj = model.getClass().getField("active").get(model);
            if (obj == null) {
                throw new UnsupportedOperationException("No hay proyecto activo...");
            }
            nodo = (DefaultMutableTreeNode) obj;
        } catch (NoSuchFieldException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nodo;

    }

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:

        Dict info = getSelectedTabInfo();

        if (info != null) {
            try {
                Files.write(Paths.get(info.getString("tooltip")), info.getString("text").getBytes("utf8"));
                notificar("File Saved..");
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_saveMenuItemActionPerformed

    private Dict getSelectedTabInfo() {
        int index = jtabbedp_tab.getSelectedIndex();
        if (index >= 0) {
            String tip = jtabbedp_tab.getToolTipTextAt(index);

            JScrollPane spane = (JScrollPane) jtabbedp_tab.getComponentAt(index);

            JEditorPane editor = (JEditorPane) spane.getViewport().getView();
            return new Dict() {
                {
                    put("text", editor.getText());
                    put("tooltip", tip);
                }
            };
        }
        return null;
    }

    private void jmitem_compileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmitem_compileActionPerformed
        // TODO add your handling code here:
        Dict tinfo = getSelectedTabInfo();

        if (tinfo != null) {
            final Dict actions = compiler_actions;
            // compilacion y definicion
            frc_def(tinfo.getString("text"), actions);
            // generacion codigo 3dir
            frc_3dir(actions);

            file_open(Paths.get("gg.3dir"), jtabbedp_tab);
        }
    }//GEN-LAST:event_jmitem_compileActionPerformed

    private void frc_compile(String input, Dict actions, boolean clear) {
        com.github.ceFractal.compiler.fractal.Scanner s = new com.github.ceFractal.compiler.fractal.Scanner(new StringReader(input));
        com.github.ceFractal.compiler.fractal.Parser p = new com.github.ceFractal.compiler.fractal.Parser(s);

        try {
            if (clear) {
                frc_compiler_clear(actions);
            }

            final Symbol sym = p.parse();
            notificar("File compiled...");

            if (sym.value != null) {
//                final Dict app = (Dict) sym.value;
                //
                if (!actions.containsKey("app")) {
                    actions.put("app", new Stack());
                }
                Stack app = actions.getStack("app");
                app.push(sym.value);

                // ejecutar sentencias...
                frc_compiler_stmts_exec((Dict) app.peek(), actions);
            }
        } catch (Exception ex) {
            error(ex);
        }
    }

    private void error(Exception ex) {
        Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
    }

    private void notificar(Object msg) {
        notificar("%s", msg);
    }

    private void notificar(String format, Object... msgs) {
        System.err.format(format, msgs);
        System.err.println();

    }

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser fchooser = getFChooser();

        fchooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fchooser.setFileFilter(new FileNameExtensionFilter("Frc Files", "frc"));

        int res = fchooser.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fchooser.getSelectedFile();
            file_open(selectedFile.toPath(), jtabbedp_tab);
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jmitem_erroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmitem_erroresActionPerformed
        // TODO add your handling code here:
        WinTableDialog wintable = new WinTableDialog(this, false);
        final JTable table = wintable.getJtable_table();

        wintable.getJbutton_refresh().addActionListener((ActionEvent e) -> {
            refresh_errtable(table);
        });

        refresh_errtable(table);

//        wintable.setJtable_table(new JTable(data, headers));
        wintable.setVisible(true);
    }//GEN-LAST:event_jmitem_erroresActionPerformed

    private void jmitem_execActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmitem_execActionPerformed
        // TODO add your handling code here:
        final Dict tab = getSelectedTabInfo();
        final String input = tab == null ? "" : tab.getString("text");
        final com.github.gg.compiler.tres.Scanner s = new com.github.gg.compiler.tres.Scanner(new StringReader(input));
        final com.github.gg.compiler.tres.Parser p = new com.github.gg.compiler.tres.Parser(s);
        try {
            listaf1 = new ArrayList<>();
            final Symbol sym = p.parse();
            notificar("3dir file compiled...");
            final Dict app = sym.value == null ? new Dict("list", new ArrayList<>()) : (Dict) sym.value;
            final Dict actions = actions_3dir;

            frc_compiler_clear(actions);

            actions.put("phase", "def");
            frc_compiler_stmts_exec(app.getDict("stmts"), actions);
            actions.put("phase", "exec");
            frc_compiler_stmts_exec(app.getDict("stmts"), actions);
            notificar("3dir file proceeded...");
            tmpty = new com.github.ceFractal.graphic.gui.Win(listaf1);
            tmpty.setVisible(true);

        } catch (Exception exc) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, exc);
        }
    }//GEN-LAST:event_jmitem_execActionPerformed

    private void jmitem_optActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmitem_optActionPerformed
        // TODO add your handling code here:
        final Dict tab = getSelectedTabInfo();
        final String input = tab == null ? "" : tab.getString("text");
        final com.github.gg.compiler.tres.Scanner s = new com.github.gg.compiler.tres.Scanner(new StringReader(input));
        final com.github.gg.compiler.tres.Parser p = new com.github.gg.compiler.tres.Parser(s);
        try {
            final Symbol sym = p.parse();
            notificar("3dir file compiled...");
            final Dict app = sym.value == null ? new Dict("list", new ArrayList<>()) : (Dict) sym.value;
            final Dict actions = actions_3dir;

            frc_compiler_clear(actions);

            actions.put("phase", "opt");
            frc_compiler_stmts_exec(app.getDict("stmts"), actions);

            final Object methods = actions.get("methods");

            final String res = optimizar(methods);
//            System.err.println(res);
//
            Path optfile = Paths.get("opt.cpp");
            Files.write(optfile, res.getBytes());
            file_open(optfile, jtabbedp_tab);

            notificar("3dir file proceeded...");

        } catch (Exception exc) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, exc);
        }
    }//GEN-LAST:event_jmitem_optActionPerformed

    private DefaultTreeModel getTreeModel() {
        return (DefaultTreeModel) jtree_tree.getModel();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final Win win = new Win();
                win.setVisible(true);
                win.setSize(800, 600);
                win.jepane_console.setVisible(false);
                win.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu comilerMenu;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JEditorPane jepane_console;
    private javax.swing.JMenuItem jmitem_compile;
    private javax.swing.JMenuItem jmitem_errores;
    private javax.swing.JMenuItem jmitem_exec;
    private javax.swing.JMenuItem jmitem_opt;
    private javax.swing.JMenuItem jmitem_setactive;
    private javax.swing.JMenuItem jmitem_tabsim;
    private javax.swing.JPopupMenu jpumenu_pumenu;
    private javax.swing.JScrollPane jsp_tree_scroll;
    private javax.swing.JSplitPane jsplitp_base1;
    private javax.swing.JSplitPane jsplitp_base2;
    private javax.swing.JTabbedPane jtabbedp_tab;
    private javax.swing.JTree jtree_tree;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem newProMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openProMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private void myinit() {

        jtree_tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                final int x = e.getX();
                final int y = e.getY();
                if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
                    TreePath tpath = jtree_tree.getPathForLocation(x, y);
                    if (tpath != null && tpath.getPathCount() == 3) {
                        Object obj = tpath.getLastPathComponent();
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tpath.getParentPath().getLastPathComponent();

                        Pj pj = nodo_project(node);
                        Path fpath = Paths.get(pj.getRuta(), obj.toString());

                        file_open(fpath, jtabbedp_tab);
                    }
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                final int x = e.getX();
                final int y = e.getY();

                if (e.isPopupTrigger()) {
                    TreePath tpath = jtree_tree.getPathForLocation(x, y);

                    if (tpath != null && tpath.getPathCount() == 2) {
                        jtree_tree.setSelectionPath(tpath);
                        jpumenu_pumenu.show(e.getComponent(), e.getX(), e.getY());
                    }

                }
            }

        });

        jtree_tree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("PROYECTOS")) {
            public DefaultMutableTreeNode active = null;

        });

        jtree_tree.setCellRenderer(new DefaultTreeCellRenderer() {

            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {

                JLabel label = (JLabel) super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus); //To change body of generated methods, choose Tools | Templates.

                DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;

                TreeModel model = tree.getModel();

                try {
                    Object get = model.getClass().getField("active").get(model);
                    if (get != null && get.equals(node)) {
                        label.setOpaque(true);
                        label.setBackground(Color.GRAY);
                    } else {
                        label.setOpaque(false);
                        setBackgroundNonSelectionColor(Color.CYAN);
                    }
                } catch (NoSuchFieldException ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SecurityException ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                }

                return label;
            }

        });

    }

    private Symbol pj_compile(Path path) throws FileNotFoundException, Exception {

        FileReader freader = new FileReader(path.toString());
        BufferedReader breader = new BufferedReader(freader);

        Scanner s = new Scanner(breader);
        Parser p = new Parser(s);

        return p.parse();

    }
//        System.out.println("Stmts -> " + ((Dict) res.value).getDictArrayList("list").size());
//        pj_process(res);

    private void file_open(Path fpath, JTabbedPane panel) {

        final JTextPane editor = new JTextPane();
        final JScrollPane scroll = new JScrollPane(editor);
        final JTextArea lines = new JTextArea("1");
        scroll.setRowHeaderView(lines);
        editor.setFont(getpPFont());
        editor.setBackground(Color.decode("#F8F8FF"));
//        setTabSize(editor, 4);
        lines.setBackground(Color.LIGHT_GRAY);
        lines.setFont(editor.getFont());

        String file_text = file_text(fpath);
        editor.setText(file_text);

        panel.addTab(fpath.getFileName().toString(), null, scroll, fpath.toString());
        notificar("File opened...");
        if (isFRCFile(fpath)) {
            editor.getDocument().addDocumentListener(new DocumentListener() {

                @Override
                public void insertUpdate(DocumentEvent e) {

                    try {
                        DefaultStyledDocument doc = (DefaultStyledDocument) (StyledDocument) e.getDocument();

                        com.github.ceFractal.compiler.fractal.Scanner s = new com.github.ceFractal.compiler.fractal.Scanner(new StringReader(e.getDocument().getText(0, e.getDocument().getLength() - 1)));

                        SSymbol token;
                        while ((token = s.next_token()) != null) {
                            if (token.sym == Sym.EOF) {
                                break;
                            }
                            SimpleAttributeSet attrs = getTokenStyle(token.sym);

                            final int offset = token.offset;
                            final int length = token.length;

                            SwingUtilities.invokeLater(() -> {
                                doc.setCharacterAttributes(offset, length, attrs, false);
                            });
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                    }

//                        DefaultStyledDocument doc = (DefaultStyledDocument) (StyledDocument) e.getDocument();
//
//                        try {
//                            StringBuilder builder = new StringBuilder();
//                            int toffset = 0;
//                            int tlength = 0;
//
//                            for (int i = offset; i >= 0; i--) {
//                                String c = doc.getText(i, 1);
//
//                                if (c.endsWith(" ") || c.endsWith("\t") || c.endsWith("\n")) {
//                                    toffset = i;
//                                    break;
//                                }
//                                builder.append(c);
//
//                            }
//
//                            builder = builder.reverse();
//
//                            for (int i = offset + 1; i < doc.getLength(); i++) {
//                                String c = doc.getText(i, 1);
//
//                                if (c.endsWith(" ") || c.endsWith("\t") || c.endsWith("\n")) {
//                                    break;
//                                }
//                                builder.append(c);
//                            }
//
//                            System.err.println(builder.toString());
//                            com.github.ceFractal.compiler.fractal.Scanner s = new com.github.ceFractal.compiler.fractal.Scanner(new StringReader(builder.toString()));
//
//                            ESymbol token;
//                            while ((token = s.next_token()) != null) {
//                                if (token.sym == Sym.EOF) {
//                                    break;
//                                }
//                                SimpleAttributeSet attrs = new SimpleAttributeSet();
//                                if (token.sym == Sym.ID) {
//                                    StyleConstants.setBold(attrs, true);
//                                    StyleConstants.setForeground(attrs, Color.black);
//
//                                } else if (token.sym == Sym.STRING) {
//                                    StyleConstants.setBold(attrs, false);
//                                    StyleConstants.setForeground(attrs, Color.orange);
//                                } else if (token.sym == Sym.INT) {
//                                    StyleConstants.setBold(attrs, false);
//                                    StyleConstants.setForeground(attrs, Color.blue);
//                                } else {
//                                    StyleConstants.setBold(attrs, false);
//                                    StyleConstants.setForeground(attrs, Color.black);
//                                }
//
//                                SwingUtilities.invokeLater(() -> {
////                                    doc.setCharacterAttributes(roffset, rlength, attrs, false);
//                                });
//                            }
//                        } catch (BadLocationException ex) {
//                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (IOException ex) {
//                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
//                        }
                }

                @Override

                public void removeUpdate(DocumentEvent e) {
                    int offset = e.getOffset();
                    int length = e.getLength();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    int offset = e.getOffset();
                    int length = e.getLength();

//                        try {
//                            String text = e.getDocument().getText(offset, length);
//                            System.err.println(text);
//                        } catch (BadLocationException ex) {
//                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
//                        }
                }

                private SimpleAttributeSet getTokenStyle(int sym) {
                    SimpleAttributeSet attrs = new SimpleAttributeSet();
                    switch (sym) {
                        case Sym.INT:
                            getStyle(attrs, Color.BLUE, false, false, false);
                            break;
                        case Sym.FLOAT:
                            getStyle(attrs, Color.BLUE, false, false, false);
                            break;
                        case Sym.CHAR:
                            getStyle(attrs, Color.decode("#90EE90"), false, false, false);
                            break;
                        case Sym.STRING:
                            getStyle(attrs, Color.decode("#006400"), false, false, false);
                            break;
                        case Sym.BOOL:
                            getStyle(attrs, Color.BLUE, false, false, false);
                            break;
                        case Sym.ID:
                            getStyle(attrs, Color.BLACK, false, true, false);
                            break;
                        case Sym.ERROR:
                            getStyle(attrs, Color.RED, false, false, true);
                            break;
                        case Sym.KW_INT:
                            getKWStyle(attrs);
                            break;
                        case Sym.KW_FLOAT:
                            getKWStyle(attrs);
                            break;
                        case Sym.KW_CHAR:
                            getKWStyle(attrs);
                            break;
                        case Sym.KW_STRING:
                            getKWStyle(attrs);
                            break;
                        case Sym.KW_BOOL:
                            getKWStyle(attrs);
                            break;
                        case Sym.KW_VOID:
                            getKWStyle(attrs);
                            break;
                        case Sym.KW_IMPORT:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_CLASS:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_EXTENDS:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_PUBLIC:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_PRIVATE:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_STATIC:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_NEW:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_THIS:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_SUPER:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_ARRAY:
                            getKWStyle2(attrs);
                            break;
                        case Sym.NULL:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_CONTINUE:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_BREAK:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_RETURN:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_FOR:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_WHILE:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_IF:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_ELSE:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_DO:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_SWITCH:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_CASE:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_DEFAULT:
                            getKWStyle2(attrs);
                            break;
                        case Sym.KW_LINEA:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.KW_TEXTO:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.KW_ARCO:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.KW_RECTANGULO:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.KW_OVALO:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.KW_POLIGONO:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.KW_LIENZO:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        case Sym.PRINT:
                            getStyle(attrs, Color.decode("#191970"), false, false, false);
                            break;
                        default:
                            getStyle(attrs, Color.BLACK, false, false, false);
                    }

                    return attrs;
                }

                private void getKWStyle2(SimpleAttributeSet attrs) {
                    getStyle(attrs, Color.decode("#228B22"), false, false, false);
                }

                private void getKWStyle(SimpleAttributeSet attrs) {
                    getStyle(attrs, Color.decode("#8B4513"), false, false, false);
                }

                private void getStyle(SimpleAttributeSet attrs, Color foreground, boolean bold, boolean italic, boolean underline) {
                    StyleConstants.setForeground(attrs, foreground);
                    StyleConstants.setBold(attrs, bold);
                    StyleConstants.setItalic(attrs, italic);
                    StyleConstants.setUnderline(attrs, underline);
                }
            }
            );

        }
    }

    private Font getpPFont() {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        final String[] fonts = ge.getAvailableFontFamilyNames();
        for (int i = 0; i < fonts.length; i++) {
            final String f = fonts[i];

        }
        return new Font("Ubuntu Mono", Font.PLAIN, 16);
    }

    private String file_text(Path fpath) {
        StringBuilder builder = new StringBuilder();

        try {
            List<String> lines = Files.readAllLines(fpath, Charset.forName("utf8"));
            for (String l : lines) {
                builder.append(l);
                builder.append("\n");
            }
//            builder.appsend("\n");
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
        return builder.toString();

    }

    private static boolean isFRCFile(Path fpath) {
        return fpath.toString().trim().toLowerCase().endsWith(".frc");
    }

    private Pj symbol2pj(Symbol res) {
        Dict val = (Dict) res.value;

        for (Object obj : val.getDictArrayList("list")) {
            Dict stmt = (Dict) obj;

            String tag = stmt.getString("tag");
            String tagname = stmt.getString("tagname");
            ArrayList<Dict> attr_list = stmt.getDict("attrs").getDictArrayList("list");
            ArrayList<Dict> body_stmt_list = stmt.getDict("body").getDictArrayList("list");

            Dict attrs = attrlist2Dict(attr_list);

//            if (!tag.equalsIgnoreCase("normal")) {
//                throw new UnsupportedOperationException("Etiqueta -> '" + tag + "' no es soportada...");
//            }
            if (!tagname.equalsIgnoreCase("proyecto")) {
                throw new UnsupportedOperationException("El nombre de la etiqueta -> '" + tagname + "' no es valida...");
            }
//
//            if (attr_dict.isEmpty() || !attr_dict.containsKey("nombre") || !attr_dict.containsKey("ruta")) {
//                System.err.println("La de la etiqueta -> '" + tagname + "' no contiene nombre o ruta del proyecto ...");
//                return null;
//            }

            // Procesar stmts de la etiqueta...
            Dict body_dict = unificarTags(body_stmt_list);
//            HashSet<String> body_dict_files, body_dict_main;
//            if (!body_dict.isEmpty()) {
//                //procesar etiqueta archivos
//                body_dict_files = taglist2set(body_dict.getDictArrayList("archivos"), "nombre");
//
//                //procesar etiqueta principal
//                body_dict_main = taglist2set(body_dict.getDictArrayList("principal"), "nombre");
//            }

//            String nombre = attrs.getDict("nombre").getString("val");
//            String ruta = attrs.getDict("ruta").getString("val");
//            pjman.put(attr_dict.getDict("ruta"), pjman.new Pj(nombre, ruta, null, null));
            // updating jtree...
            // Solo se procesara la primera etiqueta...
            return new Pj(
                    (attrs.containsKey("nombre") ? attrs.getString("nombre") : null),
                    (attrs.containsKey("ruta") ? attrs.getString("ruta") : null),
                    (body_dict.containsKey("archivos") ? taglist2set(body_dict.getDictArrayList("archivos"), "nombre") : null),
                    (body_dict.containsKey("principal") ? (taglist2set(body_dict.getDictArrayList("principal"), "nombre").isEmpty() ? null : taglist2set(body_dict.getDictArrayList("principal"), "nombre").iterator().next().toString()) : null)
            );
        }

        return null;
    }

    private Dict attrlist2Dict(ArrayList<Dict> attrlist) {
        Dict ret = new Dict();

        for (Dict attr : attrlist) {
            if (attr.getBoolean("is_attr")) {
                ret.put(attr.getDict("id").get("val").toString(), attr.getDict("val").get("val"));
            }
        }

        return ret;
    }

    private Dict unificarTags(ArrayList<Dict> taglist) {
        Dict ret = new Dict();

        // for each to  this 
//        taglist.stream().filter((tag) -> (tag.getBoolean("is_tag"))).forEach((tag) -> {
//            final String tagname = tag.getString("name");
//            final ArrayList tagbodylist = tag.getDict("body").getDictArrayList("list");
//
//            if (ret.containsKey(tagname)) {
//                ret.getDictArrayList(tagname).addAll(tagbodylist);
//            } else {
//                ret.put(tagname, tagbodylist);
//            }
//        });
        for (Dict tag : taglist) {
            if (tag.getBoolean("is_tag")) {
                final String tagname = tag.getString("tagname").toLowerCase();
                final ArrayList tagbodylist = tag.getDict("body").getDictArrayList("list");

                if (ret.containsKey(tagname)) {
                    ret.getDictArrayList(tagname).addAll(tagbodylist);
                } else {
                    ret.put(tagname, tagbodylist);
                }
            }
        }

        return ret;
    }

    private HashSet<String> taglist2set(ArrayList<Dict> taglist, String attrname) {
        HashSet<String> ret = new HashSet();

        for (Dict tag : taglist) {
            if (tag.getBoolean("is_tag")) {
                Dict attrdict = attrlist2Dict(tag.getDict("attrs").getDictArrayList("list"));
                if (attrdict.containsKey(attrname)) {
                    ret.add(attrdict.getString(attrname));
                }
            }
        }

        return ret;
    }

    private void pj_open(Path p) throws Exception {
        Symbol sym = pj_compile(p);
        Pj pj = symbol2pj(sym);
        pj.setSource(p.toString());

        if (pj == null) {
            throw new UnsupportedOperationException("No existe estructura de proyect en el archivo .pj...");
        }
        if (!pj.isOk()) {
            throw new UnsupportedOperationException("El archivo .pj no contienen información del nombre o ruta del proyecto...");
        }
        Path pruta = Paths.get(pj.getRuta());
        if (!Files.exists(pruta)) {
            throw new UnsupportedOperationException("No existe la ruta -> '" + pj.getRuta() + "'...");
        }
        if (!Files.isDirectory(pruta)) {
            throw new UnsupportedOperationException("No es un directorio la ruta -> '" + pj.getRuta() + "'...");
        }
//        if (pjman.containsKey(pj.getRuta())) {
//            throw new UnsupportedOperationException("Ya existe un proyecto con la ruta -> '" + pj.getRuta() + "'...");
//        }

//        pjman.put(pj.getRuta(), pj);
        System.err.println("ok");

        DefaultTreeModel model = (DefaultTreeModel) getTreeModel();

        synchronized (model) {
            DefaultMutableTreeNode pj_node = new DefaultMutableTreeNode(pj);

            pj.getArchivos().stream().forEach((f) -> {
                DefaultMutableTreeNode f_node = new DefaultMutableTreeNode(Paths.get(f).getFileName());
                pj_node.add(f_node);
            });

            ((DefaultMutableTreeNode) model.getRoot()).add(pj_node);
            model.reload();

        }
    }

    private void frc_compiler_stmts_exec(Dict app, Dict cactions) {
        ArrayList<Dict> stmts = app.getDictArrayList("list");

        for (int i = 0; i < stmts.size(); i++) {
            final Dict stmt = stmts.get(i);
            final Node nodo = stmt.getNode("nodo");
            if (nodo == null) {
                notificar("No Nodo..." + stmt);
                continue;
            }

            nodo.exec(cactions);

            if (cactions.containsKey("stmt_jump")) {
                i = cactions.getInt("stmt_jump");
                cactions.remove("stmt_jump");
            }

        }
//        for (Dict stmt : stmts) {
//            final Node nodo = stmt.getNode("nodo");
//            if (nodo == null) {
//                notificar("No Nodo..." + stmt);
//                continue;
//            }
//
//            nodo.exec(cactions);
//        }
    }

    private void frc_compiler_clear(Dict cactions) {
        final CC cc = (CC) cactions.get("cc");
        final Object operations = cactions.get("operations");
        final Object phase = cactions.get("phase");

        cactions.clear();
        cc.clear();

        cactions.put("cc", cc);
        cactions.put("operations", operations);
        cactions.put("phase", phase);
    }

    final Dict actions_3dir = new Dict(
            "cc", new com.github.gg.CC(),
            "operations", new HashMap<TOperation, Operation>() {
                {

                    //<editor-fold defaultstate="collapsed" desc="int to float">
                    put(TOperation.CAST_INT2FLOAT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
//                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_INT2FLOAT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="int to char">
                    put(TOperation.CAST_INT2CHAR, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_INT2CHAR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="int to boolean">
                    put(TOperation.CAST_INT2BOOLEAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_INT2BOOLEAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="int to string">
                    put(TOperation.CAST_INT2STRING, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_INT2STRING);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="float to int">
                    put(TOperation.CAST_FLOAT2INT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_FLOAT2INT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="float to string">
                    put(TOperation.CAST_FLOAT2STRING, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_FLOAT2STRING);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="char to int">
                    put(TOperation.CAST_CHAR2INT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_CHAR2INT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="char to string">
                    put(TOperation.CAST_CHAR2STRING, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_CHAR2STRING);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="string to int">
                    put(TOperation.CAST_STRING2INT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_STRING2INT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="string to float">
                    put(TOperation.CAST_STRING2FLOAT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_STRING2FLOAT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="string to char">
                    put(TOperation.CAST_STRING2CHAR, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_STRING2CHAR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="string to boolean">
                    put(TOperation.CAST_STRING2BOOLEAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_STRING2BOOLEAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="boolean to int">
                    put(TOperation.CAST_BOOLEAN2INT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_BOOLEAN2INT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="boolean to string">
                    put(TOperation.CAST_BOOLEAN2STRING, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                System.out.println(node_ref);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST_BOOLEAN2STRING);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_LINEA">
                    put(TOperation.NM_LINEA, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {
                            
                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }
                            
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                int v1 = 0;
                                int v2 = 0;
                                int v3 = 0;
                                int v4 = 0;
                                int v5 = 0;
                                int v6 = 0;
                                int v7 = 0;

                                for (int i = 0; i < 7; i++) {

                                    switch (i) {
                                        case 0:
                                            v1 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 1:
                                            v2 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            v3 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            v4 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            v5 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 5:
                                            v6 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 6:
                                            v7 = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;

                                    }

                                }
                                ConsShape linea = new ConsShape();
                                linea.tipo = 1;
                                linea.line_x1 = v1;
                                linea.line_y1 = v2;
                                linea.line_x2 = v3;
                                linea.line_y2 = v4;
                                linea.line_r = v5;
                                linea.line_g = v6;
                                linea.line_b = v7;
                                listaf1.add(linea);
                                notificar("ok... linea");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_LINEA);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_TEXTO">
                    put(TOperation.NM_TEXTO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {
                            
                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                String cadena = "";
                                int x = 0;
                                int y = 0;
                                int r = 0;
                                int g = 0;
                                int b = 0;
                                for (int i = 0; i < 6; i++) {

                                    switch (i) {
                                        case 0:
                                            int contador = 0;
                                            int pos_heap = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            while (contador != -1) {

                                                contador = (int) ca_cc.getHeap()[pos_heap];
                                                if (contador != -1) {
                                                    cadena += ((char) contador);
                                                }

                                                pos_heap++;
                                            }
                                            notificar(cadena);
                                            break;
                                        case 1:
                                            x = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            y = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            r = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            g = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 5:
                                            b = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                    }
                                    ConsShape texto = new ConsShape();
                                    texto.txt_x1c = x;
                                    texto.txt_y1c = y;
                                    texto.txt_Cadena = cadena;
                                    texto.txt_r = r;
                                    texto.txt_g = g;
                                    texto.txt_b = b;
                                    texto.tipo = 2;
                                    listaf1.add(texto);
                                }
                                notificar("ok... texto");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_TEXTO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_ARCO">
                    put(TOperation.NM_ARCO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }
                            
                            
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                int x = 0;
                                int y = 0;
                                int alto = 0;
                                int ancho = 0;
                                int ang_ini = 0;
                                int grados = 0;
                                int r = 0;
                                int g = 0;
                                int b = 0;
                                Boolean fill = false;
                                for (int i = 0; i < 10; i++) {
                                    //System.out.println(ca_cc.getStack()[ca_cc.getP()+i]);
                                    switch (i) {
                                        case 0:
                                            x = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 1:
                                            y = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            alto = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            ancho = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            ang_ini = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 5:
                                            grados = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 6:
                                            r = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 7:
                                            g = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 8:
                                            b = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 9:
                                            fill = ((int) (ca_cc.getStack()[ca_cc.getP() + i])) == 1 ? true : false;
                                            break;

                                    }
                                }
                                ConsShape arco = new ConsShape();
                                arco.tipo = 3;
                                arco.arcox = x;
                                arco.arcoy = y;
                                arco.arcoalto = alto;
                                arco.arcoancho = ancho;
                                arco.arco_ang_ini = ang_ini;
                                arco.arco_grados = grados;
                                arco.arco_r = r;
                                arco.arco_g = g;
                                arco.arco_b = b;
                                arco.arco_fill = fill;
                                listaf1.add(arco);
                                notificar("ok... arco");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_ARCO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_RECTANGULO">
                    put(TOperation.NM_RECTANGULO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }
                            
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                int x = 0;
                                int y = 0;
                                int alto = 0;
                                int ancho = 0;
                                int r = 0;
                                int g = 0;
                                int b = 0;
                                Boolean fill = false;
                                for (int i = 0; i < 8; i++) {
                                    //System.out.println(ca_cc.getStack()[ca_cc.getP()+i]);
                                    switch (i) {
                                        case 0:
                                            x = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 1:
                                            y = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            alto = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            ancho = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            r = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 5:
                                            g = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 6:
                                            b = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 7:
                                            fill = ((int) (ca_cc.getStack()[ca_cc.getP() + i])) == 1 ? true : false;
                                            break;

                                    }
                                }
                                ConsShape rectangulo = new ConsShape();
                                rectangulo.tipo = 4;
                                rectangulo.rectan_x = x;
                                rectangulo.rectan_y = y;
                                rectangulo.rectan_alto = alto;
                                rectangulo.rectan_ancho = ancho;
                                rectangulo.rectan_r = r;
                                rectangulo.rectan_g = g;
                                rectangulo.rectan_b = b;
                                rectangulo.recta_fill = fill;
                                listaf1.add(rectangulo);
                                notificar("ok... rectangulo");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_RECTANGULO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_OVALO">
                    put(TOperation.NM_OVALO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {
                            
                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {

                                int x = 0;
                                int y = 0;
                                int alto = 0;
                                int ancho = 0;
                                int r = 0;
                                int g = 0;
                                int b = 0;
                                Boolean fill = false;
                                for (int i = 0; i < 8; i++) {
                                    //System.out.println(ca_cc.getStack()[ca_cc.getP()+i]);
                                    switch (i) {
                                        case 0:
                                            x = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 1:
                                            y = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            alto = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            ancho = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            r = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 5:
                                            g = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 6:
                                            b = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 7:
                                            fill = ((int) (ca_cc.getStack()[ca_cc.getP() + i])) == 1 ? true : false;
                                            break;

                                    }
                                }
                                ConsShape ovalo = new ConsShape();
                                ovalo.tipo = 5;
                                ovalo.ovalo_x1 = x;
                                ovalo.ovalo_y1 = y;
                                ovalo.ovalo_alto = alto;
                                ovalo.ovalo_ancho = ancho;
                                ovalo.ovalo_r = r;
                                ovalo.ovalo_g = g;
                                ovalo.ovalo_b = b;
                                ovalo.ovalo_fill = fill;
//                                System.out.println("entro a 3d");
                                listaf1.add(ovalo);
                                notificar("ok ... ovalo ");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_OVALO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_POLIGONO">
                    put(TOperation.NM_POLIGONO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {
                            
                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                int x = 0;
                                int y = 0;
                                int r = 0;
                                int g = 0;
                                int b = 0;
                                Boolean fill = false;
                                for (int i = 0; i < 6; i++) {
                                    //System.out.println(ca_cc.getStack()[ca_cc.getP()+i]);
                                    switch (i) {
                                        case 0:
                                            x = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 1:
                                            y = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            r = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            g = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            b = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 5:
                                            fill = ((int) (ca_cc.getStack()[ca_cc.getP() + i])) == 1 ? true : false;
                                            break;

                                    }
                                }
                                ConsShape poligono = new ConsShape();
                                poligono.tipo = 6;
                                //esta parte hay q modifica ya que esta solo de prueba
                                int arrx[] = new int[3];
                                int arry[] = new int[3];
                                arrx[0] = x + (int) (Math.random() * 25 + 1);
                                arry[0] = y + (int) (Math.random() * 25 + 1);

                                arrx[1] = x + (int) (Math.random() * 25 + 1);
                                arry[1] = y + (int) (Math.random() * 25 + 1);

                                arrx[2] = x + (int) (Math.random() * 25 + 1);
                                arry[2] = y + (int) (Math.random() * 25 + 1);
                                //modificar despues
                                poligono.polig_x = arrx;
                                poligono.polig_y = arry;
                                poligono.polig_r = r;
                                poligono.polig_g = g;
                                poligono.polig_b = b;
                                poligono.ovalo_fill = fill;
                                listaf1.add(poligono);
                                notificar("ok... poligono");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_POLIGONO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NM_LIENZO">
                    put(TOperation.NM_LIENZO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {
                            
                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                int ancho = 0;
                                int alto = 0;
                                int r = 0;
                                int g = 0;
                                int b = 0;

                                for (int i = 0; i < 6; i++) {
                                    //System.out.println(ca_cc.getStack()[ca_cc.getP()+i]);
                                    switch (i) {
                                        case 0:
                                            ancho = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 1:
                                            alto = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 2:
                                            r = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 3:
                                            g = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;
                                        case 4:
                                            b = (int) ca_cc.getStack()[ca_cc.getP() + i];
                                            break;

                                    }
                                }
                                ConsShape lienzo = new ConsShape();
                                lienzo.tipo = 7;

                                lienzo.lien_ancho = ancho;
                                lienzo.lien_alto = alto;
                                lienzo.lien_r = r;
                                lienzo.lien_g = g;
                                lienzo.lien_g = b;
                                listaf1.add(lienzo);
                                notificar("ok ... lienzo");
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_LIENZO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="PRINT_BOOLEAN">
                    put(TOperation.PRINT_BOOLEAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }
                            
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {

                                final float num = ca_cc.getStack()[ca_cc.getP()];
                                print((int) num == 1 ? true : false);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.PRINT_BOOLEAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="PRINT_CHAR">
                    put(TOperation.PRINT_CHAR, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }
                            
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {

                                final float num = ca_cc.getStack()[ca_cc.getP()];
                                print((char) (int) num);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.PRINT_CHAR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="PRINT_NUM">
                    put(TOperation.PRINT_NUM, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref.getDict("name");
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }
                            
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {

                                final float num = ca_cc.getStack()[ca_cc.getP()];
                                print(num);
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.PRINT_NUM);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_CALL">
                    put(TOperation.METHOD_CALL, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");
                        final Stack<String> ca_scope = ca.getStack("scope");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");
                        final Dict node_ref_name = node_ref.getDict("name");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Node node_ref_name_node = node_ref_name.getNode("nodo");
                                final Dict node_ref_name_node_ref = node_ref_name_node.getDictRef();
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptMCall(node_ref_name_node_ref_val), actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                final Node node_ref_name_node = node_ref_name.getNode("nodo");
                                final Dict node_ref_name_node_ref = node_ref_name_node.getDictRef();
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                if (!ca_cc.getMethods().containsKey(node_ref_name_node_ref_val)) {
                                    throwException("No existe el metodo -> %s", node_ref_name_node_ref_val);
                                }

                                final Dict method = ca_cc.getMethods().get(node_ref_name_node_ref_val);

                                ca_scope.push(node_ref_name_node_ref_val);
                                frc_compiler_stmts_exec(method.getDict("stmts"), ca);
                                ca_scope.pop();

                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.METHOD_CALL);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="IF">
                    put(TOperation.STMT_IF, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Node node_l = node.getLeft();
                                final Dict node_l_val = node_l.getDictVal();
                                final Object node_l_val_val = node_l_val.get("val");

                                final Dict node_ref_goto = node_ref.getDict("goto");
                                final Node node_ref_goto_node = node_ref_goto.getNode("nodo");
                                final Dict nodo_ref_goto_node_ref = node_ref_goto_node.getDictRef();
                                final Dict node_ref_goto_node_ref_name = nodo_ref_goto_node_ref.getDict("name");
                                final Node node_ref_goto_node_ref_name_node = node_ref_goto_node_ref_name.getNode("nodo");
                                final Dict node_ref_goto_node_ref_name_node_ref = node_ref_goto_node_ref_name_node.getDictRef();
                                final Object node_ref_goto_node_ref_name_node_ref_val = node_ref_goto_node_ref_name_node_ref.get("val");

                                opt_addStmt(new OptIf(node_l_val_val, new OptGoto(node_ref_goto_node_ref_name_node_ref_val)), actions);
                                return null;
                            }
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                final Dict node_l_val = node.getLeft().getDictVal();
                                final int node_l_val_val = (int) node_l_val.getFloat("val");

                                if (node_l_val_val == 1) {
                                    final Dict node_ref_goto = node_ref.getDict("goto");
                                    final Node node_ref_goto_node = node_ref_goto.getNode("nodo");

                                    node_ref_goto_node.exec(actions);
                                }

                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.STMT_IF);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MENOR QUE">
                    put(TOperation.LTHAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("<", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val < node_r_val_val ? 1 : 0;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.LTHAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MENOR IGUAL QUE">
                    put(TOperation.LETHAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("<=", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1.0f;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val <= node_r_val_val ? 1 : 0;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.LETHAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MAYOR QUE">
                    put(TOperation.BTHAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr(">", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val > node_r_val_val ? 1 : 0;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.BTHAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MAYOR IGUAL QUE">
                    put(TOperation.BETHAN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr(">=", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val >= node_r_val_val ? 1 : 0;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.BETHAN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="IGUAL">
                    put(TOperation.DEQUAL, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("==", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val == node_r_val_val ? 1 : 0;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.DEQUAL);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NO IGUAL">
                    put(TOperation.NEQUAL, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("!=", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val != node_r_val_val ? 1 : 0;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.NEQUAL);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="GOTO">
                    put(TOperation.GOTO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");
                        final Stack ca_scope = ca.getStack("scope");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name = node_ref.getDict("name");
                                final Node node_ref_name_node = node_ref_name.getNode("nodo");
                                final Dict node_ref_name_node_ref = node_ref_name_node.getDictRef();
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                opt_addStmt(new OptGoto(node_ref_name_node_ref_val), actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                final String ca_scope_peek = ca_scope.peek().toString();

                                final Dict node_ref_name = node_ref.getDict("name");
                                final Node node_ref_name_node = node_ref_name.getNode("nodo");
                                final Dict node_ref_name_node_ref = node_ref_name_node.getDictRef();
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");

                                final Dict method = ca_cc.getMethods().get(ca_scope_peek);
                                final Dict method_labels = method.getDict("labels");

                                if (!method_labels.containsKey(node_ref_name_node_ref_val)) {
                                    throwException("No existe la etiqueta -> %s en el metodo -> %s", node_ref_name_node_ref_val, ca_scope_peek);
                                }

                                final int method_labels_position = method_labels.getInt(node_ref_name_node_ref_val);

                                ca.put("stmt_jump", method_labels_position);

                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.GOTO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="LABEL">
                    put(TOperation.LABEL, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");
                        final Stack ca_scope = ca.getStack("scope");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");
                        final Dict node_ref_name = node_ref.getDict("name");
                        final int node_ref_position = node_ref.getInt("position");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_ref_name_node_ref = node_ref_name.getNode("nodo").getDictRef();
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");
                                opt_registerLabel(node_ref_name_node_ref_val, actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                final String ca_scope_peek = ca_scope.peek().toString();

                                final Dict node_ref_name_node_ref = node_ref_name.getNode("nodo").getDictRef();
                                final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");
                                final Dict method = ca_cc.getMethods().get(ca_scope_peek);
                                final Dict method_labels = method.getDict("labels");
                                method_labels.put(node_ref_name_node_ref_val, node_ref_position);

                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.LABEL);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_METHOD">
                    put(TOperation.DEF_METHOD, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            final Dict node_ref_name = node_ref.getDict("name");
                            final Node node_ref_name_node = node_ref_name.getNode("nodo");
                            final Dict node_ref_name_node_ref = node_ref_name_node.getDictRef();
                            final String node_ref_name_node_ref_val = node_ref_name_node_ref.getString("val");
                            final Dict node_ref_stmts = node_ref.getDict("stmts");

                            if (isOptPhase(ca_phase)) {

                                frc_compiler_stmts_exec(node_ref_stmts, ca);
                                opt_registerMethod(node_ref_name_node_ref_val, actions);
                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                ca_cc.getMethods().put(node_ref_name_node_ref_val, new Dict("stmts", node_ref_stmts, "labels", new Dict()));
                                final Stack<String> scope = new Stack();
                                ca.put("scope", scope);
                                scope.push(node_ref_name_node_ref_val);
                                frc_compiler_stmts_exec(node_ref_stmts, ca);
                                scope.push(node_ref_name_node_ref_val);
                                ca.remove("scope");
                                return null;
                            }

                            if (isExecPhase(ca_phase)) {
                                if (node_ref_name_node_ref_val.equals("void_main_1__1")) {
                                    final Stack<String> scope = new Stack();
                                    ca.put("scope", scope);
                                    scope.push(node_ref_name_node_ref_val);
                                    frc_compiler_stmts_exec(node_ref_stmts, ca);
                                    scope.push(node_ref_name_node_ref_val);
                                    ca.remove("scope");
                                }
                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.DEF_METHOD);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="SET_VAR">
                    put(TOperation.SET_VAR, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Dict node_ref_name = node_ref.getDict("name");
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final Dict node_l_val = node.getLeft().getDictVal();
                                final Object node_l_val_val = node_l_val.get("val");
                                final Dict node_r_val = node.getRight().getDictVal();
                                final Object node_r_val_val = node_r_val.get("val");

                                opt_addStmt(new OptAssign(node_l_val_val, node_r_val_val), actions);

                                return null;
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Dict node_l_val = node_l.getDictVal();
                            final Object node_l_val_valp = node_l_val.get("valp");
                            final Dict node_l_ref = node_l.getDictRef();
                            final String node_l_ref_val = node_l_ref.getString("val");
                            final Node node_r = node.getRight();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_r_val_val = node_r_val.getFloat("val");

                            if (isExecPhase(ca_phase)) {

                                final String node_l_ref_type = node_l_ref.getString("type");

                                if (node_l_ref_type.equals(TType.REF.toString())) {
                                    ca_cc.getTemps().put(node_l_ref_val, node_r_val_val);
                                } else if (node_l_ref_type.equals("memory")) {
                                    final int node_ref_name_memory = node_l_ref.getInt("memory");
                                    switch (node_ref_name_memory) {
                                        case com.github.gg.compiler.tres.Sym.STACK:
                                            ca_cc.getStack()[(int) node_l_val_valp] = node_r_val_val;
                                            break;
                                        case com.github.gg.compiler.tres.Sym.HEAP:
                                            ca_cc.getHeap()[(int) node_l_val_valp] = node_r_val_val;
                                            break;
                                        default:
                                            throwException("wtf %s", TOperation.SET_VAR);
                                    }

                                } else if (node_l_ref_type.equals("pointer")) {
                                    final int node_ref_name_pointer = node_l_ref.getInt("pointer");
                                    final String node_ref_name_val = node_l_ref.getString("val");
                                    switch (node_ref_name_pointer) {
                                        case com.github.gg.compiler.tres.Sym.P:
                                            ca_cc.setP((int) node_r_val_val);
                                            break;
                                        case com.github.gg.compiler.tres.Sym.H:
                                            ca_cc.setH((int) node_r_val_val);
                                            break;
                                        default:
                                            throwException("Puntero no reconocido -> %d = %s", node_ref_name_pointer, node_ref_name_val);
                                    }
                                } else {
                                    throwException("Tipo %s no reconocido...", node_l_ref_type);
                                }

                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.SET_VAR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="LMINUS">
                    put(TOperation.LMINUS, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {
                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");

                                return new Dict("val", "-" + node_l_val_val);
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Dict node_l_val = node_l.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {
                                node_val_val = -node_l_val_val;

                                node_val.put("val", node_val_val);
                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.LMINUS);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="PLUS">
                    put(TOperation.PLUS, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("+", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val + node_r_val_val;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.PLUS);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MINUS">
                    put(TOperation.MINUS, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("-", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }
                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val - node_r_val_val;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.MINUS);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MULT">
                    put(TOperation.MULT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final Object ca_phase = ca.get("phase");
                        final CC ca_cc = (CC) ca.get("cc");

                        final Dict node_ref = node.getDictRef();
                        final Object node_ref_info = node_ref.get("info");

                        try {

                            if (isOptPhase(ca_phase)) {
                                final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                return new Dict("val", new OptExpr("*", node_l_val_val, node_r_val_val));
                            }

                            if (isDefPhase(ca_phase)) {
                                return null;
                            }
                            final Node node_l = node.getLeft();
                            final Node node_r = node.getRight();
                            final Dict node_l_val = node_l.getDictVal();
                            final Dict node_r_val = node_r.getDictVal();
                            final float node_l_val_val = node_l_val.getFloat("val");
                            final float node_r_val_val = node_r_val.getFloat("val");

                            final Dict node_val = new Dict();
                            float node_val_val = -1;

                            if (isExecPhase(ca_phase)) {

                                node_val_val = node_l_val_val * node_r_val_val;

                                node_val.put("val", node_val_val);

                                return node_val;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                        }

                        return noActionsProcessed(TOperation.MULT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DIV">
                    put(TOperation.DIV,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");
                                final CC ca_cc = (CC) ca.get("cc");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");
                                try {

                                    if (isOptPhase(ca_phase)) {
                                        final String node_l_val_val = node.getLeft().getDictVal().getString("val");
                                        final String node_r_val_val = node.getRight().getDictVal().getString("val");

                                        return new Dict("val", new OptExpr("/", node_l_val_val, node_r_val_val));
                                    }

                                    if (isDefPhase(ca_phase)) {
                                        return null;
                                    }
                                    final Node node_l = node.getLeft();
                                    final Node node_r = node.getRight();
                                    final Dict node_l_val = node_l.getDictVal();
                                    final Dict node_r_val = node_r.getDictVal();
                                    final float node_l_val_val = node_l_val.getFloat("val");
                                    final float node_r_val_val = node_r_val.getFloat("val");

                                    final Dict node_val = new Dict();
                                    float node_val_val = -1;

                                    if (isExecPhase(ca_phase)) {

                                        node_val_val = node_l_val_val / node_r_val_val;

                                        node_val.put("val", node_val_val);

                                        return node_val;
                                    }

                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.DIV);
                            }
                    );
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MOD">
                    put(TOperation.MOD,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");
                                final CC ca_cc = (CC) ca.get("cc");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");

                                try {

                                    if (isDefPhase(ca_phase)) {
                                        return null;
                                    }
                                    final Node node_l = node.getLeft();
                                    final Node node_r = node.getRight();
                                    final Dict node_l_val = node_l.getDictVal();
                                    final Dict node_r_val = node_r.getDictVal();
                                    final float node_l_val_val = node_l_val.getFloat("val");
                                    final float node_r_val_val = node_r_val.getFloat("val");

                                    final Dict node_val = new Dict();
                                    float node_val_val = -1;

                                    if (isExecPhase(ca_phase)) {

                                        node_val_val = node_l_val_val % node_r_val_val;

                                        node_val.put("val", node_val_val);

                                        return node_val;
                                    }

                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.MOD);
                            }
                    );
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="EXPONENTE">
                    put(TOperation.EXP,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");
                                final CC ca_cc = (CC) ca.get("cc");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");

                                try {
                                    if (isDefPhase(ca_phase)) {
                                        return null;
                                    }
                                    final Node node_l = node.getLeft();
                                    final Node node_r = node.getRight();
                                    final Dict node_l_val = node_l.getDictVal();
                                    final Dict node_r_val = node_r.getDictVal();
                                    final float node_l_val_val = node_l_val.getFloat("val");
                                    final float node_r_val_val = node_r_val.getFloat("val");

                                    final Dict node_val = new Dict();
                                    float node_val_val = -1;

                                    if (isExecPhase(ca_phase)) {

                                        node_val_val = node_l_val_val * node_r_val_val;

                                        node_val.put("val", node_val_val);

                                        return node_val;
                                    }

                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.EXP);
                            }
                    );
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="LEAF">
                    put(TOperation.LEAF,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");
                                final CC ca_cc = (CC) ca.get("cc");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");

                                try {
                                    if (isOptPhase(ca_phase)) {
                                        final String node_ref_val = node_ref.getString("val");
                                        final String node_ref_type = node_ref.getString("type");

                                        if (node_ref_type.equals("memory")) {
                                            final int node_ref_memory = node_ref.getInt("memory");
                                            final String node_ref_name = node_ref.getString("name");
                                            final Dict node_ref_position = node_ref.getDict("position");
                                            final Node node_ref_position_node = node_ref_position.getNode("nodo");
                                            node_ref_position_node.exec(actions);
                                            final Dict node_ref_position_node_val = node_ref_position_node.getDictVal();
                                            final Object node_ref_position_node_val_val = node_ref_position_node_val.getString("val");

                                            return new Dict("val", new OptMemory(node_ref_name, node_ref_position_node_val_val));

                                        }
                                        return new Dict("val", node_ref_val);
                                    }

                                    if (isDefPhase(ca_phase)) {
                                        return null;
                                    }

                                    final String node_ref_val = node_ref.getString("val");
                                    final String node_ref_type = node_ref.getString("type");

                                    final Dict node_val = new Dict();
                                    float node_val_val = -1.0f;
                                    Object node_val_valp = node_ref_val;
                                    final String node_val_valt = node_ref_type;

                                    if (isExecPhase(ca_phase)) {

                                        if (node_ref_type.equals(TType.INT.toString())) {
                                            node_val_val = Float.parseFloat(node_ref_val);
                                        } else if (node_ref_type.equals(TType.FLOAT.toString())) {
                                            node_val_val = Float.parseFloat(node_ref_val);
                                        } else if (node_ref_type.equals(TType.REF.toString())) {
                                            node_val_val = ca_cc.getTemps().containsKey(node_ref_val) ? ca_cc.getTemps().get(node_ref_val) : -1.0f;
                                        } else if (node_ref_type.equals("memory")) {
                                            final int node_ref_memory = node_ref.getInt("memory");
                                            final Dict node_ref_position = node_ref.getDict("position");
                                            final Node node_ref_position_node = node_ref_position.getNode("nodo");
                                            node_ref_position_node.exec(actions);
                                            final Dict node_ref_position_node_val = node_ref_position_node.getDictVal();
                                            final int node_ref_position_node_val_val = (int) node_ref_position_node_val.getFloat("val");

                                            switch (node_ref_memory) {
                                                case com.github.gg.compiler.tres.Sym.STACK:
                                                    node_val_val = ca_cc.getStack()[node_ref_position_node_val_val];
                                                    break;
                                                case com.github.gg.compiler.tres.Sym.HEAP:
                                                    node_val_val = ca_cc.getHeap()[node_ref_position_node_val_val];
                                                    break;
                                                default:
                                                    throwException("wtf %s", TOperation.LEAF);
                                            }
                                            node_val_valp = node_ref_position_node_val_val;

                                        } else if (node_ref_type.equals("pointer")) {
                                            final int node_ref_pointer = node_ref.getInt("pointer");
                                            switch (node_ref_pointer) {
                                                case com.github.gg.compiler.tres.Sym.P:
                                                    node_val_val = ca_cc.getP();
                                                    break;
                                                case com.github.gg.compiler.tres.Sym.H:
                                                    node_val_val = ca_cc.getH();
                                                    break;
                                                default:
                                                    throwException("Puntero no reconocido -> %d = %s", node_ref_pointer, node_ref_val);
                                            }

                                        } else {
                                            throwException("Tipo %s no reconocido...", node_ref_type);
                                        }

                                        node_val.put("val", node_val_val);
                                        node_val.put("valp", node_val_valp);
                                        node_val.put("valt", node_val_valt);

                                        return node_val;
                                    }

                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.SEMANTICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.LEAF);
                            }
                    );
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="ERROR_LEXICO">
                    put(TOperation.ERROR_LEXICO,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");

                                try {

                                    if (isDefPhase(ca_phase)) {
                                        throwException("Caracter no reconocido...");
                                        return null;
                                    }

                                    if (isExecPhase(ca_phase)) {

                                        return null;
                                    }
                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.LEXICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.ERROR_LEXICO);
                            }
                    );
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="ERROR_SINTACTICO">
                    put(TOperation.ERROR_SINTACTICO,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");
                                try {

                                    if (isDefPhase(ca_phase)) {
                                        throwException("Error de sintaxis...");
                                        return null;
                                    }
                                    if (isExecPhase(ca_phase)) {
//                                throwException("Error de sintaxis...");
                                        return null;
                                    }

                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.SINTACTICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.ERROR_SINTACTICO);
                            }
                    );
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="COMENTARIO">
                    put(TOperation.COMMENT,
                            (Operation) (Node node, Object actions) -> {
                                final Dict ca = (Dict) actions;
                                final Object ca_phase = ca.get("phase");

                                final Dict node_ref = node.getDictRef();
                                final Object node_ref_info = node_ref.get("info");

                                try {

                                    return null;
                                } catch (UnsupportedOperationException exc) {
                                    compiler_error(exc, TErr.LEXICO, node_ref_info, actions);
                                }

                                return noActionsProcessed(TOperation.COMMENT);
                            }
                    );
                    //</editor-fold>

                }

                private void print(final Object num) {
                    System.out.print(num);
                }

                private void throwException(String format, Object... args) throws UnsupportedOperationException {
                    throwException(String.format(format, args));
                }

                private void throwException(String msg) throws UnsupportedOperationException {
                    throw new UnsupportedOperationException(msg);
                }

                private Object noActionsProcessed(TOperation operation) {
                    notificar("No actions for -> " + operation);
                    return null;
                }

                private boolean isDefPhase(Object phase) {
                    return phase.equals("def");
                }

                private boolean isExecPhase(final Object phase) {
                    return phase.equals("exec");
                }

                private void compiler_error(Exception exc, TErr terr, Object info, Object actions) {
                    final CC cc = (CC) ((Dict) actions).get("cc");
                    final Err err = new Err(terr, exc.getMessage(), info);

                    cc.getErrs().add(err);
                    System.out.println(err);
                }

                private boolean isOptPhase(Object phase) {
                    return phase.toString().equals("opt");
                }

                private ArrayList opt_getBBlock(Object actions) {
                    final Dict ca = (Dict) actions;
                    final String key = "bblock";

                    if (!ca.containsKey(key)) {
                        ca.put(key, new ArrayList());
                    }
                    return ca.getArrayList(key);
                }

                private Object opt_getLabel(Object actions) {
                    final Dict ca = (Dict) actions;
                    final String key = "label";

                    if (!ca.containsKey(key)) {
                        ca.put(key, "");
                    }
                    return ca.get(key);
                }

                private LinkedHashMap<String, ArrayList> opt_getLabels(Object actions) {
                    final Dict ca = (Dict) actions;
                    final String key = "bblocks";

                    if (!ca.containsKey(key)) {
                        ca.put(key, new LinkedHashMap<>());
                    }
                    return (LinkedHashMap<String, ArrayList>) ca.get(key);
                }

                private LinkedHashMap<String, LinkedHashMap> opt_getMethods(Object actions) {
                    final Dict ca = (Dict) actions;
                    final String key = "methods";

                    if (!ca.containsKey(key)) {
                        ca.put(key, new LinkedHashMap<>());
                    }
                    return (LinkedHashMap<String, LinkedHashMap>) ca.get(key);
                }

                private void opt_addStmt(Object stmt, Object actions) {
                    opt_getBBlock(actions).add(stmt);
                }

                private void opt_registerLabel(Object label, Object actions) {
                    final Dict ca = (Dict) actions;
                    final ArrayList prev_bblock = opt_getBBlock(actions);
                    final String prev_label = opt_getLabel(actions).toString();
                    // guardar el bloque anterior
                    opt_getLabels(actions).put(prev_label, prev_bblock);
                    // registrar el nuevo
                    ca.put("label", label);
                    ca.remove("bblock");

//                    System.out.println(prev_label + ":");
//                    System.out.println(opt_ArrayList2String(prev_bblock));
                }

                private String opt_ArrayList2String(ArrayList list) {
                    final StringBuilder builder = new StringBuilder();
                    for (int i = 0; i < list.size(); i++) {
                        Object item = list.get(i);
                        builder.append(item);
                        builder.append("\n");
                    }
                    return builder.toString();
                }

                private void opt_registerMethod(Object name, Object actions) {
                    final Dict ca = (Dict) actions;
                    // obtener el ultimo
                    opt_registerLabel("", actions);
                    // limpiar
                    ca.remove("label");
                    ca.remove("bblock");

                    final LinkedHashMap labels = opt_getLabels(actions);
                    opt_getMethods(actions).put(name.toString(), labels);
                }
            }
    );
    ArrayList<ConsShape> listaf1;
    com.github.ceFractal.graphic.gui.Win tmpty;
    Dict compiler_actions = new Dict(
            "cc", new com.github.gg.CC(),
            "operations", new HashMap<TOperation, Operation>() {
                {

                    //<editor-fold defaultstate="collapsed" desc="TERNARIO">
                    put(TOperation.TERNARY, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final Stack flow_control = ca.getStack("flow_control");
                        final String flow_control_peek = (String) flow_control.peek();

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_condition = ref.getDict("condition");
                        final Dict ref_vtrue = ref.getDict("vtrue");
                        final Dict ref_vfalse = ref.getDict("vfalse");

                        final Dict val = new Dict();
                        Object info = ref_info;
                        try {
                            if (is3dirPhase(phase)) {

                                poolOn(actions);
                                write3dir("// !!!!!!!! ternario !!!!!!!! //");
                                write3dir("// !!!! condicion");
                                final Node ref_condition_node = ref_condition.getNode("nodo");
                                ref_condition_node.exec(actions);
                                final Dict ref_condition_node_val = ref_condition_node.getDictVal();
                                if (ref_condition_node_val == null) {
                                    throwException("No se pudo calcular la condicion...");
                                }
                                final String ref_condition_node_val_type = ref_condition_node_val.getString("type");
                                final String ref_condition_node_val_val = ref_condition_node_val.getString("val");
                                final TagSet ref_condition_node_val_tags = ref_condition_node_val.getTags("tags");

                                if (!ref_condition_node_val_type.equals(TType.BOOLEAN.toString())) {
                                    throwException("Se esperaba tipo de dato -> %s, se obtuvo -> %s", TType.BOOLEAN, ref_condition_node_val_type);
                                }

                                final String l1 = getLabel(actions);
                                final String t1 = getTemp(actions);

                                write3dir("// !!!! condicion true");
                                write3dir("%s:", ref_condition_node_val_tags.etqVerdad);

                                final Node ref_vtrue_node = ref_vtrue.getNode("nodo");
                                ref_vtrue_node.exec(actions);
                                final Dict ref_vtrue_node_val = ref_vtrue_node.getDictVal();
                                if (ref_vtrue_node_val == null) {
                                    throwException("No se pudo calcula el valor de verdadero...");
                                }
                                final String ref_vtrue_node_val_val = ref_vtrue_node_val.getString("val");
                                final String ref_vtrue_node_val_type = ref_vtrue_node_val.getString("type");
                                write3dir("%s = %s;", t1, ref_vtrue_node_val_val);

                                write3dir("goto %s;", l1);
                                write3dir("// !!!! condicion false");
                                write3dir("%s:", ref_condition_node_val_tags.etqFalso);
                                final Node ref_vfalse_node = ref_vfalse.getNode("nodo");
                                ref_vfalse_node.exec(actions);
                                final Dict ref_vfalse_node_val = ref_vfalse_node.getDictVal();
                                if (ref_vfalse_node_val == null) {
                                    throwException("No se pudo calcular el valor false...");
                                }
                                final String ref_vfalse_node_val_val = ref_vfalse_node_val.getString("val");
                                final String ref_vfalse_node_val_type = ref_vfalse_node_val.getString("type");
                                write3dir("%s = %s;", t1, ref_vfalse_node_val_val);

                                if (!ref_vtrue_node_val_type.equals(ref_vfalse_node_val_type)) {
                                    throwException("Tipos no compatibles -> %s ? %s : %s", TType.BOOLEAN, ref_vtrue_node_val_type, ref_vfalse_node_val_type);
                                }

                                write3dir("%s:", l1);
                                write3dir("// !!!!!!!! ternario !!!!!!!! //");
                                write3dir(poolCommit(actions));

                                val.put("val", t1);
                                val.put("type", ref_vtrue_node_val_type);

                                return val;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.TERNARY);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_FTEXTO">
                    put(TOperation.NM_TEXTO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;
                        try {

                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.STRING, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_TEXTO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_FLIENZO">
                    put(TOperation.NM_LIENZO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;
                        try {

                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.INT, TType.INT, TType.INT, TType.INT, TType.INT};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_LIENZO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_FRectangulo">
                    put(TOperation.NM_RECTANGULO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;
                        try {

                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.BOOLEAN};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_RECTANGULO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_FArco">
                    put(TOperation.NM_ARCO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;

                        try {

                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.BOOLEAN};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_ARCO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_FOvalo">
                    put(TOperation.NM_OVALO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");

                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;

                        try {
                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.BOOLEAN};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_OVALO);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_LINEA">
                    put(TOperation.NM_LINEA, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");

                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;

                        try {
                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.INT};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_LINEA);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_FPoligono">
                    put(TOperation.NM_POLIGONO, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");

                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        Object info = ref_info;

                        try {
                            if (isDefPhase(phase)) {
                                return null;
                            }

                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                final Object[] params = new Object[param_list.size()];

                                poolOn(actions);
                                final String t1 = getTemp(actions);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                for (int i = 0; i < param_list.size(); i++) {
                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    final String t2 = getTemp(actions);

                                    write3dir("// **** parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_val = param_node_val.getString("val");
                                    final String param_node_val_type = param_node_val.getString("type");

                                    if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        final String param_node_val_ltrue = param_node_val.getString("ltrue");
                                        final String param_node_val_lfalse = param_node_val.getString("lfalse");
                                        final String l1 = getLabel(actions);
                                        final String t3 = getTemp(actions);
                                        write3dir("// **** true");
                                        write3dir("%s:", param_node_val_ltrue);
                                        write3dir("%s = 1;", t3);
                                        write3dir("goto %s;", l1);
                                        write3dir("// **** false");
                                        write3dir("%s:", param_node_val_lfalse);
                                        write3dir("%s = 0;", t3);
                                        write3dir("%s:", l1);
                                        write3dir("stack[%s] = %s;", t2, t3);

                                    } else {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                    }
                                    params[i] = param_node_val_type;
                                }
                                final Object[] method_params = new Object[]{TType.INT, TType.INT, TType.INT, TType.INT, TType.INT, TType.BOOLEAN};
                                final String params_str = Arrays.toString(params);
                                final String method_params_str = Arrays.toString(method_params);

                                if (!params_str.equals(method_params_str)) {
                                    throwException("Se esperaba parametros con tipos de dato -> %s , se recibio -> %s", method_params_str, params_str);
                                }

                                write3dir("p = p + %d;", methodsim.size);
                                write3dir("call %s();", ref_name);
                                write3dir("p = p - %d;", methodsim.size);
                                write3dir("// ******** llamada %s ******** //", ref_name);
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NM_LINEA);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="IMPORT">
                    put(TOperation.IMPORT, (Operation) (Node node, Object actions) -> {
                        //======================================================
                        // Inicializacion...
                        //======================================================
                        Dict cactions = (Dict) actions;

                        //======================================================
                        // Recopilando informacion necesaria...
                        //======================================================
                        final Dict path = node.getDictRef().getDict("path");
                        final String path_val = path.getString("val");
                        Path path_val_path = Paths.get(path_val);

                        if (!path_val_path.isAbsolute()) {
                            DefaultMutableTreeNode treenode = tree_project_nodo_active(jtree_tree);
                            if (treenode == null) {
                                System.err.println("Not imported...");
                                return null;
                            }

                            Pj pj = nodo_project(treenode);
                            path_val_path = Paths.get(pj.getRuta(), path_val_path.toString());
                        }

                        //======================================================
                        // Compilar archivo import
                        //======================================================
                        Object phase = cactions.get("phase");
                        phase = (phase == null ? "null" : phase);

                        if (isDefPhase(phase)) {
                            frc_compile(file_text(path_val_path), cactions, false);
                        } else if (is3dirPhase(phase)) {
                        } else {
                            notificar("No actions for -> " + TOperation.IMPORT);
                        }

                        return null;
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_CLASS">
                    put(TOperation.DEF_CLASS, (Operation) (Node node, Object actions) -> {
                        //======================================================
                        // Inicializacion...
                        //======================================================
                        Dict cactions = (Dict) actions;
                        CC ccompiler = (CC) cactions.get("cc");
                        Object phase = cactions.get("phase");
                        phase = (phase == null ? "null" : phase);

                        //======================================================
                        // Recopilando informacion necesaria...
                        //======================================================
                        Dict _modifiers = node.getDictRef().getDict("modifiers");
                        Dict _name = node.getDictRef().getDict("name");
                        Dict _extends = node.getDictRef().getDict("super");
                        Dict _stmts = node.getDictRef().getDict("stmts");

                        final String _name_val = _name.getString("val");
                        final String _extends_val = (_extends == null ? null : _extends.getString("val"));
                        final HashSet<TModifier> _modifiers_val = (_modifiers == null ? new HashSet<>() : getSetModifiers(_modifiers));

//                        System.err.format("[Name -> %s][Extends -> %s][Modifiers -> %s]\n", _name_val, _extends_val, _modifiers_val.toString());
                        //======================================================
                        //Agregar simbolos
                        //======================================================
                        try {
                            final Stack scope = new Stack<>();
                            cactions.set("scope", scope);

                            if (isDefPhase(phase)) {
                                //agregar clase
                                Sim sim = ccompiler.getSims().addClass(_name_val, _extends_val, _modifiers_val);

                                scope.push(_name_val);
                                frc_compiler_stmts_exec(_stmts, cactions);
                                scope.pop();
                                if (sim.getDictOthers().getInt("constructor") == 0) {
                                    ccompiler.getSims().addConstructor(sim.name, new HashSet<>(), sim.name, new Object[]{});
                                }

                                return null;
                            }
                            if (is3dirPhase(phase)) {

                                scope.push(_name_val);
                                frc_compiler_stmts_exec(_stmts, cactions);
                                scope.pop();

                                return null;
                            }

                            //======================================================
                            //Ejecutar sentencias de clase y manejo de ambito...
                            //======================================================
                            /**
                             * scope: Cuando se esta en def_field y def_method
                             * es string Cuando se encuentra dentro de un metodo
                             * es el simbolo del metodo... Mejor que sea solo
                             * simbolos que se maneje... pero si da tiempo...
                             */
                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, _name.get("info"), actions);
                        } catch (CloneNotSupportedException ex) {
                            compiler_error(ex, TErr.SEMANTICO, _name.get("info"), actions);
                        }

                        return noActionsProcessed(TOperation.DEF_CLASS);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_FIELD">
                    put(TOperation.DEF_FIELD, (Operation) (Node node, Object actions) -> {
                        //======================================================
                        // Inicializacion...
                        //======================================================
                        Dict cactions = (Dict) actions;
                        CC ccompiler = (CC) cactions.get("cc");
                        Stack<String> scope = cactions.getStack("scope");
                        Object phase = cactions.get("phase");
                        phase = (phase == null ? "null" : phase);

                        //======================================================
                        // Recopilando informacion necesaria...
                        //======================================================
                        Dict _modifiers = node.getDictRef().getDict("modifiers");
                        Boolean _array = node.getDictRef().getBoolean("array");
                        Dict _type = node.getDictRef().getDict("type");
                        Dict _name = node.getDictRef().getDict("name");

                        final HashSet<TModifier> _modifiers_val = (_modifiers == null ? new HashSet<>() : getSetModifiers(_modifiers));
                        String _type_val = _type.getString("val");

                        //======================================================
                        // Agregando simbolos...
                        //======================================================
                        for (Dict n : (ArrayList<Dict>) _name.getDictArrayList("list")) {
                            final String n_val = n.getString("val");
                            try {
                                if (isDefPhase(phase)) {
                                    ccompiler.getSims().addField(scope.peek(), _modifiers_val, _type_val, n_val, new Dict("array", (_array == null ? false : _array)));
                                } else if (is3dirPhase(phase)) {
                                } else {
                                    notificar("No actions for -> " + TOperation.DEF_FIELD);
                                }
                            } catch (Exception exc) {
                                compiler_error(exc, TErr.SEMANTICO, n.get("info"), actions);
                            }
                        }

                        return null;
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_METHOD">
                    put(TOperation.DEF_METHOD, (Operation) (Node node, Object actions) -> {
                        Dict ca = (Dict) actions;
                        CC ccompiler = (CC) ca.get("cc");
                        Stack scope = ca.getStack("scope");
                        Object phase = ca.get("phase");
                        phase = (phase == null ? "null" : phase);

                        Dict _modifiers = node.getDictRef().getDict("modifiers");
                        Dict _type = node.getDictRef().getDict("type");
                        Dict _name = node.getDictRef().getDict("name");
                        Dict _params = node.getDictRef().getDict("params");
                        Dict _stmts = node.getDictRef().getDict("stmts");

                        final HashSet<TModifier> _modifiers_val = (_modifiers == null ? new HashSet<>() : getSetModifiers(_modifiers));
                        String _type_val = _type.getString("val");
                        String _name_val = _name.getString("val");
                        Object[] _params_type_array = getArrayType(_params);

//                        System.err.println(_modifiers_val);
//                        System.err.println(_type_val);
//                        System.err.println(_name_val);
//                        System.err.println(Arrays.toString(_params_type_array));
                        //<editor-fold defaultstate="collapsed" desc="PROCESAMIENTO...">
                        try {

                            if (isDefPhase(phase)) {
                                // agregar metodo
                                Sim method_sim = ccompiler.getSims().addMethod(scope.peek().toString(), _modifiers_val, _type_val, _name_val, _params_type_array);
                                // agregar this, si no es el metodo main
                                if ((_name_val.equals("main") && _type_val.equals(TType.VOID.toString()) && _params_type_array.length == 0)) {
                                    method_sim.getDictOthers().put("main", true);
                                } else {
                                    ccompiler.getSims().addVariable(method_sim, method_sim.scope, "this", new Dict());
                                }

                                // agregar parametros
                                scope.push(method_sim);
                                frc_compiler_stmts_exec(_params, ca);
                                scope.pop();

                                return null;
                            }
                            if (is3dirPhase(phase)) {

                                final Sim methodsim = ccompiler.getSims().getMethod(scope.peek().toString(), _name_val, _params_type_array);
                                final Boolean isMain = methodsim.getDictOthers().getBoolean("main");
                                String method_type = "void";
                                String method_return = "";
                                if (isMain != null && isMain) {
                                    method_type = "int";
                                    method_return = "return 0;";
                                }

                                final String l1 = getLabel(actions);
                                final Stack flow_control = new Stack();
                                ca.put("flow_control", flow_control);
                                write3dir(String.format("void %s(){", getMethodName(methodsim)));
                                write3dir();

                                flow_control.push(l1);
                                scope.push(methodsim);
                                blockIn(actions);
                                frc_compiler_stmts_exec(_stmts, ca);
                                blockOut(actions);
                                scope.pop();
                                flow_control.pop();

                                write3dir("// ==== method - salida");
                                write3dir("%s:", l1);
                                write3dir();
//                                write3dir(method_return);
                                write3dir("}");

                                return null;
                            }

                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, _name.get("info"), actions);
                        }
                        //</editor-fold>

                        return noActionsProcessed(TOperation.DEF_METHOD);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_CONSTRUCTOR">
                    put(TOperation.DEF_CONSTRUCT, (Operation) (Node node, Object actions) -> {
                        Dict ca = (Dict) actions;
                        CC ccompiler = (CC) ca.get("cc");
                        Stack scope = ca.getStack("scope");
                        Object phase = ca.get("phase");
                        phase = (phase == null ? "null" : phase);

                        Dict _modifiers = node.getDictRef().getDict("modifiers");
                        Dict _name = node.getDictRef().getDict("name");
                        Dict _params = node.getDictRef().getDict("params");
                        Dict _stmts = node.getDictRef().getDict("stmts");

                        final HashSet<TModifier> _modifiers_val = (_modifiers == null ? new HashSet<>() : getSetModifiers(_modifiers));
                        String _name_val = _name.getString("val");
                        Object[] _params_type_array = getArrayType(_params);

//                        System.err.format("Constructor ->[[Modificadores->%1$s][nombre->%2$s][parametros->%3$s]]\n", _modifiers_val, _name_val, Arrays.toString(_params_type_array));
                        try {
                            Sim methodsim = null;

                            if (isDefPhase(phase)) {
                                methodsim = ccompiler.getSims().addConstructor(scope.peek().toString(), _modifiers_val, _name_val, _params_type_array);
                                ccompiler.getSims().addVariable(methodsim, methodsim.scope, "this", new Dict());
                            } else if (is3dirPhase(phase)) {
                                methodsim = ccompiler.getSims().getConstructor(scope.peek().toString(), _params_type_array);
                                final String l1 = getLabel(actions);
                                final Stack flow_control = new Stack();
                                ca.put("flow_control", flow_control);
                                write3dir(String.format("void %s(){", getMethodName(methodsim)));
                                write3dir();

                                flow_control.push(l1);
                                scope.push(methodsim);
                                blockIn(actions);
                                frc_compiler_stmts_exec(_stmts, ca);
                                blockOut(actions);
                                scope.pop();
                                flow_control.pop();

                                write3dir("// ==== method - salida");
                                write3dir("%s:", l1);
                                write3dir();
                                write3dir("}");
                                return null;
                            } else {
                                notificar("No actions for -> " + TOperation.DEF_CONSTRUCT);
                                return null;
                            }

                            //======================================================
                            //Ejecutar sentencias de metodo y manejo de ambito...
                            //======================================================
                            scope.push(methodsim);
                            // ejecutar parametros
                            frc_compiler_stmts_exec(_params, ca);
                            // ejecutar sentencias
                            frc_compiler_stmts_exec(_stmts, ca);
                            scope.pop();

                        } catch (Exception exc) {
                            compiler_error(exc, TErr.SEMANTICO, _name.get("info"), actions);
                        }

                        return null;
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_PARAMETER">
                    put(TOperation.DEF_PARAMETER, (Operation) (Node node, Object actions) -> {
                        Dict cactions = (Dict) actions;
                        CC ccompiler = (CC) cactions.get("cc");
                        Stack scope = cactions.getStack("scope");
                        Sim method_sim = (Sim) scope.peek();
                        Object phase = cactions.get("phase");
                        phase = (phase == null ? "null" : phase);

                        Boolean _array_val = node.getDictRef().containsKey("array") ? node.getDictRef().getBoolean("array") : false;
                        Dict _ref = node.getDictRef().getDict("ref");
                        Dict _type = node.getDictRef().getDict("type");
                        Dict _name = node.getDictRef().getDict("name");

                        String _ref_val = _ref.getString("val");
                        String _type_val = _type.getString("val");
                        String _name_val = _name.getString("val");

//                        System.err.format("Parametro ->[[ref->%1$s][tipo->%2$s][nombre->%3$s]]\n", _ref_val, _type_val, _name_val);
                        try {
                            if (isDefPhase(phase)) {
                                ccompiler.getSims().addParameter(method_sim, Boolean.parseBoolean(_ref_val), _type_val, _name_val, new Dict("array", _array_val));
                            } else if (is3dirPhase(phase)) {
                                return null;
                            } else {
                                notificar("No actions for -> " + TOperation.DEF_PARAMETER);
                                return null;
                            }
                        } catch (Exception exc) {
                            compiler_error(exc, TErr.SEMANTICO, _name.get("info"), actions);
                        }

                        return null;
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEF_LOCALVAR">
                    put(TOperation.DEF_LOCALVAR, (Operation) (Node node, Object actions) -> {

                        //<editor-fold defaultstate="collapsed" desc="AMBITO ARBOL SINTACTICO...">
                        Dict ca = (Dict) actions;
                        CC ccompiler = (CC) ca.get("cc");
                        Stack scope = ca.getStack("scope");
                        Sim method_sim = (Sim) scope.peek();
                        Object phase = ca.get("phase");
                        phase = (phase == null ? "null" : phase);
                        final ArrayList block_sim_list = (ArrayList) ca.getStack("3dir_block").peek();
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="NODO DE GRAMATICA ...">
                        final Dict ref = node.getDictRef();
                        final boolean _array_val = ref.containsKey("array") ? ref.getBoolean("array") : false;
                        final Dict _type = ref.getDict("type");
                        final Dict _name = ref.getDict("name");
                        final Dict _val = ref.getDict("val");
                        Object _info = ref.get("info");

                        final String _type_val = _type.getString("val");
                        final Node _val_node = _val == null ? null : _val.getNode("nodo");
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="PROCESAMIENTO...">
                        try {
                            if (is3dirPhase(phase)) {
                                for (Dict id : _name.getDictArrayList("list")) {
                                    final String n_val = id.getString("val");
                                    _info = id.get("info");
//                                    System.err.format("Variable ->[[tipo->%2$s][nombre->%2$s]]\n", _type_val, n_val);

                                    final Sim var_sim = ccompiler.getSims().addVariable(method_sim, _type_val, n_val, new Dict("array", _array_val));
                                    block_sim_list.add(var_sim);
                                    final Node name_nodo = id.getNode("nodo");

                                    // si es una declaracion con asignacion...
                                    if (_val_node != null) {
                                        if (_array_val) {
                                            _val_node.exec(actions);
                                            final Dict _val_node_val = _val_node.getDictVal();
                                            final Object _val_node_val_type = _val_node_val.get("type");

                                            if (!_val_node_val_type.equals("array")) {
                                                throwException("Se esperaba dimensiones de arreglo");
                                            }

                                            final int size = _val_node_val.getInt("size");
                                            final int[] dims = _val_node_val.getIntArray("val");

                                            var_sim.size = size;
                                            var_sim.getDictOthers().put("dims", dims == null ? new int[]{} : dims);
                                            method_sim.size += size - 1;
                                        } else {
                                            write3dir("//*** ASINGACION VARIABLE... ***//");
                                            // obtener el puntero de la variable
                                            name_nodo.getDictRef().put("pointer", true);
                                            write3dir("// Obtener puntero");
                                            name_nodo.exec(actions);
                                            // obtenre el valor a asignar a la variable...
                                            write3dir("// Obtener valor");
                                            _val_node.exec(actions);
                                            // asignar el valor a asignar a la variable...
                                            final Dict _val_node_val = _val_node.getDictVal();
                                            if (_val_node_val == null) {
                                                throwException("No se pudo calcular el valor a asiganr...");
                                            }
                                            final String _val_node_val_type = _val_node_val.getString("type");
                                            if (!_type_val.equals(_val_node_val_type)) {
                                                throwException(String.format("Tipos incompatibles -> %s = %s", _type_val, _val_node_val_type));
                                            }
                                            write3dir("// asignacion");
                                            write3dir(String.format("stack[%s] = %s;", name_nodo.getDictVal().get("val"), _val_node.getDictVal().get("val")));
                                        }
                                    }
                                    break;
                                }
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, _info, actions);
                        }
                        //</editor-fold>

                        return noActionsProcessed(TOperation.DEF_LOCALVAR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="OR">
                    put(TOperation.OR, new Operation() {//OR
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;
                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim method_sim = (Sim) scope.peek();
                            final Object phase = ca.get("phase");

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Dict val = new Dict();
                            try {
                                if (isDefPhase(phase)) {
                                    return null;
                                }

                                if (is3dirPhase(phase)) {
                                    Node l = node.getLeft();
                                    l.exec(actions);
                                    Dict lval = l.getDictVal();

                                    String lval_type = lval.getString("type");
                                    TagSet ltags = lval.getTags("tags");
                                    String lval_ltrue = ltags.etqVerdad;
                                    String lval_lfalse = ltags.etqFalso;

                                    if (!lval_type.equals(TType.BOOLEAN.toString())) {
                                        throwException(String.format("Se esperaba tipo -> %s en -> %s || expr", TType.BOOLEAN, lval_type));
                                    }

                                    write3dir(lval_lfalse + ":");
                                    //write3dir("// label false");

                                    Node r = node.getRight();
                                    r.exec(actions);
                                    Dict rval = r.getDictVal();
                                    String rval_type = rval.getString("type");
                                    TagSet rtags = rval.getTags("tags");
                                    String rval_ltrue = rtags.etqVerdad;
                                    String rval_lfalse = rtags.etqFalso;

                                    if (!rval_type.equals(TType.BOOLEAN.toString())) {
                                        throwException(String.format("Se esperaba tipo -> %s en -> %s || %s", TType.BOOLEAN, lval_type, rval_type));
                                    }
                                    write3dir(lval_ltrue + ":");
                                    //write3dir("// label true");

                                    write3dir("go to " + rval_ltrue + ";");
                                    //write3dir(rval_ltrue + ":");
                                    val.put("type", TType.BOOLEAN.toString());
                                    val.put("tags", rtags);
                                    //val.put("ltrue", rval_ltrue);
                                    //val.put("lfalse", rval_lfalse);
                                    return val;
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }

                            return noActionsProcessed(TOperation.OR);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="AND">
                    put(TOperation.AND, new Operation() {
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;
                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim method_sim = (Sim) scope.peek();
                            final Object phase = ca.get("phase");

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Dict val = new Dict();

                            try {
                                if (is3dirPhase(phase)) {
                                    Node l = node.getLeft();
                                    l.exec(actions);
                                    Dict lval = l.getDictVal();

                                    String lval_type = lval.getString("type");
                                    TagSet ltags = lval.getTags("tags");
                                    String lval_ltrue = ltags.etqVerdad;
                                    String lval_lfalse = ltags.etqFalso;

                                    if (!lval_type.equals(TType.BOOLEAN.toString())) {
                                        throwException(String.format("Se esperaba tipo -> %s en -> %s || expr", TType.BOOLEAN, lval_type));
                                    }

                                    write3dir(lval_ltrue + ":");
                                    //write3dir("// label true");

                                    Node r = node.getRight();
                                    r.exec(actions);
                                    Dict rval = r.getDictVal();
                                    String rval_type = rval.getString("type");
                                    TagSet rtags = rval.getTags("tags");
                                    String rval_ltrue = rtags.etqVerdad;
                                    String rval_lfalse = rtags.etqFalso;

                                    if (!rval_type.equals(TType.BOOLEAN.toString())) {
                                        throwException(String.format("Se esperaba tipo -> %s en -> %s || %s", TType.BOOLEAN, lval_type, rval_type));
                                    }
                                    write3dir(lval_lfalse + ":");
                                    //write3dir("// label false");

                                    write3dir("go to " + rval_lfalse + ";");
                                    //write3dir(rval_ltrue + ":");
                                    val.put("type", TType.BOOLEAN.toString());
                                    val.put("tags", rtags);
                                    //val.put("ltrue", rval_ltrue);
                                    //val.put("lfalse", rval_lfalse);
                                    return val;
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }

                            return noActionsProcessed(TOperation.AND);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NOT">
                    put(TOperation.NOT, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_params = ref.getDict("params");
                        final Dict val = new Dict();
                        Object info = ref_info;
                        System.out.println("not");
                        try {
                            if (is3dirPhase(phase)) {
                                Node l = node.getLeft();
                                l.exec(actions);
                                Dict lval = l.getDictVal();
                                String lval_type = lval.getString("type");
                                TagSet ltags = lval.getTags("tags");
                                if (!lval_type.equals(TType.BOOLEAN.toString())) {
                                    throwException(String.format("Se esperaba tipo -> %s en -> %s || expr", TType.BOOLEAN, lval_type));
                                }
                                TagSet rtags = new TagSet();
                                rtags.etqFalso = ltags.etqVerdad;
                                rtags.etqVerdad = ltags.etqFalso;
                                System.out.println(rtags.etqFalso + "-" + rtags.etqVerdad + "-" + ltags.etqVerdad + "-" + ltags.etqFalso);
                                val.put("type", TType.BOOLEAN.toString());
                                val.put("tags", rtags);
                                return val;
                            }
                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.NOT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="LTHAN">
                    put(TOperation.LTHAN, new Operation() {//<
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    String tipo = TType.BOOLEAN.toString();

                                    if (!(ltype.equals(TType.INT.toString()) || !ltype.equals(TType.FLOAT.toString())) && (!rtype.equals(TType.INT.toString()) || !rtype.equals(TType.FLOAT.toString()))) {
                                        throwException("No se puede comparar la expresiÃƒÂ³n, se esperaba INT, FLOAT O CHAR");
                                    }

                                    TagSet etqs = new TagSet();
                                    etqs.etqVerdad = getLabel(ca);
                                    etqs.etqFalso = getLabel(ca);
                                    String tres = "\tif " + lval + "<" + rval + " then goto " + etqs.etqVerdad + ";\n" + "\tgoto " + etqs.etqFalso + ";";
                                    write3dir(tres);

                                    return new Dict("tags", etqs, "type", tipo);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.LTHAN);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="LETHAN">
                    put(TOperation.LETHAN, new Operation() {//<=
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            try {
                                if (is3dirPhase(phase)) {

                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    String tipo = TType.BOOLEAN.toString();

                                    if (!(ltype.equals(TType.INT.toString()) || !ltype.equals(TType.FLOAT.toString())) && (!rtype.equals(TType.INT.toString()) || !rtype.equals(TType.FLOAT.toString()))) {
                                        throwException("No se puede comparar la expresiÃƒÂ³n, se esperaba INT, FLOAT O CHAR");
                                    }

                                    TagSet etqs = new TagSet();
                                    etqs.etqVerdad = getLabel(ca);
                                    etqs.etqFalso = getLabel(ca);
                                    String tres = "\tif " + lval + "<=" + rval + " then goto " + etqs.etqVerdad + ";\n" + "\tgoto " + etqs.etqFalso + ";";
                                    write3dir(tres);

                                    return new Dict("tags", etqs, "type", tipo);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.LETHAN);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="BTHAN">
                    put(TOperation.BTHAN, new Operation() {//>
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    String tipo = TType.BOOLEAN.toString();

                                    if (!(ltype.equals(TType.INT.toString()) || !ltype.equals(TType.FLOAT.toString())) && (!rtype.equals(TType.INT.toString()) || !rtype.equals(TType.FLOAT.toString()))) {
                                        throwException("No se puede comparar la expresiÃƒÂ³n, se esperaba INT, FLOAT O CHAR");
                                    }

                                    TagSet etqs = new TagSet();
                                    etqs.etqVerdad = getLabel(ca);
                                    etqs.etqFalso = getLabel(ca);
                                    String tres = "\tif " + lval + ">" + rval + " then goto " + etqs.etqVerdad + ";\n" + "\tgoto " + etqs.etqFalso + ";";
                                    write3dir(tres);

                                    return new Dict("tags", etqs, "type", tipo);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.BTHAN);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="BETHAN">                    
                    put(TOperation.BETHAN, new Operation() {//>=
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    String tipo = TType.BOOLEAN.toString();

                                    if (!(ltype.equals(TType.INT.toString()) || !ltype.equals(TType.FLOAT.toString())) && (!rtype.equals(TType.INT.toString()) || !rtype.equals(TType.FLOAT.toString()))) {
                                        throwException("No se puede comparar la expresiÃƒÂ³n, se esperaba INT, FLOAT O CHAR");
                                    }

                                    TagSet etqs = new TagSet();
                                    etqs.etqVerdad = getLabel(ca);
                                    etqs.etqFalso = getLabel(ca);
                                    String tres = "\tif " + lval + ">=" + rval + " then goto " + etqs.etqVerdad + ";\n" + "\tgoto " + etqs.etqFalso + ";";
                                    write3dir(tres);

                                    return new Dict("tags", etqs, "type", tipo);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.BETHAN);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DEQUAL">                    
                    put(TOperation.DEQUAL, new Operation() {//>=
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    String tipo = TType.BOOLEAN.toString();

                                    /*if(!(ltype.equals(TType.INT.toString())||!ltype.equals(TType.FLOAT.toString()))&&(!rtype.equals(TType.INT.toString())||!rtype.equals(TType.FLOAT.toString()))){
                                     throwException("No se puede comparar la expresiÃƒÂ³n, se esperaba INT, FLOAT O CHAR");
                                     }*/
                                    TagSet etqs = new TagSet();
                                    etqs.etqVerdad = getLabel(ca);
                                    etqs.etqFalso = getLabel(ca);
                                    String tres = "\tif " + lval + "==" + rval + " then goto " + etqs.etqVerdad + ";\n" + "\tgoto " + etqs.etqFalso + ";";
                                    write3dir(tres);

                                    return new Dict("tags", etqs, "type", tipo);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.DEQUAL);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NEQUAL">                    
                    put(TOperation.NEQUAL, new Operation() {//!=
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    String tipo = TType.BOOLEAN.toString();

                                    if (!(ltype.equals(TType.INT.toString()) || !ltype.equals(TType.FLOAT.toString())) && (!rtype.equals(TType.INT.toString()) || !rtype.equals(TType.FLOAT.toString()))) {
                                        throwException("No se puede comparar la expresiÃƒÂ³n, se esperaba INT, FLOAT O CHAR");
                                    }

                                    TagSet etqs = new TagSet();
                                    etqs.etqVerdad = getLabel(ca);
                                    etqs.etqFalso = getLabel(ca);
                                    String tres = "\tif " + lval + "!=" + rval + " then goto " + etqs.etqVerdad + ";\n" + "\tgoto " + etqs.etqFalso + ";";
                                    write3dir(tres);

                                    return new Dict("tags", etqs, "type", tipo);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.NEQUAL);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="PLUS">
                    put(TOperation.PLUS, new Operation() {
                        @Override
                        public Object exec(Node node, Object actions) {
                            write3dir("//Mas +++");

                            final Dict ca = (Dict) actions;
                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim methodsim = (Sim) scope.peek();

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");
                                    int length = 0;
                                    String type;
                                    Object temp = null;
                                    Object temp_ultimo = null;
                                    Boolean seConcateno = false;
                                    String tres = null;
                                    switch (ltype) {
                                        case "INT":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    type = TType.INT.toString();
                                                    tres = String.format("%s = %s + %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s + %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir INT a BOOLEAN");
                                                case "STRING":
                                                    write3dir("//Concatenacion INT + STRING");

                                                    int rlength = node.getRight().getDictVal().getLenth("length");

                                                    List<String> temporales = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + rval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales.add(t2);
                                                    }

                                                    String t_gl = getTemp(ca);
                                                    write3dir(t_gl + "=h;");
                                                    write3dir("h = h+" + (int) (2 + rlength + 1) + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                    write3dir("heap[" + temp + "]=-101;");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                    write3dir("heap[" + temp + "]=" + lval + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        final String t_nuevos = temporales.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl + "+" + (int) (i + 2) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }
                                                    length = 2 + rlength;
                                                    temp = t_gl;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    type = TType.INT.toString();
                                                    tres = String.format("%s = %s + %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "FLOAT":
                                            switch (rtype) {
                                                case "INT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s + %s;", temp, lval, t5_i);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    temp = getTemp(ca);
                                                    type = TType.FLOAT.toString();
                                                    tres = String.format("%s = %s + %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir INT a BOOLEAN");
                                                case "STRING":
                                                    write3dir("//Concatenacion FLOAT + STRING");

                                                    int rlength = node.getRight().getDictVal().getLenth("length");

                                                    List<String> temporales = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + rval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales.add(t2);
                                                    }

                                                    String t_gl = getTemp(ca);
                                                    write3dir(t_gl + "=h;");
                                                    write3dir("h = h+" + (int) (2 + rlength + 1) + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                    write3dir("heap[" + temp + "]=-101;");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                    write3dir("heap[" + temp + "]=" + lval + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        final String t_nuevos = temporales.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl + "+" + (int) (i + 2) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }
                                                    length = 2 + rlength;
                                                    temp = t_gl;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "CHAR":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir FLOAT a CHAR");
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "BOOLEAN":
                                            switch (rtype) {
                                                case "INT":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir BOOLEAN a INT");
                                                case "FLOAT":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir BOOLEAN a FLOAT");
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede sumar BOOLEAN");
                                                case "STRING":
                                                    write3dir("//Concatenacion INT + STRING");

                                                    int rlength = node.getRight().getDictVal().getLenth("length");

                                                    List<String> temporales = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + rval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "]" + ";");
                                                        temporales.add(t2);
                                                    }

                                                    String t_gl = getTemp(ca);
                                                    write3dir(t_gl + "=h");
                                                    write3dir("h = h+" + (int) (2 + rlength + 1) + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                    write3dir("heap[" + temp + "]=-102;");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                    write3dir("heap[" + temp + "]=" + lval + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        final String t_nuevos = temporales.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl + "+" + (int) (i + 2) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }
                                                    length = 2 + rlength;
                                                    temp = t_gl;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "CHAR":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir FLOAT a CHAR");
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "STRING":
                                            switch (rtype) {
                                                case "INT":
                                                    int llength_i = node.getLeft().getDictVal().getLenth("length");
                                                    List<String> temporales_i = new ArrayList<String>();
                                                    write3dir("// STRING + INT");
                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < llength_i; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + lval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales_i.add(t2);
                                                    }

                                                    String t_gl = getTemp(ca);
                                                    write3dir(t_gl + "=h;");
                                                    write3dir("h = h+" + (int) (2 + llength_i + 1) + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < llength_i; i++) {
                                                        final String t_nuevos = temporales_i.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl + "+" + (int) (i) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + llength_i + ";");
                                                    write3dir("heap[" + temp + "]=-101;");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + (int) (llength_i + 1) + ";");
                                                    write3dir("heap[" + temp + "]=" + rval + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + (int) (llength_i + 2) + ";");
                                                    write3dir("heap[" + temp + "]=-1;");

                                                    length = 2 + llength_i;
                                                    temp = t_gl;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "FLOAT":
                                                    int llength_f = node.getLeft().getDictVal().getLenth("length");
                                                    write3dir("// STRING + FLOAT");
                                                    List<String> temporales_f = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < llength_f; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + lval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales_f.add(t2);
                                                    }

                                                    String t_gl_f = getTemp(ca);
                                                    write3dir(t_gl_f + "=h;");
                                                    write3dir("h = h+" + (int) (2 + llength_f + 1) + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < llength_f; i++) {
                                                        final String t_nuevos = temporales_f.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl_f + "+" + (int) (i) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_f + "+" + llength_f + ";");
                                                    write3dir("heap[" + temp + "]=-101;");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_f + "+" + (int) (llength_f + 1) + ";");
                                                    write3dir("heap[" + temp + "]=" + rval + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_f + "+" + (int) (llength_f + 2) + ";");
                                                    write3dir("heap[" + temp + "]=-1;");

                                                    length = 2 + llength_f;
                                                    temp = t_gl_f;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "BOOLEAN":
                                                    int llength_b = node.getLeft().getDictVal().getLenth("length");
                                                    write3dir("// STRING + BOOLEAN");
                                                    List<String> temporales_b = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < llength_b; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + lval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales_b.add(t2);
                                                    }

                                                    String t_gl_b = getTemp(ca);
                                                    write3dir(t_gl_b + "=h;");
                                                    write3dir("h = h+" + (int) (2 + llength_b + 1) + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < llength_b; i++) {
                                                        final String t_nuevos = temporales_b.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl_b + "+" + (int) (i) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_b + "+" + llength_b + ";");
                                                    write3dir("heap[" + temp + "]=-102;");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_b + "+" + (int) (llength_b + 1) + ";");
                                                    write3dir("heap[" + temp + "]=" + rval + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_b + "+" + (int) (llength_b + 2) + ";");
                                                    write3dir("heap[" + temp + "]=-1;");

                                                    length = 2 + llength_b;
                                                    temp = t_gl_b;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "STRING":
                                                    write3dir("//Concatenacion STRING + STRING");
                                                    int llength_s = node.getLeft().getDictVal().getLenth("length");
                                                    int rlength_s = node.getRight().getDictVal().getLenth("length");
                                                    List<String> temporales_s = new ArrayList<String>();
                                                    //temp = getTemp(ca);
                                                    String temp_1 = getTemp(ca);
                                                    //Procesando cadena izquierda
                                                    for (int i = 0; i < llength_s; i++) {
                                                        if (i == 0) {
                                                            final String t2 = getTemp(ca);
                                                            write3dir(temp_1 + "=" + lval + "+" + i + ";");
                                                            write3dir(t2 + "= heap[" + temp_1 + "]" + ";");
                                                            temporales_s.add(t2);
                                                        } else {
                                                            temp_1 = getTemp(ca);
                                                            final String t2 = getTemp(ca);
                                                            write3dir(temp_1 + "=" + lval + "+" + i + ";");
                                                            write3dir(t2 + "= heap[" + temp_1 + "];");
                                                            temporales_s.add(t2);
                                                        }
                                                    }
                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < rlength_s + 1; i++) {
                                                        temp_1 = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp_1 + "=" + rval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp_1 + "];");
                                                        temporales_s.add(t2);
                                                    }

                                                    t_gl = getTemp(ca);
                                                    write3dir(t_gl + "=h;");
                                                    write3dir("h = h+" + (int) (llength_s + rlength_s + 1) + ";");

                                                    //Modificando heap
                                                    for (int i = 0; i < llength_s + rlength_s + 1; i++) {
                                                        final String t_nuevos = temporales_s.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl + "+" + i + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }
                                                    length = llength_s + rlength_s;
                                                    temp = t_gl;

                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "CHAR":
                                                    int llength_c = node.getLeft().getDictVal().getLenth("length");
                                                    write3dir("// STRING + CHAR");
                                                    List<String> temporales_c = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < llength_c; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + lval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales_c.add(t2);
                                                    }

                                                    String t_gl_c = getTemp(ca);
                                                    write3dir(t_gl_c + "=h;");
                                                    write3dir("h = h+" + (int) (2 + llength_c + 1) + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < llength_c; i++) {
                                                        final String t_nuevos = temporales_c.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl_c + "+" + (int) (i) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_c + "+" + llength_c + ";");
                                                    write3dir("heap[" + temp + "]=" + rval + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl_c + "+" + (int) (llength_c + 1) + ";");
                                                    write3dir("heap[" + temp + "]=-1;");

                                                    length = 1 + llength_c;
                                                    temp = t_gl_c;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "CHAR":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    type = TType.INT.toString();
                                                    tres = String.format("%s = %s + %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    break;
                                                case "FLOAT":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede convertir BOOLEAN a FLOAT");
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede sumar BOOLEAN");
                                                case "STRING":
                                                    write3dir("//Concatenacion INT + STRING");

                                                    int rlength = node.getRight().getDictVal().getLenth("length");

                                                    List<String> temporales = new ArrayList<String>();

                                                    //Procesando cadena derecha
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        temp = getTemp(ca);
                                                        final String t2 = getTemp(ca);
                                                        write3dir(temp + "=" + rval + "+" + i + ";");
                                                        write3dir(t2 + "= heap[" + temp + "];");
                                                        temporales.add(t2);
                                                    }

                                                    String t_gl = getTemp(ca);
                                                    write3dir(t_gl + "=h;");
                                                    write3dir("h = h+" + (int) (2 + rlength + 1) + ";");

                                                    temp = getTemp(ca);
                                                    write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                    write3dir("heap[" + temp + "]=" + lval + ";");

                                                    //Modificando heap, se suma dos porque se agrego en entero y -100
                                                    for (int i = 0; i < rlength + 1; i++) {
                                                        final String t_nuevos = temporales.get(i);
                                                        temp = getTemp(ca);
                                                        write3dir(temp + "=" + t_gl + "+" + (int) (i + 2) + ";");
                                                        write3dir("heap[" + temp + "]=" + t_nuevos + ";");
                                                    }
                                                    length = 1 + rlength;
                                                    temp = t_gl;
                                                    type = TType.STRING.toString();
                                                    seConcateno = true;
                                                    break;
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s + %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.CHAR.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        default:
                                            throw new UnsupportedOperationException("Tipos incorrectos");
                                    }

                                    /*if (seConcateno == false) {
                                     //Si no es concatenacion ejecutar lo siguiente
                                        
                                     }*/
                                    return new Dict("val", temp, "type", type, "length", length);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.PLUS);
                        }
                    });

                    //</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="MINUS">
                    put(TOperation.MINUS, new Operation() {
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;
                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim methodsim = (Sim) scope.peek();

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");

                                    String type;
                                    Object temp = null;
                                    String tres = null;
                                    switch (ltype) {
                                        case "INT":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "FLOAT":
                                            switch (rtype) {
                                                case "INT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, t5_i);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    write3dir("//CAST CHAR - FLOAT");
                                                    String t1_c = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                    final String t2_c = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                    write3dir("stack[%s]= %s;", t2_c, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_c = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                    String t4_c = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                    String t5_c = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_c, t4_c);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, t5_c);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "CHAR":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s - %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.CHAR.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        default:
                                            throw new UnsupportedOperationException("Tipos incorrectos");
                                    }

                                    return new Dict("val", temp, "type", type);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.MINUS);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="MUL">
                    put(TOperation.MULT, new Operation() {
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;
                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim methodsim = (Sim) scope.peek();

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");

                                    String type;
                                    Object temp = null;
                                    String tres = null;
                                    switch (ltype) {
                                        case "INT":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "FLOAT":
                                            switch (rtype) {
                                                case "INT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, t5_i);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    write3dir("//CAST CHAR - FLOAT");
                                                    String t1_c = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                    final String t2_c = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                    write3dir("stack[%s]= %s;", t2_c, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_c = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                    String t4_c = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                    String t5_c = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_c, t4_c);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, t5_c);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "CHAR":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s * %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.CHAR.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        default:
                                            throw new UnsupportedOperationException("Tipos incorrectos");
                                    }

                                    return new Dict("val", temp, "type", type);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.MULT);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DIV">
                    put(TOperation.DIV, new Operation() {
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;

                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim methodsim = (Sim) scope.peek();

                            try {
                                if (is3dirPhase(phase)) {

                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");

                                    String type;
                                    Object temp = null;
                                    String tres = null;
                                    switch (ltype) {
                                        case "INT":
                                            switch (rtype) {
                                                case "INT":
                                                    final String t_in = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", t_in, lval, rval);
                                                    write3dir(tres);
                                                    //Conversion a float
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1 = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1, methodsim.size);

                                                    final String t2 = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2, t1, 0);
                                                    write3dir("stack[%s]= %s;", t2, t_in);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult, methodsim.size);

                                                    String t4 = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4, t_ult, 0);

                                                    String t5 = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5, t4);

                                                    temp = t5;
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    final String t_in_c = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", t_in_c, lval, rval);
                                                    write3dir(tres);
                                                    //Conversion a float
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_c = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                    final String t2_c = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                    write3dir("stack[%s]= %s;", t2_c, t_in_c);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_c = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                    String t4_c = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                    String t5_c = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_c, t4_c);

                                                    temp = t5_c;
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "FLOAT":
                                            switch (rtype) {
                                                case "INT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", temp, lval, t5_i);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    write3dir("//CAST CHAR - FLOAT");
                                                    String t1_c = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                    final String t2_c = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                    write3dir("stack[%s]= %s;", t2_c, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_c = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                    String t4_c = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                    String t5_c = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_c, t4_c);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", temp, lval, t5_c);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "CHAR":
                                            switch (rtype) {
                                                case "INT":
                                                    final String t_in = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", t_in, lval, rval);
                                                    write3dir(tres);
                                                    //Conversion a float
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1 = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1, methodsim.size);

                                                    final String t2 = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2, t1, 0);
                                                    write3dir("stack[%s]= %s;", t2, t_in);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult, methodsim.size);

                                                    String t4 = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4, t_ult, 0);

                                                    String t5 = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5, t4);

                                                    temp = t5;
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    final String t_in_c = getTemp(ca);
                                                    tres = String.format("%s = %s / %s;", t_in_c, lval, rval);
                                                    write3dir(tres);
                                                    //Conversion a float
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_c = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                    final String t2_c = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                    write3dir("stack[%s]= %s;", t2_c, t_in_c);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_c = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                    String t4_c = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                    String t5_c = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_c, t4_c);

                                                    temp = t5_c;
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        default:
                                            throw new UnsupportedOperationException("Tipos incorrectos");
                                    }

                                    return new Dict("val", temp, "type", type);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.DIV);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="EXP">
                    put(TOperation.EXP, new Operation() {
                        @Override
                        public Object exec(Node node, Object actions) {
                            final Dict ca = (Dict) actions;
                            final Dict ref = node.getDictRef();
                            final Object ref_info = ref.get("info");
                            final Object phase = ca.get("phase");

                            final CC cc = (CC) ca.get("cc");
                            final Stack scope = ca.getStack("scope");
                            final Sim methodsim = (Sim) scope.peek();

                            try {
                                if (is3dirPhase(phase)) {
                                    String lval = node.getLeft().getDictVal().getString("val");
                                    String rval = node.getRight().getDictVal().getString("val");

                                    String ltype = node.getLeft().getDictVal().getString("type");
                                    String rtype = node.getRight().getDictVal().getString("type");

                                    String type;
                                    Object temp = null;
                                    String tres = null;
                                    switch (ltype) {
                                        case "INT":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "FLOAT":
                                            switch (rtype) {
                                                case "INT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, t5_i);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "FLOAT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    write3dir("//CAST CHAR - FLOAT");
                                                    String t1_c = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                    final String t2_c = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                    write3dir("stack[%s]= %s;", t2_c, rval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_c = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                    String t4_c = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                    String t5_c = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_c, t4_c);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, t5_c);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        case "CHAR":
                                            switch (rtype) {
                                                case "INT":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.INT.toString();
                                                    break;
                                                case "FLOAT":
                                                    write3dir("//CAST INT - FLOAT");
                                                    String t1_i = getTemp(ca);
                                                    write3dir("%s = p + %d;", t1_i, methodsim.size);

                                                    final String t2_i = getTemp(actions);
                                                    write3dir("%s = %s + %d;", t2_i, t1_i, 0);
                                                    write3dir("stack[%s]= %s;", t2_i, lval);

                                                    write3dir("p = p + %d;", methodsim.size);
                                                    write3dir("call int_to_float();");
                                                    write3dir("p = p - %d;", methodsim.size);
                                                    String t_ult_i = getTemp(ca);

                                                    write3dir("%s = p + %d;", t_ult_i, methodsim.size);

                                                    String t4_i = getTemp(ca);
                                                    write3dir("%s = %s + %d;", t4_i, t_ult_i, 0);

                                                    String t5_i = getTemp(ca);
                                                    write3dir("%s = stack[%s];", t5_i, t4_i);

                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, t5_i, rval);
                                                    write3dir(tres);
                                                    type = TType.FLOAT.toString();
                                                    break;
                                                case "BOOLEAN":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "STRING":
                                                    throw new UnsupportedOperationException("Tipos incorrectos, no se puede operar");
                                                case "CHAR":
                                                    temp = getTemp(ca);
                                                    tres = String.format("%s = %s ^ %s;", temp, lval, rval);
                                                    write3dir(tres);
                                                    type = TType.CHAR.toString();
                                                    break;
                                                default:
                                                    throw new UnsupportedOperationException("Tipos incorrectos");
                                            }
                                            break;
                                        default:
                                            throw new UnsupportedOperationException("Tipos incorrectos");
                                    }

                                    return new Dict("val", temp, "type", type);
                                }
                            } catch (UnsupportedOperationException exc) {
                                compiler_error(exc, TErr.SEMANTICO, ref_info, actions);
                            }
                            return noActionsProcessed(TOperation.EXP);
                        }
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="CAST">
                    put(TOperation.CAST, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_params = ref.getDict("params");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {
                                String tip = ref.getDict("type").getString("val");

                                String lval = node.getLeft().getDictVal().getString("val");
                                String ltype = node.getLeft().getDictVal().getString("type");
                                int length = 0;
                                String tipo = null;
                                Object temp = null;

                                switch (ltype) {//tipo original
                                    case "INT":
                                        switch (tip) {//tipo destino
                                            case "INT":
                                                tipo = TType.INT.toString();
                                                temp = lval;
                                                break;
                                            case "FLOAT":
                                                write3dir("//CAST INT - FLOAT");
                                                String t1 = getTemp(ca);
                                                write3dir("%s = p + %d;", t1, methodsim.size);

                                                final String t2 = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2, t1, 0);
                                                write3dir("stack[%s]= %s;", t2, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call int_to_float();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult, methodsim.size);

                                                String t4 = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4, t_ult, 0);

                                                String t5 = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5, t4);

                                                tipo = TType.FLOAT.toString();
                                                temp = t5;
                                                break;
                                            case "BOOLEAN":
                                                throw new UnsupportedOperationException("No se puede convertir entero a booleano");
                                            case "STRING":
                                                String t_gl = getTemp(ca);
                                                write3dir(t_gl + "=h;");
                                                write3dir("h = h+" + (int) (3) + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                write3dir("heap[" + temp + "]=-101;");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                write3dir("heap[" + temp + "]=" + lval + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 2 + ";");
                                                write3dir("heap[" + temp + "]=-1;");

                                                //Modificando heap, se suma dos porque se agrego en entero y -100
                                                length = 3;
                                                temp = t_gl;
                                                tipo = TType.STRING.toString();
                                                break;
                                            case "CHAR":
                                                write3dir("//CAST INT - CHAR");
                                                String t1_c = getTemp(ca);
                                                write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                final String t2_c = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                write3dir("stack[%s]= %s;", t2_c, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call int_to_char();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult_c = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                String t4_c = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                String t5_c = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5_c, t4_c);

                                                tipo = TType.CHAR.toString();
                                                temp = t5_c;
                                                break;
                                            default:
                                                throw new UnsupportedOperationException("Tipos incorrectos");
                                        }
                                        break;
                                    case "FLOAT":
                                        switch (tip) {//tipo destino
                                            case "INT":
                                                write3dir("//CAST FLOAT - INT");
                                                String t1 = getTemp(ca);
                                                write3dir("%s = p + %d;", t1, methodsim.size);

                                                final String t2 = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2, t1, 0);
                                                write3dir("stack[%s]= %s;", t2, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call float_to_int();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult, methodsim.size);

                                                String t4 = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4, t_ult, 0);

                                                String t5 = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5, t4);

                                                tipo = TType.INT.toString();
                                                temp = t5;
                                                break;
                                            case "FLOAT":
                                                tipo = TType.FLOAT.toString();
                                                temp = lval;
                                                break;
                                            case "BOOLEAN":
                                                throw new UnsupportedOperationException("No se puede convertir INT a FLOAT");
                                            case "STRING":
                                                String t_gl = getTemp(ca);
                                                write3dir(t_gl + "=h;");
                                                write3dir("h = h+" + (int) (3) + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                write3dir("heap[" + temp + "]=-101;");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                write3dir("heap[" + temp + "]=" + lval + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 2 + ";");
                                                write3dir("heap[" + temp + "]=-1;");

                                                //Modificando heap, se suma dos porque se agrego en entero y -100
                                                length = 3;
                                                temp = t_gl;
                                                tipo = TType.STRING.toString();
                                                break;
                                            case "CHAR":
                                                throw new UnsupportedOperationException("No se puede convertir FLOAT a CHAR");
                                            default:
                                                throw new UnsupportedOperationException("Tipos incorrectos");
                                        }
                                        break;
                                    case "BOOLEAN":
                                        switch (tip) {//tipo destino
                                            case "INT":
                                                throw new UnsupportedOperationException("No se puede convertir BOOLEAN A INT");
                                            case "FLOAT":
                                                throw new UnsupportedOperationException("No se puede convertir BOOLEAN a FLOAT");
                                            case "BOOLEAN":
                                                tipo = TType.BOOLEAN.toString();
                                                temp = lval;
                                                break;
                                            case "STRING":
                                                String t_gl = getTemp(ca);
                                                write3dir(t_gl + "=h;");
                                                write3dir("h = h+" + (int) (3) + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                write3dir("heap[" + temp + "]=-102;");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                write3dir("heap[" + temp + "]=" + lval + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 2 + ";");
                                                write3dir("heap[" + temp + "]=-1;");

                                                //Modificando heap, se suma dos porque se agrego en entero y -100
                                                length = 3;
                                                temp = t_gl;
                                                tipo = TType.STRING.toString();
                                                break;
                                            case "CHAR":
                                                throw new UnsupportedOperationException("No se puede convertir BOOLEAN a CHAR");
                                            default:
                                                throw new UnsupportedOperationException("Tipos incorrectos");
                                        }
                                        break;
                                    case "STRING":
                                        switch (tip) {//tipo destino
                                            case "INT":
                                                write3dir("//CAST STRING - INT");
                                                String t1 = getTemp(ca);
                                                write3dir("%s = p + %d;", t1, methodsim.size);

                                                final String t2 = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2, t1, 0);
                                                write3dir("stack[%s]= %s;", t2, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call string_to_int();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult, methodsim.size);

                                                String t4 = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4, t_ult, 0);

                                                String t5 = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5, t4);

                                                tipo = TType.INT.toString();
                                                temp = t5;
                                                break;
                                            case "FLOAT":
                                                write3dir("//CAST STRING - FLOAT");
                                                String t1_f = getTemp(ca);
                                                write3dir("%s = p + %d;", t1_f, methodsim.size);

                                                final String t2_f = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2_f, t1_f, 0);
                                                write3dir("stack[%s]= %s;", t2_f, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call string_to_float();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult_f = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult_f, methodsim.size);

                                                String t4_f = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4_f, t_ult_f, 0);

                                                String t5_f = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5_f, t4_f);

                                                tipo = TType.FLOAT.toString();
                                                temp = t5_f;
                                                break;
                                            case "BOOLEAN":
                                                write3dir("//CAST STRING - BOOLEAN");
                                                String t1_b = getTemp(ca);
                                                write3dir("%s = p + %d;", t1_b, methodsim.size);

                                                final String t2_b = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2_b, t1_b, 0);
                                                write3dir("stack[%s]= %s;", t2_b, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call string_to_int();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult_b = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult_b, methodsim.size);

                                                String t4_b = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4_b, t_ult_b, 0);

                                                String t5_b = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5_b, t4_b);

                                                tipo = TType.INT.toString();
                                                temp = t5_b;
                                                break;
                                            case "STRING":
                                                tipo = TType.STRING.toString();
                                                temp = val;
                                                break;
                                            case "CHAR":
                                                write3dir("//CAST STRING - CHAR");
                                                String t1_c = getTemp(ca);
                                                write3dir("%s = p + %d;", t1_c, methodsim.size);

                                                final String t2_c = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2_c, t1_c, 0);
                                                write3dir("stack[%s]= %s;", t2_c, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call string_to_float();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult_c = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult_c, methodsim.size);

                                                String t4_c = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4_c, t_ult_c, 0);

                                                String t5_c = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5_c, t4_c);

                                                tipo = TType.CHAR.toString();
                                                temp = t5_c;
                                                break;
                                            default:
                                                throw new UnsupportedOperationException("Tipos incorrectos");
                                        }
                                        break;
                                    case "CHAR":
                                        switch (tip) {//tipo destino
                                            case "INT":
                                                write3dir("//CAST CHAR - INT");
                                                String t1 = getTemp(ca);
                                                write3dir("%s = p + %d;", t1, methodsim.size);

                                                final String t2 = getTemp(actions);
                                                write3dir("%s = %s + %d;", t2, t1, 0);
                                                write3dir("stack[%s]= %s;", t2, lval);

                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call char_to_int();");
                                                write3dir("p = p - %d;", methodsim.size);
                                                String t_ult = getTemp(ca);

                                                write3dir("%s = p + %d;", t_ult, methodsim.size);

                                                String t4 = getTemp(ca);
                                                write3dir("%s = %s + %d;", t4, t_ult, 0);

                                                String t5 = getTemp(ca);
                                                write3dir("%s = stack[%s];", t5, t4);

                                                tipo = TType.INT.toString();
                                                temp = t5;
                                                break;
                                            case "FLOAT":
                                                throw new UnsupportedOperationException("No se puede convertir CHAR a FLOAT");
                                            case "BOOLEAN":
                                                throw new UnsupportedOperationException("No se puede convertir CHAR a BOOLEAN");
                                            case "STRING":
                                                String t_gl = getTemp(ca);
                                                write3dir(t_gl + "=h;");
                                                write3dir("h = h+" + (int) (3) + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 0 + ";");
                                                write3dir("heap[" + temp + "]=" + lval + ";");

                                                temp = getTemp(ca);
                                                write3dir(temp + "=" + t_gl + "+" + 1 + ";");
                                                write3dir("heap[" + temp + "]=-1;");

                                                //Modificando heap, se suma dos porque se agrego en entero y -100
                                                length = 3;
                                                temp = t_gl;
                                                tipo = TType.STRING.toString();
                                                break;
                                            case "CHAR":
                                                tipo = TType.CHAR.toString();
                                                temp = lval;
                                                break;
                                            default:
                                                throw new UnsupportedOperationException("Tipos incorrectos");
                                        }
                                        break;
                                    default:
                                        throw new UnsupportedOperationException("Tipos incorrectos");
                                }
                                write3dir("//" + temp + " tipo " + tipo + " length " + length);
                                return new Dict("type", tipo, "val", temp, "length", length);
                            }
                        } catch (UnsupportedOperationException exc) {
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.CAST);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="LEAF">
                    put(TOperation.LEAF, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim method_sim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Boolean ref_pointer = ref.getBoolean("pointer");
                        final Object ref_type = ref.get("type");
                        final Object ref_val = ref.get("val");
                        Object ref_info = ref.get("info");
                        final Dict val = new Dict();

                        //<editor-fold defaultstate="collapsed" desc="PROCESAMIENTO...">
                        try {
                            if (is3dirPhase(phase)) {
                                //<editor-fold defaultstate="collapsed" desc="3dir">

                                Object val_type = ref_type;
                                Object val_pointer = null;
                                Object val_val = ref_val;
                                Object val_rawval = null;

                                if (ref_type == TType.REF) {
                                    //<editor-fold defaultstate="collapsed" desc="ref">
                                    ArrayList<Dict> ref_val_list = val_val instanceof Dict ? ((Dict) ref_val).getDictArrayList("list") : new ArrayList<Dict>() {
                                        {
                                            add(ref);
                                        }
                                    };

                                    Sim temp_sim = null;
                                    for (int i = 0; i < ref_val_list.size(); i++) {
                                        final Dict id = ref_val_list.get(i);
                                        final String id_val = id.getString("val");
                                        final Dict id_dims = id.getDict("dims");
                                        ref_info = id.get("info");

                                        // primer nive... en el metodo actual...
                                        if (i == 0) {

                                            final Sim id_sim = cc.getSims().getLocalvar(method_sim.name, id_val, ((Dict) method_sim.others).getObjArray("overload"));
                                            final String t1 = getTemp(ca);

                                            write3dir(String.format("%s = p + %d;", t1, id_sim.position));
                                            val_val = t1;
                                            val_pointer = t1;

                                            final Dict id_sim_others = id_sim.getDictOthers();
                                            final boolean id_sim_others_array = id_sim_others.containsKey("array") ? id_sim_others.getBoolean("array") : false;

                                            if (id_sim_others_array) {
                                                //<editor-fold defaultstate="collapsed" desc="ARREGLO...">
                                                if (id_dims == null) {
                                                    throwException("se esperaba posicion en el arreglo");
                                                }

                                                int[] id_sim_dims = id_sim.getDictOthers().getIntArray("dims");
                                                ArrayList<Dict> id_dims_list = id_dims.getDictArrayList("list");
                                                String temp = null;

                                                for (int j = 0; j < id_dims_list.size(); j++) {
                                                    final Dict dim = id_dims_list.get(j);
                                                    final Node dim_node = dim.getNode("nodo");
                                                    dim_node.exec(actions);
                                                    final Dict dim_node_val = dim_node.getDictVal();
                                                    final String dim_node_val_val = dim_node_val.getString("val");

                                                    if (j == 0) {
                                                        final String t2 = getTemp(ca);
                                                        final String t3 = getTemp(ca);
                                                        write3dir(String.format("%s = %s + %s;", t2, t1, dim_node_val_val));
                                                        write3dir(String.format("%s = %s - 0;", t3, t2));
                                                        temp = t3;
                                                        continue;
                                                    }

                                                    final String t2 = getTemp(ca);
                                                    final String t3 = getTemp(ca);
                                                    final String t4 = getTemp(ca);
                                                    try {
                                                        write3dir(String.format("%s = %s * %d;", t2, temp, id_sim_dims[j]));
                                                    } catch (ArrayIndexOutOfBoundsException exc) {
                                                        throwException("Arreglo fuera de rango en posicion [" + j + "]");
                                                    }
                                                    write3dir(String.format("%s = %s + %s;", t3, t2, dim_node_val_val));
                                                    write3dir(String.format("%s = %s - 0;", t4, t3));
                                                    temp = t4;
                                                }
                                                val_val = temp;
                                                //</editor-fold>
                                            }

                                            if (ref_pointer == null || !ref_pointer) {
                                                final String t2 = getTemp(ca);
                                                write3dir(String.format("%s = stack[%s];", t2, t1));
                                                val_pointer = t1;
                                                val_val = t2;
                                                val_type = id_sim.type;
                                            }

                                            temp_sim = id_sim;
                                            continue;
                                        }

                                        if (isPrimitiveType(temp_sim.type)) {
                                            throwException("No se encuentra el simbolo en el tipo -> " + temp_sim.type);
                                        }

                                        Sim class_sim = cc.getSims().getClass(temp_sim.type);
                                        Sim field_sim = cc.getSims().getPublicField(temp_sim.type, id_val);

                                        String t1 = getTemp(ca);
                                        write3dir(String.format("%s = %s + %d;", t1, val_val, field_sim.position));
                                        val_val = t1;
                                        if (ref_pointer == null || !ref_pointer) {
                                            String t2 = getTemp(ca);
                                            write3dir(String.format("%s = heap[%s];", t2, t1));
                                            val_pointer = t1;
                                            val_val = t2;
                                            val_type = field_sim.type;
                                        }
                                    }
                                    //</editor-fold>
                                } else {

                                    TType temp_type = (TType) ref_type;
                                    val_type = ref_type;

                                    if (temp_type == TType.NULL) {
                                        Object t1 = getTemp(ca);
                                        write3dir("// null -> " + ref_val);
                                        write3dir(String.format("%s = %d;", t1, -1));
                                        val_val = t1;
                                    } else if (temp_type == TType.BOOLEAN) {
                                        Object t1 = getTemp(ca);
                                        String l1 = getLabel(ca);
                                        String l2 = getLabel(ca);
                                        write3dir("// boolean -> " + ref_val);
                                        write3dir(String.format("%s = %d;", t1, Boolean.parseBoolean(ref_val.toString()) ? 1 : 0));
                                        write3dir(String.format("if %s == 1 then goto %s;", t1, l1));
                                        write3dir(String.format("goto %s;", l2));

                                        val.put("tags", new TagSet() {
                                            {
                                                this.etqFalso = l2;
                                                this.etqVerdad = l1;
                                            }
                                        });
                                        val.put("ltrue", l1);
                                        val.put("lfalse", l2);
                                        val_val = t1;
                                    } else if (temp_type == TType.CHAR) {
                                        Object temp = getTemp(ca);
                                        write3dir("// char -> " + ref_val);
                                        write3dir(String.format("%s = %s;", temp, ref_val.toString().codePointAt(1)));
                                        val_val = temp;
                                    } else if (temp_type == TType.STRING) {
                                        final Object t1 = getTemp(ca);
                                        final char[] ref_val_chars = ref_val.toString().toCharArray();

                                        write3dir("// string -> " + ref_val);
                                        write3dir(String.format("%s = h;", t1));
                                        write3dir(String.format("h = h + %d;", ref_val_chars.length + 1));

                                        for (int i = 0; i < ref_val_chars.length + 1; i++) {
                                            final String t2 = getTemp(ca);
                                            write3dir(String.format("%s = %s + %d;", t2, t1, i));
                                            if (i == ref_val_chars.length) {
                                                write3dir(String.format("heap[%s] = %s;", t2, -1));
                                                continue;
                                            }
                                            char c = ref_val_chars[i];
                                            write3dir(String.format("heap[%s] = %s;", t2, (int) c));
                                        }

                                        val_val = t1;
                                        val.put("length", ref_val_chars.length);
                                    } else {
                                        Object temp = getTemp(ca);
                                        write3dir("// int,float -> " + ref_val);
                                        write3dir(String.format("%s = %s;", temp, ref_val));
                                        val_val = temp;
                                    }
                                }

                                val.put("pointer", val_pointer);
                                val.put("raw_val", ref_val);
                                val.put("val", val_val);
                                val.put("type", val_type);

                                //</editor-fold>
                                return val;
                            }
                        } catch (UnsupportedOperationException ex) {
                            compiler_error(ex, TErr.SEMANTICO, ref_info, actions);
                        }
                        //</editor-fold>

                        return noActionsProcessed(TOperation.LEAF);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="NEW">
                    put(TOperation.NEW, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final boolean ref_array = ref.containsKey("array") ? ref.getBoolean("array") : false;
                        final Dict ref_type = ref.getDict("type");
                        final Dict ref_params = ref.getDict("params");
                        Object ref_info = ref.get("info");
                        final Dict val = new Dict();

                        //<editor-fold defaultstate="collapsed" desc="PROCESAMIENTO...">
                        try {
                            if (is3dirPhase(phase)) {
                                if (ref_array) {
                                    //<editor-fold defaultstate="collapsed" desc="ARRAY...">
                                    final ArrayList<Dict> list = ref_params.getDictArrayList("list");
                                    int[] dims = new int[list.size()];
                                    int size = 1;
                                    for (int i = 0; i < list.size(); i++) {
                                        final Dict expr = list.get(i);
                                        final Node expr_node = expr.getNode("nodo");
                                        expr_node.exec(actions);
                                        final Dict expr_node_val = expr_node.getDictVal();
                                        final Object expr_node_val_type = expr_node_val.get("type");
                                        final int expr_node_val_val = expr_node_val.getInt("raw_val");

                                        if (!expr_node_val_type.equals(TType.INT)) {
                                            throwException("Se esperaba un valor entero");
                                        }
                                        dims[i] = expr_node_val_val;
                                        size *= expr_node_val_val;
                                    }
                                    //</editor-fold>
                                    val.put("val", dims);
                                    val.put("size", size);
                                    val.put("type", "array");
                                } else {
                                    //llamar a constructor
                                    ref_info = ref_type.get("info");
                                    Object classname = ref_type.get("val");

                                    Sim classsim = cc.getSims().getPublicClass(classname);

                                    poolOn(actions);

                                    String t1 = getTemp(actions);
                                    String t2 = getTemp(actions);
                                    String t3 = getTemp(actions);

                                    write3dir("// new object [%s]", classsim.name);
                                    write3dir("%s = p + %d;", t1, methodsim.size);
                                    write3dir("%s = h;", t2);
                                    write3dir("h = h + %d;", classsim.size);
                                    write3dir("// parametro -> 0 (this)");
                                    write3dir("%s = %s + 0;", t3, t1);
                                    write3dir("stack[%s] = %s;", t3, t2);

                                    ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                    Object[] params = new Object[param_list.size()];
                                    for (int i = 0; i < param_list.size(); i++) {
                                        final Dict param = param_list.get(i);
                                        final Node param_nodo = param.getNode("nodo");
                                        final String t4 = getTemp(actions);

                                        write3dir("// parametro -> %d", i + 1);
                                        write3dir("%s = %s + %d;", t4, t1, i + 1);
                                        param_nodo.exec(actions);
                                        final Dict param_nodo_val = param_nodo.getDictVal();
                                        final String param_nodo_val_type = param_nodo_val.getString("type");
                                        final String param_nodo_val_val = param_nodo_val.getString("val");
                                        params[i] = param_nodo_val_type;
                                        write3dir("stack[%s] = %s;", t4, param_nodo_val_val);
                                    }
                                    final Sim constructorsim = cc.getSims().getConstructor(classsim.name, params);

                                    write3dir(poolCommit(actions));
                                    write3dir("p = p + %d;", methodsim.size);
                                    write3dir("call %s();", getMethodName(constructorsim));
                                    write3dir("p = p - %d;", methodsim.size);

                                    val.put("type", classsim.name);
                                    val.put("val", t2);
                                }

                                return val;
                            }
                        } catch (UnsupportedOperationException ex) {
                            poolRollback(actions);
                            compiler_error(ex, TErr.SEMANTICO, ref_info, actions);
                        }
                        //</editor-fold>

                        return noActionsProcessed(TOperation.NEW);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="SET_VAR">
                    put(TOperation.SET_VAR, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC ca_cc = (CC) ca.get("cc");
                        final Stack ca_scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) ca_scope.peek();
                        final Object ca_phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Dict ref_name = ref.getDict("name");
                        final Dict ref_val = ref.getDict("val");
                        final Dict ref_operator = ref.getDict("operator");
                        final Object ref_operator_info = ref_operator.get("info");

                        Object info = ref_operator_info;

                        final Dict val = new Dict();
                        Object val_val = null;
                        Object val_type = null;

                        try {
                            if (isDefPhase(ca_phase)) {
                                return null;
                            }

                            if (is3dirPhase(ca_phase)) {

                                poolOn(actions);
                                write3dir("// $$$$$$$$ asignacion $$$$$$$$ //");
                                write3dir("// $$$$ variable");
                                final ArrayList<Dict> name_list = ref_name.getDictArrayList("list");
                                for (int i = 0; i < name_list.size(); i++) {
                                    final Dict name = name_list.get(i);
                                    final String name_val = name.getString("val");
                                    final Object name_info = name.get("info");
                                    info = name_info;

                                    if (i == 0) {
                                        final Sim localvarsim = ca_cc.getSims().getLocalvar(methodsim.name, name_val, methodsim.getDictOthers().getObjArray("overload"));
                                        final String t1 = getTemp(actions);

                                        write3dir("%s = p + %d;", t1, localvarsim.position);
                                        val_val = t1;
                                        val_type = localvarsim.type;

                                        if (name_list.size() > 1) {
                                            if (isPrimitiveType(localvarsim.type)) {
                                                throwException("Las variables con tipo primitivos no tienen campos...");
                                            }
                                        }
                                        continue;
                                    }

                                    Sim fieldsim = ca_cc.getSims().getPublicField(val_type, name_val);
                                    String t1 = getTemp(actions);
                                    String t2 = getTemp(actions);
                                    if (i == 1) {
                                        write3dir("%s = stack[%s];", t1, val_val);
                                    } else {
                                        write3dir("%s = heap[%s];", t1, val_val);
                                    }

                                    write3dir("%s = %s + %d;", t2, t1, fieldsim.position);

                                    val_val = t2;
                                    val_type = fieldsim.type;
                                }

                                write3dir("// $$$$ valor");
                                final String operator_val = ref_operator.getString("val");
                                final Node ref_val_node = ref_val.getNode("nodo");
                                ref_val_node.exec(actions);
                                final Dict ref_val_node_val = ref_val_node.getDictVal();
                                if (ref_val_node_val == null) {
                                    throwException("No se pudo obtener el valor...");
                                }
                                final String ref_val_nodo_val = ref_val_node_val.getString("val");
                                final String ref_val_nodo_type = ref_val_node_val.getString("type");

                                if (!val_type.toString().equals(ref_val_nodo_type)) {
                                    throwException("Tipos incompatibles -> %s = %s ", val_type, ref_val_nodo_type);
                                }

                                write3dir("// $$$$ asignacion");
                                if (isPrimitiveType(val_type) && name_list.size() == 1) {
                                    write3dir("stack[%s] = %s;", val_val, ref_val_nodo_val);
                                } else {
                                    write3dir("heap[%s] = %s;", val_val, ref_val_nodo_val);
                                }

                                write3dir("// $$$$$$$$ asignacion $$$$$$$$ //");
                                write3dir(poolCommit(actions));

                                val_val = ref_val_nodo_val;

                                val.put("val", val_val);
                                val.put("type", val_type);
                                return val;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.SET_VAR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="METHOD_CALL">
                    put(TOperation.METHOD_CALL, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_name = ref.getDict("name");
                        final Dict ref_params = ref.getDict("params");

                        final Dict val = new Dict();
                        Object info = ref_info;
                        Object val_val = null;
                        Object val_type = null;

                        try {
                            if (is3dirPhase(phase)) {

                                final ArrayList<Dict> name_list = ref_name.getDictArrayList("list");

                                poolOn(actions);
//                                String t1 = getTemp(actions);
//                                write3dir("%s = p + %d;", t1, methodsim.size);
                                write3dir("// ######## llamada metodo ######## //");

                                for (int i = 0; i < name_list.size(); i++) {
                                    Dict name = (Dict) name_list.get(i);
                                    String name_val = name.getString("val");
                                    Object name_info = name.get("info");
                                    info = name_info;

                                    if (i == 0) {
                                        // metodo local
                                        if (name_list.size() == 1) {
                                            throwException("No se permiten llamadas a metodos locales...");
                                        }
                                        // variable local
                                        Sim localvarsim = cc.getSims().getLocalvar(methodsim.name, name_val, methodsim.getDictOthers().getObjArray("overload"));
                                        if (isPrimitiveType(localvarsim.type)) {
                                            throwException("Variables de tipos primitivos no tienen metodos...");
                                        }

                                        String t2 = getTemp(actions);
                                        String t3 = getTemp(actions);

                                        write3dir("%s = p + %d;", t2, localvarsim.position);
                                        write3dir("%s = stack[%s];", t3, t2);
                                        val_val = t3;
                                        val_type = localvarsim.type;
                                        continue;
                                    }
                                    // campos en clase
                                    if (i < name_list.size() - 1) {
                                        final Sim fieldsim = cc.getSims().getPublicField(val_type, name_val);
                                        String t2 = getTemp(actions);
                                        String t3 = getTemp(actions);
                                        write3dir("%s = %s + %d;", t2, val_val, fieldsim.position);
                                        write3dir("%s = heap[%s];", t3, t2);
                                        val_val = t3;
                                        val_type = fieldsim.type;
                                    }
                                    // metodo objeto

                                    String t2 = getTemp(actions);
                                    String t3 = getTemp(actions);

                                    write3dir("%s = p + %d;", t2, methodsim.size);
                                    write3dir("// parametro -> 0 (this)");
                                    write3dir("%s = %s + 0;", t3, t2);
                                    write3dir("stack[%s] = %s;", t3, val_val);

                                    ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                    Object[] params = new Object[param_list.size()];
                                    for (int j = 0; j < param_list.size(); j++) {
                                        final Dict param = param_list.get(j);
                                        final Node param_nodo = param.getNode("nodo");
                                        final String t4 = getTemp(actions);

                                        write3dir("// parametro -> %d", j + 1);
                                        write3dir("%s = %s + %d;", t4, t2, j + 1);
                                        param_nodo.exec(actions);
                                        final Dict param_nodo_val = param_nodo.getDictVal();
                                        final String param_nodo_val_type = param_nodo_val.getString("type");
                                        final String param_nodo_val_val = param_nodo_val.getString("val");
                                        params[j] = param_nodo_val_type;
                                        write3dir("stack[%s] = %s;", t4, param_nodo_val_val);
                                    }

                                    Sim callsim = cc.getSims().getPublicMethod(val_type, name_val, params);
                                    write3dir(poolCommit(actions));
                                    write3dir("p = p + %d;", methodsim.size);
                                    write3dir("call %s();", getMethodName(callsim));
                                    write3dir("p = p - %d;", methodsim.size);

                                    val_val = null;
                                    val_type = callsim.type;
                                    // return
                                    if (!callsim.type.toString().equals(TType.VOID.toString())) {
                                        String t5 = getTemp(actions);
                                        String t6 = getTemp(actions);
                                        String t7 = getTemp(actions);
                                        write3dir("%s = p + %d;", t5, methodsim.size);
                                        write3dir("%s = %s + 0;", t6, t5);
                                        write3dir("%s = stack[%s];", t7, t6);
                                        val_val = t7;
                                    }

                                }

                                write3dir("// ######## llamada metodo ######## //");

                                val.put("val", val_val);
                                val.put("type", val_type);
                                return val;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.METHOD_CALL);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="WHILE">
                    put(TOperation.STMT_WHILE, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final Stack flow_control = ca.getStack("flow_control");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_condition = ref.getDict("condition");
                        final Dict ref_stmts = ref.getDict("stmts");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {
                                poolOn(actions);
                                final Node condition_node = ref_condition.getNode("nodo");
                                final ArrayList<Dict> stmt_list = ref_stmts.getDictArrayList("list");
                                final String l1 = getLabel(actions);
                                final String l2 = getLabel(actions);
                                write3dir("// >>>>>>>> while <<<<<<<< //");
                                write3dir("// >>>> while - label");
                                write3dir("%s:", l1);
                                write3dir("// >>>> while - condicion");
                                condition_node.exec(actions);
                                final Dict condition_node_val = condition_node.getDictVal();
                                final String condition_node_val_val = condition_node_val.getString("val");
                                final String condition_node_val_type = condition_node_val.getString("type");

                                if (!condition_node_val_type.equals(TType.BOOLEAN.toString())) {
                                    throwException("Se esperaba un tipo de dato -> %s en la condicion no un -> %s...", TType.BOOLEAN, condition_node_val_type);
                                }
                                TagSet etqs = condition_node_val.getTags("tags");
                                //final String condition_node_val_ltrue = condition_node_val.getString("ltrue");
                                //final String condition_node_val_lfalse = condition_node_val.getString("lfalse");

                                final String condition_node_val_ltrue = etqs.etqVerdad;
                                final String condition_node_val_lfalse = etqs.etqFalso;

                                write3dir("// >>>> while - true");
                                write3dir("%s:", condition_node_val_ltrue);
                                write3dir("// >>>> while - sentencias");
                                // ejecutar aqui el bloque del while
                                // controlar lo variables locales que se declaran aqui
                                // cuando termina el bloque sacar todas las variables locales
                                // declaradas 
                                // ***** ya esta...
                                flow_control.push(l2);
                                blockIn(actions);
                                frc_compiler_stmts_exec(ref_stmts, ca);
                                blockOut(actions);
                                flow_control.pop();
                                /////
                                write3dir("goto %s;", l1);
                                write3dir("// >>>> while - false");
                                write3dir("%s:", condition_node_val_lfalse);
                                write3dir("// >>>> while - label salida");
                                write3dir("%s:", l2);
                                write3dir("// >>>>>>>> while <<<<<<<< //");

                                write3dir(poolCommit(actions));
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.STMT_WHILE);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="DOWHILE">
                    put(TOperation.STMT_DOWHILE, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final Stack flow_control = ca.getStack("flow_control");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_condition = ref.getDict("condition");
                        final Dict ref_stmts = ref.getDict("stmts");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {
                                final Node condition_node = ref_condition.getNode("nodo");

                                poolOn(actions);
                                final String l1 = getLabel(actions);
                                final String l2 = getLabel(actions);
                                write3dir("// >>>>>>>> dowhile <<<<<<<<");
                                write3dir("// >>>> dowhile - label");
                                write3dir("%s:", l1);
                                write3dir("// >>>> dowhile - sentencias");
                                flow_control.push(l2);
                                blockIn(actions);
                                frc_compiler_stmts_exec(ref_stmts, ca);
                                blockOut(actions);
                                flow_control.pop();
                                write3dir("// >>>> dowhile - condicion");
                                condition_node.exec(actions);
                                final Dict condition_node_val = condition_node.getDictVal();
                                final String condition_node_val_val = condition_node_val.getString("val");
                                final String condition_node_val_type = condition_node_val.getString("type");

                                TagSet etqs = condition_node_val.getTags("tags");

                                final String condition_node_val_ltrue = etqs.etqVerdad;
                                final String condition_node_val_lfalse = etqs.etqFalso;

                                if (!condition_node_val_type.equals(TType.BOOLEAN.toString())) {
                                    throwException("Se esperaba un tipo de dato -> %s, se obtuvo -> %s", TType.BOOLEAN, condition_node_val_type);
                                }

                                write3dir("// >>>> dowhile - true");
                                write3dir("%s:", condition_node_val_ltrue);
                                write3dir("// >>>> dowhile - label return");
                                write3dir("goto %s;", l1);
                                write3dir("// >>>> dowhile - false");
                                write3dir("%s:", condition_node_val_lfalse);
                                write3dir("// >>>> dowhile - label salida");
                                write3dir("%s:", l2);
                                write3dir("// >>>>>>>> dowhile <<<<<<<<");

                                write3dir(poolCommit(actions));
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.STMT_DOWHILE);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="FOR">
                    put(TOperation.STMT_FOR, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final ArrayList block_sim_list = (ArrayList) ca.getStack("3dir_block").peek();
                        final Stack flow_control = ca.getStack("flow_control");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final boolean ref_defvar = ref.getBoolean("def_var");
                        final Dict ref_contador = ref.getDict("contador");
                        final Dict ref_inicio = ref.getDict("inicio");
                        final Dict ref_condition = ref.getDict("condition");
                        final Dict ref_increment = ref.getDict("++");
                        final Dict ref_stmts = ref.getDict("stmts");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {
                                final Object contador_info = ref_contador.get("info");
                                final String contador_val = ref_contador.getString("val");
                                final String contador_type = TType.INT.toString();
                                final Node inicio_node = ref_inicio.getNode("nodo");
                                final Node condition_node = ref_condition.getNode("nodo");
                                final String increment_val = ref_increment.getString("val");
                                final Object increment_info = ref_increment.get("info");

                                poolOn(actions);
                                write3dir("// >>>>>>>> for <<<<<<<< //");
                                if (ref_defvar) {
                                    info = contador_info;
                                    final Sim localvar = cc.getSims().addVariable(methodsim, contador_type, contador_val, new Dict());
                                    block_sim_list.add(localvar);
                                }

                                final Sim localvarsim = cc.getSims().getLocalvar(methodsim.name, contador_val, methodsim.getDictOthers().getObjArray("overload"));
                                final String t1 = getTemp(actions);
                                write3dir("// >>>> for - contador");
                                write3dir("%s = p + %d;", t1, localvarsim.position);
                                inicio_node.exec(actions);
                                final Dict inicio_node_val = inicio_node.getDictVal();
                                final String inicio_node_val_val = inicio_node_val.getString("val");
                                final String inicio_node_val_type = inicio_node_val.getString("type");

                                if (!inicio_node_val_type.equals(TType.INT.toString())) {
                                    throwException("Se requiere tipo de dato -> %s, se obtuvo -> %s ", TType.INT, inicio_node_val_type);
                                }
                                write3dir("stack[%s] = %s;", t1, inicio_node_val_val);
                                final String l1 = getLabel(actions);
                                final String l2 = getLabel(actions);
                                write3dir("// >>>> for - label");
                                write3dir("%s:", l1);
                                write3dir("// >>>> for - condicion");
                                condition_node.exec(actions);
                                final Dict condition_node_val = condition_node.getDictVal();
                                final String condition_node_val_val = condition_node_val.getString("val");
                                final String condition_node_val_type = condition_node_val.getString("type");

                                TagSet etqs = condition_node_val.getTags("tags");

                                //final String condition_node_val_ltrue = condition_node_val.getString("ltrue");
                                //final String condition_node_val_lfalse = condition_node_val.getString("lfalse");
                                final String condition_node_val_ltrue = etqs.etqVerdad;
                                final String condition_node_val_lfalse = etqs.etqFalso;

                                if (!condition_node_val_type.equals(TType.BOOLEAN.toString())) {
                                    throwException("Se esperaba tipo de dato -> %s, se encontro -> %s", TType.BOOLEAN, condition_node_val_type);
                                }
                                write3dir("// >>>> for - true");
                                write3dir("%s:", condition_node_val_ltrue);

                                write3dir("// >>>> for - sentencias");
                                flow_control.push(l2);
                                blockIn(actions);
                                frc_compiler_stmts_exec(ref_stmts, ca);
                                blockOut(actions);
                                flow_control.pop();

                                write3dir("// >>>> for - increment");
                                info = increment_info;
                                final Sim increment_sim = cc.getSims().getLocalvar(methodsim.name, increment_val, methodsim.getDictOthers().getObjArray("overload"));
                                final String t2 = getTemp(actions);
                                final String t3 = getTemp(actions);
                                final String t4 = getTemp(actions);
                                write3dir("%s = p + %d;", t2, increment_sim.position);
                                write3dir("%s = stack[%s];", t3, t2);
                                write3dir("%s = %s + 1; //++", t4, t3);
                                write3dir("stack[%s] = %s;", t2, t4);

                                write3dir("// >>>> for - label return");
                                write3dir("goto %s;", l1);
                                write3dir("// >>>> for - false");
                                write3dir("%s:", condition_node_val_lfalse);
                                write3dir("// >>>> for - label salida");
                                write3dir("%s:", l2);
                                write3dir("// >>>>>>>> for <<<<<<<< //");
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.STMT_FOR);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="IF">
                    put(TOperation.STMT_IF, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_if = ref.getDict("if");
                        final Dict ref_else = ref.getDict("else");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {
                                final ArrayList<Dict> if_list = ref_if.getDictArrayList("list");

                                poolOn(actions);
                                write3dir("// >>>>>>>> if <<<<<<<< //");
                                final String l1 = getLabel(actions);
                                for (int i = 0; i < if_list.size(); i++) {
                                    final Dict _if = if_list.get(i);
                                    final Object _if_info = _if.get("info");
                                    final Dict _if_condition = _if.getDict("condition");
                                    final Dict _if_stmts = _if.getDict("stmts");
                                    info = _if_info;

                                    write3dir("// >>>> if - condicion (%d)", i);
                                    final Node _if_condition_node = _if_condition.getNode("nodo");
                                    _if_condition_node.exec(actions);
                                    final Dict _if_condition_node_val = _if_condition_node.getDictVal();
                                    final String _if_condition_node_val_type = _if_condition_node_val.getString("type");

                                    TagSet etqs = _if_condition_node_val.getTags("tags");

                                    final String _if_condition_node_val_ltrue = etqs.etqVerdad;
                                    final String _if_condition_node_val_lfalse = etqs.etqFalso;

                                    if (!_if_condition_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        throwException("Se esperaba un tipo de dato -> %s, se encontro -> %s", TType.BOOLEAN, _if_condition_node_val_type);
                                    }
                                    write3dir("// >>>> if - true (%d)", i);
                                    write3dir("%s:", _if_condition_node_val_ltrue);
                                    write3dir("// >>>> if - sentencias (%d)", i);
                                    blockIn(actions);
                                    frc_compiler_stmts_exec(_if_stmts, ca);
                                    blockOut(actions);
                                    write3dir("// >>>> if - salida (%d)", i);
                                    write3dir("goto %s;", l1);
                                    write3dir("// >>>> if - false (%d)", i);
                                    write3dir("%s:", _if_condition_node_val_lfalse);

                                }
                                if (ref_else != null) {
                                    final Object _else_info = ref_else.get("info");
                                    final Dict _else_stmts = ref_else.getDict("stmts");
                                    info = _else_info;
                                    write3dir("// >>> if - sentencias else");
                                    blockIn(actions);
                                    frc_compiler_stmts_exec(_else_stmts, ca);
                                    blockOut(actions);
                                }

                                write3dir("%s:", l1);
                                write3dir("// >>>>>>>> if <<<<<<<< //");
                                write3dir(poolCommit(actions));
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.STMT_IF);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="SWITCH">
                    put(TOperation.STMT_SWITCH, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final Stack flow_control = ca.getStack("flow_control");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict ref_base = ref.getDict("base");
                        final Dict ref_stmts = ref.getDict("stmts");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {

                                poolOn(actions);
                                write3dir("// >>>>>>>> switch <<<<<<<< //");
                                write3dir("// >>>> switch - base");
                                final String l1 = getLabel(actions);
                                final Node base_node = ref_base.getNode("nodo");
                                base_node.exec(actions);
                                final Dict base_node_val = base_node.getDictVal();
                                final String base_node_val_val = base_node_val.getString("val");
                                final String base_node_val_type = base_node_val.getString("type");
                                write3dir("// >>>> switch - sentencias case");
                                final ArrayList<Dict> case_list = ref_stmts.getDictArrayList("list");
                                for (int i = 0; i < case_list.size(); i++) {
                                    final Dict _case = case_list.get(i);
                                    final Object _case_info = _case.get("info");
                                    final Dict _case_condition = _case.getDict("condition");
                                    final boolean _case_default = _case_condition == null;
                                    final Dict _case_stmts = _case.getDict("stmts");
                                    info = _case_info;

                                    if (_case_default) {
                                        write3dir("// >>>> if - sentencias default", i);
                                        blockIn(actions);
                                        frc_compiler_stmts_exec(_case_stmts, ca);
                                        blockOut(actions);
                                        break;
                                    }

                                    final Node _case_condition_node = _case_condition.getNode("nodo");

                                    write3dir("// >>>> switch  -  case (%d)", i);
                                    write3dir("// >>>> switch  -  condicion (%d)", i);
                                    _case_condition_node.exec(actions);
                                    final Dict _case_condition_node_val = _case_condition_node.getDictVal();
                                    final String _case_condition_node_val_type = _case_condition_node_val.getString("type");
                                    final String _case_condition_node_val_val = _case_condition_node_val.getString("val");

                                    if (!_case_condition_node_val_type.equals(base_node_val_type)) {
                                        throwException("Se esperaba un tipo de dato -> %s, se encontro -> %s", base_node_val_type, _case_condition_node_val_type);
                                    }

                                    final String l2 = getLabel(actions);
                                    final String l3 = getLabel(actions);
                                    write3dir("// >>>> switch - comparacion (%d)", i);
                                    write3dir("if %s == %s then goto %s;", base_node_val_val, _case_condition_node_val_val, l2);
                                    write3dir("goto %s;", l3);

                                    write3dir("// >>>> switch - true (%d)", i);
                                    write3dir("%s:", l2);
                                    write3dir("// >>>> switch - sentencias (%d)", i);
                                    write3dir("// >>>> if - sentencias (%d)", i);
                                    flow_control.push(l1);
                                    blockIn(actions);
                                    frc_compiler_stmts_exec(_case_stmts, ca);
                                    blockOut(actions);
                                    flow_control.pop();
                                    write3dir("// >>>> switch - false (%d)", i);
                                    write3dir("%s:", l3);

                                }

                                write3dir("// >>>> switch - label salida");
                                write3dir("%s:", l1);
                                write3dir("// >>>>>>>> switch <<<<<<<< //");
                                write3dir(poolCommit(actions));

                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.STMT_SWITCH);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="BREAK">
                    put(TOperation.BREAK, (Operation) (Node node, Object actions) -> {

                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final Stack flow_control = ca.getStack("flow_control");
                        final String flow_control_peek = (String) flow_control.peek();

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict _return = ref.getDict("return");

                        Object info = ref_info;
                        try {
                            if (is3dirPhase(phase)) {

                                poolOn(actions);
                                write3dir("// //////// break //////// //");

                                if (flow_control.size() == 1) {
                                    throwException("No se encontro sentencia for, dowhile, while o switch...");
                                }

                                write3dir("goto %s;", flow_control_peek);

                                write3dir("// //////// break //////// //");

                                write3dir(poolCommit(actions));
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.BREAK);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="CONTINUE">
                    put(TOperation.CONTINUE, (Operation) (Node node, Object actions) -> {
                        return noActionsProcessed(TOperation.CONTINUE);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="RETURN">
                    put(TOperation.RETURN, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");
                        final Stack flow_control = ca.getStack("flow_control");
                        final String flow_control_peek = (String) flow_control.peek();

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final Dict _return = ref.getDict("return");

                        final Dict val = new Dict();
                        Object info = ref_info;
                        try {
                            if (is3dirPhase(phase)) {

                                poolOn(actions);
                                write3dir("// //////// return //////// //");
                                if (!methodsim.type.equals(TType.VOID)) {
                                    final Node _return_node = _return.getNode("nodo");
                                    _return_node.exec(actions);
                                    final Dict _return_node_val = _return_node.getDictVal();
                                    final String _return_node_val_val = _return_node_val.getString("val");
                                    final String _return_node_val_type = _return_node_val.getString("type");

                                    if (!_return_node_val_type.equals(methodsim.type.toString())) {
                                        throwException("Se esperaba un tipo de dato -> %s, se obtuvo -> %s", methodsim.type, _return_node_val_type);
                                    }
                                    final String t1 = getTemp(actions);
                                    write3dir("%s = p + 0;", t1);
                                    write3dir("stack[%s] = %s;", t1, _return_node_val_val);
                                }

                                write3dir("goto %s;", flow_control_peek);
                                write3dir("// //////// return //////// //");
                                write3dir(poolCommit(actions));
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.RETURN);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="PRINT">
                    put(TOperation.PRINT, (Operation) (Node node, Object actions) -> {
                        final Dict ca = (Dict) actions;
                        final CC cc = (CC) ca.get("cc");
                        final Stack scope = ca.getStack("scope");
                        final Sim methodsim = (Sim) scope.peek();
                        final Object phase = ca.get("phase");

                        final Dict ref = node.getDictRef();
                        final Object ref_info = ref.get("info");
                        final String ref_name = ref.getString("name");
                        final Dict ref_params = ref.getDict("params");

                        final Dict val = new Dict();
                        Object info = ref_info;

                        try {
                            if (is3dirPhase(phase)) {

                                poolOn(actions);
                                write3dir("//........ llamada %s ........ //", ref_name);
                                final String t1 = getTemp(actions);
                                write3dir("%s = p + %d;", t1, methodsim.size);

                                ArrayList<Dict> param_list = ref_params.getDictArrayList("list");
                                for (int i = 0; i < param_list.size(); i++) {
                                    //<editor-fold defaultstate="collapsed" desc="parametros">
                                    final String t2 = getTemp(actions);
                                    write3dir("// .... parametro %d", i);
                                    write3dir("%s = %s + %d;", t2, t1, i);

                                    final Dict param = param_list.get(i);
                                    final Node param_node = param.getNode("nodo");
                                    write3dir("// .... paremtro val %d", i);
//                                    param_node.getDictRef().put("pointer", true);
                                    param_node.exec(actions);
                                    final Dict param_node_val = param_node.getDictVal();
                                    final String param_node_val_type = param_node_val.getString("type");
                                    final String param_node_val_val = param_node_val.getString("val");

                                    if (param_node_val_type.equals(TType.INT.toString())) {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                        write3dir("p = p + %d;", methodsim.size);
                                        write3dir("call printNum();");
                                        write3dir("p = p - %d;", methodsim.size);
                                    } else if (param_node_val_type.equals(TType.FLOAT.toString())) {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                        write3dir("p = p + %d;", methodsim.size);
                                        write3dir("call printNum();");
                                        write3dir("p = p - %d;", methodsim.size);
                                    } else if (param_node_val_type.equals(TType.BOOLEAN.toString())) {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                        write3dir("p = p + %d;", methodsim.size);
                                        write3dir("call printBoolean();");
                                        write3dir("p = p - %d;", methodsim.size);
                                    } else if (param_node_val_type.equals(TType.REF.toString())) {
                                        write3dir("// ref");
                                    } else if (param_node_val_type.equals(TType.CHAR.toString())) {
                                        write3dir("stack[%s] = %s;", t2, param_node_val_val);
                                        write3dir("p = p + %d;", methodsim.size);
                                        write3dir("call printChar();");
                                        write3dir("p = p - %d;", methodsim.size);
                                    } else if (param_node_val_type.equals(TType.STRING.toString())) {
                                        final Integer param_node_val_length = param_node_val.getInteger("length");

                                        write3dir("// .... string (%d)", param_node_val_length);
                                        if (param_node_val_length == null) {
                                            final String li = getLabel(actions);
                                            final String lv = getLabel(actions);
                                            final String lf = getLabel(actions);
                                            final String tc = getTemp(actions);
                                            final String t3 = getTemp(actions);
                                            final String t4 = getTemp(actions);
                                            final String param_node_val_pointer = param_node_val.getString("pointer");
                                            write3dir("%s = 0;", tc);
                                            write3dir("%s:", li);
                                            write3dir("%s = %s + %s;", t3, param_node_val_val, tc);
                                            write3dir("%s = heap[%s];", t4, t3);
                                            write3dir("if %s != -1 then goto %s;", t4, lv);
                                            write3dir("goto %s;", lf);
                                            write3dir("%s:", lv);

                                            write3dir("// .... char");
                                            write3dir("stack[%s] = %s;", t2, t4);
                                            write3dir("p = p + %d;", methodsim.size);
                                            write3dir("call printChar();");
                                            write3dir("p = p - %d;", methodsim.size);
                                            write3dir("%s = %s + 1;", tc, tc);
                                            write3dir("goto %s;", li);
                                            write3dir("%s:", lf);
                                        } else {
                                            for (int j = 0; j < param_node_val_length; j++) {
                                                final String t3 = getTemp(actions);
                                                final String t4 = getTemp(actions);
                                                write3dir("// .... char (%d)", j);
                                                write3dir("%s = %s + %d;", t3, param_node_val_val, j);
                                                write3dir("%s = heap[%s];", t4, t3);
                                                write3dir("stack[%s] = %s;", t2, t4);
                                                write3dir("p = p + %d;", methodsim.size);
                                                write3dir("call printChar();");
                                                write3dir("p = p - %d;", methodsim.size);
                                            }
                                        }

                                    } else {
                                        write3dir("// else");
                                    }

                                    break;
                                    //</editor-fold>
                                }

                                write3dir("//........ llamada %s ........ //", ref_name);
                                write3dir(poolCommit(actions));
                                return null;
                            }
                        } catch (UnsupportedOperationException exc) {
                            poolRollback(actions);
                            compiler_error(exc, TErr.SEMANTICO, info, actions);
                        }

                        return noActionsProcessed(TOperation.PRINT);
                    });
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="ERROR_LEXICO">
                    put(TOperation.ERROR_LEXICO, (Operation) (Node node, Object actions) -> {
                        Dict cactions = (Dict) actions;
                        Object phase = cactions.get("phase");
                        phase = (phase == null ? "null" : phase);

                        if (isDefPhase(phase)) {
                            compiler_error(new UnsupportedOperationException("Caracter no reconocido..."), TErr.LEXICO, node.getDictRef().get("info"), actions);
                        } else if (is3dirPhase(phase)) {
                            return null;
                        } else {
                            notificar("No actions for -> " + TOperation.ERROR_LEXICO);
                            return null;
                        }
                        return null;
                    });
//</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="ERROR_SINTACTICO">
                    put(TOperation.ERROR_SINTACTICO, (Operation) (Node node, Object actions) -> {
                        Dict cactions = (Dict) actions;
                        Object phase = cactions.get("phase");
                        phase = (phase == null ? "null" : phase);

                        if (isDefPhase(phase)) {
                            compiler_error(new UnsupportedOperationException("Error de sintaxis..."), TErr.SINTACTICO, node.getDictRef().get("info"), actions);
                        } else if (is3dirPhase(phase)) {
                            return null;
                        } else {
                            notificar("No actions for -> " + TOperation.ERROR_SINTACTICO);
                            return null;
                        }
                        return null;
                    });
//</editor-fold>
                }

                private String getMethodName(Sim methodsim) {
                    final String type = methodsim.type.toString();
                    final String name = methodsim.name;
                    final String overload = Arrays.toString(methodsim.getDictOthers().getObjArray("overload")).replaceAll(", ", "_").replace("[", "1_").replace("]", "_1");

                    return String.format("%s_%s_%s", type.toLowerCase(), name.toLowerCase(), overload.toLowerCase());
                }

                private boolean isPrimitiveType(Object type) {
                    // obtener demas...
                    try {
                        TType temp_sim_type = TType.valueOf(type.toString());
                        if (temp_sim_type == TType.INT
                        || temp_sim_type == TType.FLOAT
                        || temp_sim_type == TType.BOOLEAN
                        || temp_sim_type == TType.CHAR
                        || temp_sim_type == TType.NULL
                        || temp_sim_type == TType.REF
                        || temp_sim_type == TType.STRING
                        || temp_sim_type == TType.VOID) {
                            return true;
                        }
                    } catch (IllegalArgumentException exc) {
                    }
                    return false;
                }

                private void throwException(String format, Object... args) throws UnsupportedOperationException {
                    throwException(String.format(format, args));
                }

                private void throwException(String msg) throws UnsupportedOperationException {
                    throw new UnsupportedOperationException(msg);
                }

                private Object noActionsProcessed(TOperation oper) {
                    notificar("No actions for -> " + oper);
                    return null;
                }

                private boolean isDefPhase(Object phase) {
                    return phase.equals("def");
                }

                private boolean is3dirPhase(final Object phase) {
                    return phase.equals("3dir");
                }

                private String getTemp(Object actions) {
                    Dict ad = (Dict) actions;
                    return "t" + ad.put("3dir_t", ad.getInt("3dir_t") + 1);
                }

                private String getLabel(Object actions) {
                    Dict ad = (Dict) actions;
                    return "l" + ad.put("3dir_l", ad.getInt("3dir_l") + 1);
                }

                boolean pool = false;
                final Stack<StringBuilder> pool_text = new Stack<>();
                final Stack<Integer> pool_t = new Stack<>();
                final Stack<Integer> pool_l = new Stack<>();

                private void poolOn(Object actions) {
                    final Dict ca = (Dict) actions;
                    pool = true;
                    pool_t.push(ca.getInt("3dir_t"));
                    pool_l.push(ca.getInt("3dir_l"));
                    pool_text.push(new StringBuilder());
                }

                private void poolRollback(Object actions) {
                    final Dict ca = (Dict) actions;

                    ca.put("3dir_t", pool_t.pop());
                    ca.put("3dir_l", pool_l.pop());
                    pool_text.pop();
                    if (pool_text.size() == 0) {
                        pool = false;
                    }
                }

                private String poolCommit(Object actions) {
                    final Dict ca = (Dict) actions;

                    pool_t.pop();
                    pool_l.pop();
                    String ret = pool_text.pop().toString();
                    if (pool_text.size() == 0) {
                        pool = false;
                    }

                    return ret;
                }

                private void blockIn(Object actions) {
                    final Dict ca = (Dict) actions;
                    final Stack block = ca.getStack("3dir_block");
                    block.push(new ArrayList<>());
                }

                private void blockOut(Object actions) {
                    final Dict ca = (Dict) actions;
                    final CC cc = (CC) ca.get("cc");
                    final Sim methodsim = (Sim) ca.getStack("scope").peek();
                    final Stack<ArrayList<Sim>> block = ca.getStack("3dir_block");

                    ArrayList<Sim> sim_list = block.pop();
                    for (Sim sim : sim_list) {
                        final String sim_key = cc.getSims().getKey4parameter(methodsim.name, sim.name, methodsim.getDictOthers().getObjArray("overload"));
                        cc.getSims().remove(sim_key);
                    }

//                    cc.getSims().
                }

                private void write3dir() {
                    write3dir("");
                }

                private void write3dir(String format, Object... args) {
                    write3dir(String.format(format, args));
                }

                private void write3dir(String text) {

                    if (pool) {
                        pool_text.peek().append(text);
                        pool_text.peek().append("\n");
                        return;
                    }

//                    System.out.println(text);
                    try {
                        Files.write(Paths.get("gg.3dir"), text.concat("\n").getBytes("utf8"), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
                    } catch (IOException exc) {
                        notificar(exc.getMessage());
                    }
//                    Files.write(cactions.getPath("3dir_path"), $3dir_method.getBytes("utf8"), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
                }

                private void compiler_error(Exception ex, TErr terr, Object info, Object actions) {
                    final CC ccompiler = (CC) ((Dict) actions).get("cc");
                    final Err err = new Err(terr, ex.getMessage(), info);
                    ccompiler.getErrs().add(err);

                    System.out.println(err);
//                            error(exc);
                }
            });

    private HashSet getSetModifiers(Dict mod) {
        HashSet<TModifier> ret = new HashSet();
        final ArrayList<Dict> list = mod.getDictArrayList("list");

        for (Dict i : list) {
            ret.add((TModifier) i.get("val"));
        }

        return ret;
    }

    private Object[] getArrayType(Dict params) {
        final ArrayList<Dict> list = (ArrayList<Dict>) params.getDictArrayList("list");
        Object[] ret = new Object[list.size()];
        for (int i = 0; i < list.size(); i++) {
            Dict param = list.get(i);
            ret[i] = param.getDict("type").get("val");
        }
        return ret;
    }

    private Object[][] getSimData() {
        return ((CC) compiler_actions.get("cc")).getSims().toArray2D();
    }

    private Object[] getSimHeaders() {
        return ((CC) compiler_actions.get("cc")).getSims().getArrayHeader();
    }

    private void refresh_errtable(JTable table) {
        Object[][] data = getErrData();
        Object[] headers = getErrHeaders();

        refresh_table(table, data, headers);
    }

    private Object[][] getErrData() {
        return ((CC) compiler_actions.get("cc")).getErrs().toArray2D();
    }

    private Object[] getErrHeaders() {
        return ((CC) compiler_actions.get("cc")).getErrs().getArrayHeader();
    }

    private void setTabSize(JTextPane pane, int i) {
        TabStop[] tabs = new TabStop[i];
        tabs[0] = new TabStop(60, TabStop.ALIGN_LEFT, TabStop.LEAD_NONE);
        tabs[1] = new TabStop(100, TabStop.ALIGN_LEFT, TabStop.LEAD_NONE);
        tabs[2] = new TabStop(200, TabStop.ALIGN_LEFT, TabStop.LEAD_NONE);
        tabs[3] = new TabStop(300, TabStop.ALIGN_LEFT, TabStop.LEAD_NONE);
        TabSet tabset = new TabSet(tabs);

        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY,
                StyleConstants.TabSet, tabset);
        pane.setParagraphAttributes(aset, false);
    }

    private void frc_3dir(Dict actions) {
        Stack<Dict> apps = actions.getStack("app");
        actions.put("phase", "3dir");
        actions.put("3dir_path", Paths.get("gg.3dir"));
        actions.put("3dir_t", 0);
        actions.put("3dir_l", 0);
        actions.put("3dir_block", new Stack<>());

        try {
            Files.write(actions.getPath("3dir_path"), new byte[]{}, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException ex) {
//            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            notificar(ex);
        }

        for (Dict app : apps) {
            frc_compiler_stmts_exec(app, actions);
        }
    }

    private void frc_def(Object input, Dict actions) {
        actions.put("phase", "def");
        frc_compile(input.toString(), actions, true);
    }

    private String optimizar(Object app) {
        final Opt optimizador = new Opt(app);

        return optimizador.getString(optimizador.opt());
//        return optimizador.getString((LinkedHashMap) app);
    }

}
