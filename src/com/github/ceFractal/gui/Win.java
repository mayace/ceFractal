/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.ceFractal.gui;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.BoxView;
import javax.swing.text.ComponentView;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.IconView;
import javax.swing.text.LabelView;
import javax.swing.text.ParagraphView;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author ce
 */
public class Win extends javax.swing.JFrame {

    /**
     * Creates new form Win
     */
    public Win() {
        initComponents();
        myinit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsplitp_base1 = new javax.swing.JSplitPane();
        jsplitp_base2 = new javax.swing.JSplitPane();
        jtabbedp_tab = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jsp_tree_scroll = new javax.swing.JScrollPane();
        jtree_tree = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProMenuItem = new javax.swing.JMenuItem();
        newMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        comilerMenu = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jsplitp_base2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jsplitp_base2.setTopComponent(jtabbedp_tab);

        jScrollPane1.setViewportView(jEditorPane1);

        jsplitp_base2.setRightComponent(jScrollPane1);

        jsplitp_base1.setRightComponent(jsplitp_base2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jtree_tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jsp_tree_scroll.setViewportView(jtree_tree);

        jsplitp_base1.setLeftComponent(jsp_tree_scroll);

        getContentPane().add(jsplitp_base1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newProMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        newProMenuItem.setText("New Project");
        newProMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newProMenuItem);

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        fileMenu.add(newMenuItem);
        fileMenu.add(jSeparator1);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator3);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        comilerMenu.setText("Compiler");

        jMenuItem8.setText("Compilar");
        comilerMenu.add(jMenuItem8);

        jMenuItem1.setText("Tabla de Simbolos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        comilerMenu.add(jMenuItem1);
        comilerMenu.add(jSeparator5);

        jMenuItem2.setText("Generar Codigo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        comilerMenu.add(jMenuItem2);

        jMenuItem3.setText("Ejecutar");
        comilerMenu.add(jMenuItem3);

        jMenuItem4.setText("Optimizar");
        comilerMenu.add(jMenuItem4);
        comilerMenu.add(jSeparator4);

        jMenuItem5.setText("Errores Lexicos");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        comilerMenu.add(jMenuItem5);

        jMenuItem6.setText("Error Sintacticos");
        comilerMenu.add(jMenuItem6);

        jMenuItem7.setText("Error Sematicos");
        comilerMenu.add(jMenuItem7);

        menuBar.add(comilerMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void newProMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser fchooser = new JFileChooser();
        fchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fchooser.setSelectedFile(null);

        int res = fchooser.showSaveDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            Path dselected = fchooser.getSelectedFile().toPath();
            if (Files.notExists(dselected) || !Files.isDirectory(dselected)) {
                // CREAR PROYECTO...
                String ruta = dselected.toString();
                String nombre = dselected.getFileName().toString();
                String fproject_str = String.format("<proyecto nombre=\"%1$s\" ruta = \"%2$s\"></proyecto>", nombre, ruta);

                try {
                    // Crear directorio
                    Files.createDirectory(dselected);

                    // Crear dir watch
                    new Thread(() -> {
                        //??
//                        DefaultTreeModel model = (DefaultTreeModel) jtree_tree.getModel();
//                        synchronized (model) {
//                            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
//                            DefaultMutableTreeNode child = new DefaultMutableTreeNode(dselected.getFileName());
//                            root.add(child);
//                            model.reload();
//                        }

                        // crear watch
                        try {
                            WatchService watcher = FileSystems.getDefault().newWatchService();
                            dselected.register(watcher, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);

                            for (;;) {
                                // 1.
                                // wait for key to be signaled
                                WatchKey key = watcher.take();

                                // 2.
                                // process
                                for (WatchEvent<?> event : key.pollEvents()) {
                                    WatchEvent.Kind<?> kind = event.kind();

                                    // The filename is the
                                    // context of the event.
                                    WatchEvent<Path> pevent = (WatchEvent<Path>) event;
                                    Path p = pevent.context();

                                    boolean endsWith_pj = p.endsWith(".pj");
                                    boolean endsWith_frc = p.endsWith(".frc");

                                    if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
                                        if (endsWith_pj) {
                                            pj_compile(p);
                                        } else if (endsWith_frc) {
                                        } else {
                                        }
                                    } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
                                    } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
                                    } else {
                                        // operation not supported...
                                        System.err.println(p.toAbsolutePath().toString());
                                        System.err.println(kind.name());
                                        continue;
                                    }

                                }

                                // 3.
                                // Reset the key -- this step is critical if you want to
                                // receive further watch events.  If the key is no longer valid,
                                // the directory is inaccessible so exit the loop.
                                boolean valid = key.reset();
                                if (!valid) {
                                    break;
                                }
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }).start();

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    // Crear .pj file
                    final Path fproyecto = dselected.resolve(nombre + ".pj");
                    Files.createFile(fproyecto);

                    // Escribir en .pj file
                    Files.write(fproyecto, fproject_str.getBytes("utf8"));

                } catch (IOException ex) {
                    Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }//GEN-LAST:event_newProMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Win().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu comilerMenu;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JScrollPane jsp_tree_scroll;
    private javax.swing.JSplitPane jsplitp_base1;
    private javax.swing.JSplitPane jsplitp_base2;
    private javax.swing.JTabbedPane jtabbedp_tab;
    private javax.swing.JTree jtree_tree;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem newProMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private void myinit() {
        final JTextArea lines = new JTextArea("1");
        final JEditorPane editor = new JEditorPane();

        editor.setEditorKit(new EKit());

        editor.setText("dsjlfskjdlg");

//        jscrollp_tab_scroll.setViewportView(editor);
//        jscrollp_tab_scroll.setRowHeaderView(lines);
    }

    private void pj_compile(Path p) {
        
    }

}

class EKit extends StyledEditorKit {

    @Override
    public Document createDefaultDocument() {
        return new Doc();
    }

    @Override
    public ViewFactory getViewFactory() {
        return new StyledViewFactory();
    }

    static class StyledViewFactory implements ViewFactory {

        public View create(Element elem) {
            String kind = elem.getName();
            if (kind != null) {
                if (kind.equals(AbstractDocument.ContentElementName)) {
                    return new LabelView(elem);
                } else if (kind.equals(AbstractDocument.ParagraphElementName)) {
                    return new ParagraphView(elem);
                } else if (kind.equals(AbstractDocument.SectionElementName)) {
                    return new BoxView(elem, View.Y_AXIS);
                } else if (kind.equals(StyleConstants.ComponentElementName)) {
                    return new ComponentView(elem);
                } else if (kind.equals(StyleConstants.IconElementName)) {
                    return new IconView(elem);
                }
            }

            // default to text display
            return new LabelView(elem);
        }

        private ArrayList<ViewListener> listViewListener = new ArrayList<>();

        public void addViewListener() {
        }
    }

}

interface ViewListener {

    public void created();

    public void removed();
}

interface ViewEvent {
}

class Doc extends DefaultStyledDocument {

    @Override
    protected Element createLeafElement(Element parent, AttributeSet a, int p0, int p1) {

        Element e = super.createLeafElement(parent, a, p0, p1); //To change body of generated methods, choose Tools | Templates.
        System.err.println(e.getName());

        return e;
    }

    @Override
    protected Element createBranchElement(Element parent, AttributeSet a) {
        final Element e = super.createBranchElement(parent, a); //To change body of generated methods, choose Tools | Templates.
        if (e.getName().equalsIgnoreCase(AbstractDocument.ParagraphElementName)) {
            System.err.println(e.getName());
        }
        return e; //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    protected void create(ElementSpec[] data) {
        System.err.println("wtf");
        super.create(data); //To change body of generated methods, choose Tools | Templates.
    }

}
