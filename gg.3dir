void void_main_1__1(){

//*** ASINGACION VARIABLE... ***//
// Obtener puntero
t0 = p + 0;
// Obtener valor
// int,float -> 0
t1 = 0;
// asignacion
stack[t0] = t1;
//........ llamada imprimir ........ //
t2 = p + 1;
// .... parametro 0
t3 = t2 + 0;
// .... paremtro val 0
// string -> while
t4 = h;
h = h + 6;
t5 = t4 + 0;
heap[t5] = 119;
t6 = t4 + 1;
heap[t6] = 104;
t7 = t4 + 2;
heap[t7] = 105;
t8 = t4 + 3;
heap[t8] = 108;
t9 = t4 + 4;
heap[t9] = 101;
t10 = t4 + 5;
heap[t10] = -1;
// .... string (5)
// .... char (0)
t11 = t4 + 0;
t12 = heap[t11];
stack[t3] = t12;
p = p + 1;
call printChar();
p = p - 1;
// .... char (1)
t13 = t4 + 1;
t14 = heap[t13];
stack[t3] = t14;
p = p + 1;
call printChar();
p = p - 1;
// .... char (2)
t15 = t4 + 2;
t16 = heap[t15];
stack[t3] = t16;
p = p + 1;
call printChar();
p = p - 1;
// .... char (3)
t17 = t4 + 3;
t18 = heap[t17];
stack[t3] = t18;
p = p + 1;
call printChar();
p = p - 1;
// .... char (4)
t19 = t4 + 4;
t20 = heap[t19];
stack[t3] = t20;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

//........ llamada imprimir ........ //
t21 = p + 1;
// .... parametro 0
t22 = t21 + 0;
// .... paremtro val 0
// string -> 

t23 = h;
h = h + 2;
t24 = t23 + 0;
heap[t24] = 10;
t25 = t23 + 1;
heap[t25] = -1;
// .... string (1)
// .... char (0)
t26 = t23 + 0;
t27 = heap[t26];
stack[t22] = t27;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

// >>>>>>>> while <<<<<<<< //
// >>>> while - label
l1:
// >>>> while - condicion
t28 = p + 0;
t29 = stack[t28];
// int,float -> 10
t30 = 10;
	if t29<t30 then goto l3;
	goto l4;
// >>>> while - true
l3:
// >>>> while - sentencias
//........ llamada imprimir ........ //
t31 = p + 1;
// .... parametro 0
t32 = t31 + 0;
// .... paremtro val 0
// string -> hola mundo
t33 = h;
h = h + 11;
t34 = t33 + 0;
heap[t34] = 104;
t35 = t33 + 1;
heap[t35] = 111;
t36 = t33 + 2;
heap[t36] = 108;
t37 = t33 + 3;
heap[t37] = 97;
t38 = t33 + 4;
heap[t38] = 32;
t39 = t33 + 5;
heap[t39] = 109;
t40 = t33 + 6;
heap[t40] = 117;
t41 = t33 + 7;
heap[t41] = 110;
t42 = t33 + 8;
heap[t42] = 100;
t43 = t33 + 9;
heap[t43] = 111;
t44 = t33 + 10;
heap[t44] = -1;
// .... string (10)
// .... char (0)
t45 = t33 + 0;
t46 = heap[t45];
stack[t32] = t46;
p = p + 1;
call printChar();
p = p - 1;
// .... char (1)
t47 = t33 + 1;
t48 = heap[t47];
stack[t32] = t48;
p = p + 1;
call printChar();
p = p - 1;
// .... char (2)
t49 = t33 + 2;
t50 = heap[t49];
stack[t32] = t50;
p = p + 1;
call printChar();
p = p - 1;
// .... char (3)
t51 = t33 + 3;
t52 = heap[t51];
stack[t32] = t52;
p = p + 1;
call printChar();
p = p - 1;
// .... char (4)
t53 = t33 + 4;
t54 = heap[t53];
stack[t32] = t54;
p = p + 1;
call printChar();
p = p - 1;
// .... char (5)
t55 = t33 + 5;
t56 = heap[t55];
stack[t32] = t56;
p = p + 1;
call printChar();
p = p - 1;
// .... char (6)
t57 = t33 + 6;
t58 = heap[t57];
stack[t32] = t58;
p = p + 1;
call printChar();
p = p - 1;
// .... char (7)
t59 = t33 + 7;
t60 = heap[t59];
stack[t32] = t60;
p = p + 1;
call printChar();
p = p - 1;
// .... char (8)
t61 = t33 + 8;
t62 = heap[t61];
stack[t32] = t62;
p = p + 1;
call printChar();
p = p - 1;
// .... char (9)
t63 = t33 + 9;
t64 = heap[t63];
stack[t32] = t64;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

//........ llamada imprimir ........ //
t65 = p + 1;
// .... parametro 0
t66 = t65 + 0;
// .... paremtro val 0
// string -> 

t67 = h;
h = h + 2;
t68 = t67 + 0;
heap[t68] = 10;
t69 = t67 + 1;
heap[t69] = -1;
// .... string (1)
// .... char (0)
t70 = t67 + 0;
t71 = heap[t70];
stack[t66] = t71;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

// $$$$$$$$ asignacion $$$$$$$$ //
// $$$$ variable
t72 = p + 0;
// $$$$ valor
t73 = p + 0;
t74 = stack[t73];
// int,float -> 1
t75 = 1;
//Mas +++
t76 = t74 + t75;
// $$$$ asignacion
stack[t72] = t76;
// $$$$$$$$ asignacion $$$$$$$$ //

goto l1;
// >>>> while - false
l4:
// >>>> while - label salida
l2:
// >>>>>>>> while <<<<<<<< //

//........ llamada imprimir ........ //
t77 = p + 1;
// .... parametro 0
t78 = t77 + 0;
// .... paremtro val 0
// string -> dowhile
t79 = h;
h = h + 8;
t80 = t79 + 0;
heap[t80] = 100;
t81 = t79 + 1;
heap[t81] = 111;
t82 = t79 + 2;
heap[t82] = 119;
t83 = t79 + 3;
heap[t83] = 104;
t84 = t79 + 4;
heap[t84] = 105;
t85 = t79 + 5;
heap[t85] = 108;
t86 = t79 + 6;
heap[t86] = 101;
t87 = t79 + 7;
heap[t87] = -1;
// .... string (7)
// .... char (0)
t88 = t79 + 0;
t89 = heap[t88];
stack[t78] = t89;
p = p + 1;
call printChar();
p = p - 1;
// .... char (1)
t90 = t79 + 1;
t91 = heap[t90];
stack[t78] = t91;
p = p + 1;
call printChar();
p = p - 1;
// .... char (2)
t92 = t79 + 2;
t93 = heap[t92];
stack[t78] = t93;
p = p + 1;
call printChar();
p = p - 1;
// .... char (3)
t94 = t79 + 3;
t95 = heap[t94];
stack[t78] = t95;
p = p + 1;
call printChar();
p = p - 1;
// .... char (4)
t96 = t79 + 4;
t97 = heap[t96];
stack[t78] = t97;
p = p + 1;
call printChar();
p = p - 1;
// .... char (5)
t98 = t79 + 5;
t99 = heap[t98];
stack[t78] = t99;
p = p + 1;
call printChar();
p = p - 1;
// .... char (6)
t100 = t79 + 6;
t101 = heap[t100];
stack[t78] = t101;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

//........ llamada imprimir ........ //
t102 = p + 1;
// .... parametro 0
t103 = t102 + 0;
// .... paremtro val 0
// string -> 

t104 = h;
h = h + 2;
t105 = t104 + 0;
heap[t105] = 10;
t106 = t104 + 1;
heap[t106] = -1;
// .... string (1)
// .... char (0)
t107 = t104 + 0;
t108 = heap[t107];
stack[t103] = t108;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

// >>>>>>>> dowhile <<<<<<<<
// >>>> dowhile - label
l5:
// >>>> dowhile - sentencias
//........ llamada imprimir ........ //
t109 = p + 1;
// .... parametro 0
t110 = t109 + 0;
// .... paremtro val 0
t111 = p + 0;
t112 = stack[t111];
stack[t110] = t112;
p = p + 1;
call printNum();
p = p - 1;
//........ llamada imprimir ........ //

//........ llamada imprimir ........ //
t113 = p + 1;
// .... parametro 0
t114 = t113 + 0;
// .... paremtro val 0
// string -> 

t115 = h;
h = h + 2;
t116 = t115 + 0;
heap[t116] = 10;
t117 = t115 + 1;
heap[t117] = -1;
// .... string (1)
// .... char (0)
t118 = t115 + 0;
t119 = heap[t118];
stack[t114] = t119;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

// $$$$$$$$ asignacion $$$$$$$$ //
// $$$$ variable
t120 = p + 0;
// $$$$ valor
t121 = p + 0;
t122 = stack[t121];
// int,float -> 1
t123 = 1;
t124 = t122 - t123;
// $$$$ asignacion
stack[t120] = t124;
// $$$$$$$$ asignacion $$$$$$$$ //

// >>>> dowhile - condicion
// int,float -> 0
t125 = 0;
t126 = p + 0;
t127 = stack[t126];
	if t125<t127 then goto l7;
	goto l8;
// >>>> dowhile - true
l7:
// >>>> dowhile - label return
goto l5;
// >>>> dowhile - false
l8:
// >>>> dowhile - label salida
l6:
// >>>>>>>> dowhile <<<<<<<<

//........ llamada imprimir ........ //
t128 = p + 1;
// .... parametro 0
t129 = t128 + 0;
// .... paremtro val 0
// string -> for
t130 = h;
h = h + 4;
t131 = t130 + 0;
heap[t131] = 102;
t132 = t130 + 1;
heap[t132] = 111;
t133 = t130 + 2;
heap[t133] = 114;
t134 = t130 + 3;
heap[t134] = -1;
// .... string (3)
// .... char (0)
t135 = t130 + 0;
t136 = heap[t135];
stack[t129] = t136;
p = p + 1;
call printChar();
p = p - 1;
// .... char (1)
t137 = t130 + 1;
t138 = heap[t137];
stack[t129] = t138;
p = p + 1;
call printChar();
p = p - 1;
// .... char (2)
t139 = t130 + 2;
t140 = heap[t139];
stack[t129] = t140;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

//........ llamada imprimir ........ //
t141 = p + 1;
// .... parametro 0
t142 = t141 + 0;
// .... paremtro val 0
// string -> 

t143 = h;
h = h + 2;
t144 = t143 + 0;
heap[t144] = 10;
t145 = t143 + 1;
heap[t145] = -1;
// .... string (1)
// .... char (0)
t146 = t143 + 0;
t147 = heap[t146];
stack[t142] = t147;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

// >>>>>>>> for <<<<<<<< //
// >>>> for - contador
t148 = p + 0;
// int,float -> 0
t149 = 0;
stack[t148] = t149;
// >>>> for - label
l9:
// >>>> for - condicion
t150 = p + 0;
t151 = stack[t150];
// int,float -> 10
t152 = 10;
	if t151<t152 then goto l11;
	goto l12;
// >>>> for - true
l11:
// >>>> for - sentencias
//........ llamada imprimir ........ //
t153 = p + 1;
// .... parametro 0
t154 = t153 + 0;
// .... paremtro val 0
t155 = p + 0;
t156 = stack[t155];
stack[t154] = t156;
p = p + 1;
call printNum();
p = p - 1;
//........ llamada imprimir ........ //

//........ llamada imprimir ........ //
t157 = p + 1;
// .... parametro 0
t158 = t157 + 0;
// .... paremtro val 0
// string -> 

t159 = h;
h = h + 2;
t160 = t159 + 0;
heap[t160] = 10;
t161 = t159 + 1;
heap[t161] = -1;
// .... string (1)
// .... char (0)
t162 = t159 + 0;
t163 = heap[t162];
stack[t158] = t163;
p = p + 1;
call printChar();
p = p - 1;
//........ llamada imprimir ........ //

// >>>> for - increment
t164 = p + 0;
t165 = stack[t164];
t166 = t165 + 1; //++
stack[t164] = t166;
// >>>> for - label return
goto l9;
// >>>> for - false
l12:
// >>>> for - label salida
l10:
// >>>>>>>> for <<<<<<<< //

// ==== method - salida
l0:

}
